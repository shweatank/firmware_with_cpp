
mutex_task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005200  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  080053b0  080053b0  000063b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005450  08005450  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  08005450  08005450  00006450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005458  08005458  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005458  08005458  00006458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800545c  0800545c  0000645c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005460  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007060  2**0
                  CONTENTS
 10 .bss          00004b9c  20000060  20000060  00007060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004bfc  20004bfc  00007060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 13 .debug_info   000140af  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d12  00000000  00000000  0001b13f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a0  00000000  00000000  0001de58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d91  00000000  00000000  0001eff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d31  00000000  00000000  0001fd89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012e4d  00000000  00000000  00022aba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1b5a  00000000  00000000  00035907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00117461  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ccc  00000000  00000000  001174a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0011c170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005398 	.word	0x08005398

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	08005398 	.word	0x08005398

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b96a 	b.w	80004dc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	460c      	mov	r4, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14e      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022c:	4694      	mov	ip, r2
 800022e:	458c      	cmp	ip, r1
 8000230:	4686      	mov	lr, r0
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	d962      	bls.n	80002fe <__udivmoddi4+0xde>
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0320 	rsb	r3, r2, #32
 800023e:	4091      	lsls	r1, r2
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	fa0c fc02 	lsl.w	ip, ip, r2
 8000248:	4319      	orrs	r1, r3
 800024a:	fa00 fe02 	lsl.w	lr, r0, r2
 800024e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000252:	fa1f f68c 	uxth.w	r6, ip
 8000256:	fbb1 f4f7 	udiv	r4, r1, r7
 800025a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025e:	fb07 1114 	mls	r1, r7, r4, r1
 8000262:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000266:	fb04 f106 	mul.w	r1, r4, r6
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f104 30ff 	add.w	r0, r4, #4294967295
 8000276:	f080 8112 	bcs.w	800049e <__udivmoddi4+0x27e>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 810f 	bls.w	800049e <__udivmoddi4+0x27e>
 8000280:	3c02      	subs	r4, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a59      	subs	r1, r3, r1
 8000286:	fa1f f38e 	uxth.w	r3, lr
 800028a:	fbb1 f0f7 	udiv	r0, r1, r7
 800028e:	fb07 1110 	mls	r1, r7, r0, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb00 f606 	mul.w	r6, r0, r6
 800029a:	429e      	cmp	r6, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x94>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a6:	f080 80fc 	bcs.w	80004a2 <__udivmoddi4+0x282>
 80002aa:	429e      	cmp	r6, r3
 80002ac:	f240 80f9 	bls.w	80004a2 <__udivmoddi4+0x282>
 80002b0:	4463      	add	r3, ip
 80002b2:	3802      	subs	r0, #2
 80002b4:	1b9b      	subs	r3, r3, r6
 80002b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ba:	2100      	movs	r1, #0
 80002bc:	b11d      	cbz	r5, 80002c6 <__udivmoddi4+0xa6>
 80002be:	40d3      	lsrs	r3, r2
 80002c0:	2200      	movs	r2, #0
 80002c2:	e9c5 3200 	strd	r3, r2, [r5]
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d905      	bls.n	80002da <__udivmoddi4+0xba>
 80002ce:	b10d      	cbz	r5, 80002d4 <__udivmoddi4+0xb4>
 80002d0:	e9c5 0100 	strd	r0, r1, [r5]
 80002d4:	2100      	movs	r1, #0
 80002d6:	4608      	mov	r0, r1
 80002d8:	e7f5      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d146      	bne.n	8000370 <__udivmoddi4+0x150>
 80002e2:	42a3      	cmp	r3, r4
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xcc>
 80002e6:	4290      	cmp	r0, r2
 80002e8:	f0c0 80f0 	bcc.w	80004cc <__udivmoddi4+0x2ac>
 80002ec:	1a86      	subs	r6, r0, r2
 80002ee:	eb64 0303 	sbc.w	r3, r4, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	d0e6      	beq.n	80002c6 <__udivmoddi4+0xa6>
 80002f8:	e9c5 6300 	strd	r6, r3, [r5]
 80002fc:	e7e3      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x204>
 8000304:	eba1 040c 	sub.w	r4, r1, ip
 8000308:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800030c:	fa1f f78c 	uxth.w	r7, ip
 8000310:	2101      	movs	r1, #1
 8000312:	fbb4 f6f8 	udiv	r6, r4, r8
 8000316:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031a:	fb08 4416 	mls	r4, r8, r6, r4
 800031e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000322:	fb07 f006 	mul.w	r0, r7, r6
 8000326:	4298      	cmp	r0, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x11c>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x11a>
 8000334:	4298      	cmp	r0, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 800033a:	4626      	mov	r6, r4
 800033c:	1a1c      	subs	r4, r3, r0
 800033e:	fa1f f38e 	uxth.w	r3, lr
 8000342:	fbb4 f0f8 	udiv	r0, r4, r8
 8000346:	fb08 4410 	mls	r4, r8, r0, r4
 800034a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034e:	fb00 f707 	mul.w	r7, r0, r7
 8000352:	429f      	cmp	r7, r3
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x148>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f100 34ff 	add.w	r4, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x146>
 8000360:	429f      	cmp	r7, r3
 8000362:	f200 80b0 	bhi.w	80004c6 <__udivmoddi4+0x2a6>
 8000366:	4620      	mov	r0, r4
 8000368:	1bdb      	subs	r3, r3, r7
 800036a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0x9c>
 8000370:	f1c1 0620 	rsb	r6, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 f706 	lsr.w	r7, r2, r6
 800037a:	431f      	orrs	r7, r3
 800037c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000380:	fa04 f301 	lsl.w	r3, r4, r1
 8000384:	ea43 030c 	orr.w	r3, r3, ip
 8000388:	40f4      	lsrs	r4, r6
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	0c38      	lsrs	r0, r7, #16
 8000390:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000394:	fbb4 fef0 	udiv	lr, r4, r0
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	fb00 441e 	mls	r4, r0, lr, r4
 80003a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a4:	fb0e f90c 	mul.w	r9, lr, ip
 80003a8:	45a1      	cmp	r9, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90a      	bls.n	80003c6 <__udivmoddi4+0x1a6>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b6:	f080 8084 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80003ba:	45a1      	cmp	r9, r4
 80003bc:	f240 8081 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80003c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	eba4 0409 	sub.w	r4, r4, r9
 80003ca:	fa1f f983 	uxth.w	r9, r3
 80003ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d2:	fb00 4413 	mls	r4, r0, r3, r4
 80003d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003da:	fb03 fc0c 	mul.w	ip, r3, ip
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x1d2>
 80003e2:	193c      	adds	r4, r7, r4
 80003e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e8:	d267      	bcs.n	80004ba <__udivmoddi4+0x29a>
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d965      	bls.n	80004ba <__udivmoddi4+0x29a>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	443c      	add	r4, r7
 80003f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f6:	fba0 9302 	umull	r9, r3, r0, r2
 80003fa:	eba4 040c 	sub.w	r4, r4, ip
 80003fe:	429c      	cmp	r4, r3
 8000400:	46ce      	mov	lr, r9
 8000402:	469c      	mov	ip, r3
 8000404:	d351      	bcc.n	80004aa <__udivmoddi4+0x28a>
 8000406:	d04e      	beq.n	80004a6 <__udivmoddi4+0x286>
 8000408:	b155      	cbz	r5, 8000420 <__udivmoddi4+0x200>
 800040a:	ebb8 030e 	subs.w	r3, r8, lr
 800040e:	eb64 040c 	sbc.w	r4, r4, ip
 8000412:	fa04 f606 	lsl.w	r6, r4, r6
 8000416:	40cb      	lsrs	r3, r1
 8000418:	431e      	orrs	r6, r3
 800041a:	40cc      	lsrs	r4, r1
 800041c:	e9c5 6400 	strd	r6, r4, [r5]
 8000420:	2100      	movs	r1, #0
 8000422:	e750      	b.n	80002c6 <__udivmoddi4+0xa6>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f103 	lsr.w	r1, r0, r3
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	fa24 f303 	lsr.w	r3, r4, r3
 8000434:	4094      	lsls	r4, r2
 8000436:	430c      	orrs	r4, r1
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000440:	fa1f f78c 	uxth.w	r7, ip
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3110 	mls	r1, r8, r0, r3
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000452:	fb00 f107 	mul.w	r1, r0, r7
 8000456:	4299      	cmp	r1, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x24c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000462:	d22c      	bcs.n	80004be <__udivmoddi4+0x29e>
 8000464:	4299      	cmp	r1, r3
 8000466:	d92a      	bls.n	80004be <__udivmoddi4+0x29e>
 8000468:	3802      	subs	r0, #2
 800046a:	4463      	add	r3, ip
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb3 f1f8 	udiv	r1, r3, r8
 8000474:	fb08 3311 	mls	r3, r8, r1, r3
 8000478:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800047c:	fb01 f307 	mul.w	r3, r1, r7
 8000480:	42a3      	cmp	r3, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x276>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f101 36ff 	add.w	r6, r1, #4294967295
 800048c:	d213      	bcs.n	80004b6 <__udivmoddi4+0x296>
 800048e:	42a3      	cmp	r3, r4
 8000490:	d911      	bls.n	80004b6 <__udivmoddi4+0x296>
 8000492:	3902      	subs	r1, #2
 8000494:	4464      	add	r4, ip
 8000496:	1ae4      	subs	r4, r4, r3
 8000498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800049c:	e739      	b.n	8000312 <__udivmoddi4+0xf2>
 800049e:	4604      	mov	r4, r0
 80004a0:	e6f0      	b.n	8000284 <__udivmoddi4+0x64>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e706      	b.n	80002b4 <__udivmoddi4+0x94>
 80004a6:	45c8      	cmp	r8, r9
 80004a8:	d2ae      	bcs.n	8000408 <__udivmoddi4+0x1e8>
 80004aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7a8      	b.n	8000408 <__udivmoddi4+0x1e8>
 80004b6:	4631      	mov	r1, r6
 80004b8:	e7ed      	b.n	8000496 <__udivmoddi4+0x276>
 80004ba:	4603      	mov	r3, r0
 80004bc:	e799      	b.n	80003f2 <__udivmoddi4+0x1d2>
 80004be:	4630      	mov	r0, r6
 80004c0:	e7d4      	b.n	800046c <__udivmoddi4+0x24c>
 80004c2:	46d6      	mov	lr, sl
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1a6>
 80004c6:	4463      	add	r3, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e74d      	b.n	8000368 <__udivmoddi4+0x148>
 80004cc:	4606      	mov	r6, r0
 80004ce:	4623      	mov	r3, r4
 80004d0:	4608      	mov	r0, r1
 80004d2:	e70f      	b.n	80002f4 <__udivmoddi4+0xd4>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	e730      	b.n	800033c <__udivmoddi4+0x11c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e4:	f000 fa28 	bl	8000938 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e8:	f000 f82e 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ec:	f000 f88c 	bl	8000608 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f0:	f001 fc82 	bl	8001df8 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of mutex */
  mutexHandle = osMutexNew(&mutex_attributes);
 80004f4:	480c      	ldr	r0, [pc, #48]	@ (8000528 <main+0x48>)
 80004f6:	f001 fd76 	bl	8001fe6 <osMutexNew>
 80004fa:	4603      	mov	r3, r0
 80004fc:	4a0b      	ldr	r2, [pc, #44]	@ (800052c <main+0x4c>)
 80004fe:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(taskFunction1, NULL, &Task1_attributes);
 8000500:	4a0b      	ldr	r2, [pc, #44]	@ (8000530 <main+0x50>)
 8000502:	2100      	movs	r1, #0
 8000504:	480b      	ldr	r0, [pc, #44]	@ (8000534 <main+0x54>)
 8000506:	f001 fcc1 	bl	8001e8c <osThreadNew>
 800050a:	4603      	mov	r3, r0
 800050c:	4a0a      	ldr	r2, [pc, #40]	@ (8000538 <main+0x58>)
 800050e:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(taskFunction2, NULL, &Task2_attributes);
 8000510:	4a0a      	ldr	r2, [pc, #40]	@ (800053c <main+0x5c>)
 8000512:	2100      	movs	r1, #0
 8000514:	480a      	ldr	r0, [pc, #40]	@ (8000540 <main+0x60>)
 8000516:	f001 fcb9 	bl	8001e8c <osThreadNew>
 800051a:	4603      	mov	r3, r0
 800051c:	4a09      	ldr	r2, [pc, #36]	@ (8000544 <main+0x64>)
 800051e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000520:	f001 fc8e 	bl	8001e40 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000524:	bf00      	nop
 8000526:	e7fd      	b.n	8000524 <main+0x44>
 8000528:	08005428 	.word	0x08005428
 800052c:	20000084 	.word	0x20000084
 8000530:	080053e0 	.word	0x080053e0
 8000534:	08000671 	.word	0x08000671
 8000538:	2000007c 	.word	0x2000007c
 800053c:	08005404 	.word	0x08005404
 8000540:	080006bd 	.word	0x080006bd
 8000544:	20000080 	.word	0x20000080

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b094      	sub	sp, #80	@ 0x50
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 0320 	add.w	r3, r7, #32
 8000552:	2230      	movs	r2, #48	@ 0x30
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f004 fe36 	bl	80051c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	f107 030c 	add.w	r3, r7, #12
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800056c:	2300      	movs	r3, #0
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	4b23      	ldr	r3, [pc, #140]	@ (8000600 <SystemClock_Config+0xb8>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000574:	4a22      	ldr	r2, [pc, #136]	@ (8000600 <SystemClock_Config+0xb8>)
 8000576:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800057a:	6413      	str	r3, [r2, #64]	@ 0x40
 800057c:	4b20      	ldr	r3, [pc, #128]	@ (8000600 <SystemClock_Config+0xb8>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000580:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000584:	60bb      	str	r3, [r7, #8]
 8000586:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000588:	2300      	movs	r3, #0
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	4b1d      	ldr	r3, [pc, #116]	@ (8000604 <SystemClock_Config+0xbc>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000594:	4a1b      	ldr	r2, [pc, #108]	@ (8000604 <SystemClock_Config+0xbc>)
 8000596:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800059a:	6013      	str	r3, [r2, #0]
 800059c:	4b19      	ldr	r3, [pc, #100]	@ (8000604 <SystemClock_Config+0xbc>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a8:	2302      	movs	r3, #2
 80005aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ac:	2301      	movs	r3, #1
 80005ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b0:	2310      	movs	r3, #16
 80005b2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005b4:	2300      	movs	r3, #0
 80005b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b8:	f107 0320 	add.w	r3, r7, #32
 80005bc:	4618      	mov	r0, r3
 80005be:	f000 fcbf 	bl	8000f40 <HAL_RCC_OscConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005c8:	f000 f8b0 	bl	800072c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005cc:	230f      	movs	r3, #15
 80005ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005d0:	2300      	movs	r3, #0
 80005d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 ff22 	bl	8001430 <HAL_RCC_ClockConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005f2:	f000 f89b 	bl	800072c <Error_Handler>
  }
}
 80005f6:	bf00      	nop
 80005f8:	3750      	adds	r7, #80	@ 0x50
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40023800 	.word	0x40023800
 8000604:	40007000 	.word	0x40007000

08000608 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800061c:	2300      	movs	r3, #0
 800061e:	603b      	str	r3, [r7, #0]
 8000620:	4b11      	ldr	r3, [pc, #68]	@ (8000668 <MX_GPIO_Init+0x60>)
 8000622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000624:	4a10      	ldr	r2, [pc, #64]	@ (8000668 <MX_GPIO_Init+0x60>)
 8000626:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800062a:	6313      	str	r3, [r2, #48]	@ 0x30
 800062c:	4b0e      	ldr	r3, [pc, #56]	@ (8000668 <MX_GPIO_Init+0x60>)
 800062e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000634:	603b      	str	r3, [r7, #0]
 8000636:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 800063e:	480b      	ldr	r0, [pc, #44]	@ (800066c <MX_GPIO_Init+0x64>)
 8000640:	f000 fc4a 	bl	8000ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000644:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000648:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064a:	2301      	movs	r3, #1
 800064c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064e:	2300      	movs	r3, #0
 8000650:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000652:	2300      	movs	r3, #0
 8000654:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	4619      	mov	r1, r3
 800065a:	4804      	ldr	r0, [pc, #16]	@ (800066c <MX_GPIO_Init+0x64>)
 800065c:	f000 fa90 	bl	8000b80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000660:	bf00      	nop
 8000662:	3718      	adds	r7, #24
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40023800 	.word	0x40023800
 800066c:	40021800 	.word	0x40021800

08000670 <taskFunction1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_taskFunction1 */
void taskFunction1(void *argument)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	if(osMutexAcquire(mutexHandle, osWaitForever ) == osOK){
 8000678:	4b0e      	ldr	r3, [pc, #56]	@ (80006b4 <taskFunction1+0x44>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f04f 31ff 	mov.w	r1, #4294967295
 8000680:	4618      	mov	r0, r3
 8000682:	f001 fd36 	bl	80020f2 <osMutexAcquire>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d10d      	bne.n	80006a8 <taskFunction1+0x38>
		HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13 );
 800068c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000690:	4809      	ldr	r0, [pc, #36]	@ (80006b8 <taskFunction1+0x48>)
 8000692:	f000 fc3a 	bl	8000f0a <HAL_GPIO_TogglePin>
		osDelay(1000);
 8000696:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800069a:	f001 fc89 	bl	8001fb0 <osDelay>
		osMutexRelease(mutexHandle);
 800069e:	4b05      	ldr	r3, [pc, #20]	@ (80006b4 <taskFunction1+0x44>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 fd70 	bl	8002188 <osMutexRelease>
	}
    osDelay(1000);
 80006a8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006ac:	f001 fc80 	bl	8001fb0 <osDelay>
	if(osMutexAcquire(mutexHandle, osWaitForever ) == osOK){
 80006b0:	e7e2      	b.n	8000678 <taskFunction1+0x8>
 80006b2:	bf00      	nop
 80006b4:	20000084 	.word	0x20000084
 80006b8:	40021800 	.word	0x40021800

080006bc <taskFunction2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_taskFunction2 */
void taskFunction2(void *argument)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN taskFunction2 */
  /* Infinite loop */
  for(;;)
  {
	if(osMutexAcquire(mutexHandle, osWaitForever) == osOK){
 80006c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000700 <taskFunction2+0x44>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f04f 31ff 	mov.w	r1, #4294967295
 80006cc:	4618      	mov	r0, r3
 80006ce:	f001 fd10 	bl	80020f2 <osMutexAcquire>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d10d      	bne.n	80006f4 <taskFunction2+0x38>
		HAL_GPIO_TogglePin(GPIOG,GPIO_PIN_14);
 80006d8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006dc:	4809      	ldr	r0, [pc, #36]	@ (8000704 <taskFunction2+0x48>)
 80006de:	f000 fc14 	bl	8000f0a <HAL_GPIO_TogglePin>
		osDelay(1000);
 80006e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006e6:	f001 fc63 	bl	8001fb0 <osDelay>
		osMutexRelease(mutexHandle);
 80006ea:	4b05      	ldr	r3, [pc, #20]	@ (8000700 <taskFunction2+0x44>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4618      	mov	r0, r3
 80006f0:	f001 fd4a 	bl	8002188 <osMutexRelease>
	}
    osDelay(1000);
 80006f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006f8:	f001 fc5a 	bl	8001fb0 <osDelay>
	if(osMutexAcquire(mutexHandle, osWaitForever) == osOK){
 80006fc:	e7e2      	b.n	80006c4 <taskFunction2+0x8>
 80006fe:	bf00      	nop
 8000700:	20000084 	.word	0x20000084
 8000704:	40021800 	.word	0x40021800

08000708 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a04      	ldr	r2, [pc, #16]	@ (8000728 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d101      	bne.n	800071e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800071a:	f000 f92f 	bl	800097c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40010000 	.word	0x40010000

0800072c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000730:	b672      	cpsid	i
}
 8000732:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000734:	bf00      	nop
 8000736:	e7fd      	b.n	8000734 <Error_Handler+0x8>

08000738 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	4b12      	ldr	r3, [pc, #72]	@ (800078c <HAL_MspInit+0x54>)
 8000744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000746:	4a11      	ldr	r2, [pc, #68]	@ (800078c <HAL_MspInit+0x54>)
 8000748:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800074c:	6453      	str	r3, [r2, #68]	@ 0x44
 800074e:	4b0f      	ldr	r3, [pc, #60]	@ (800078c <HAL_MspInit+0x54>)
 8000750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000752:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	4b0b      	ldr	r3, [pc, #44]	@ (800078c <HAL_MspInit+0x54>)
 8000760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000762:	4a0a      	ldr	r2, [pc, #40]	@ (800078c <HAL_MspInit+0x54>)
 8000764:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000768:	6413      	str	r3, [r2, #64]	@ 0x40
 800076a:	4b08      	ldr	r3, [pc, #32]	@ (800078c <HAL_MspInit+0x54>)
 800076c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800076e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000776:	2200      	movs	r2, #0
 8000778:	210f      	movs	r1, #15
 800077a:	f06f 0001 	mvn.w	r0, #1
 800077e:	f000 f9d5 	bl	8000b2c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800

08000790 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08c      	sub	sp, #48	@ 0x30
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000798:	2300      	movs	r3, #0
 800079a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800079c:	2300      	movs	r3, #0
 800079e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80007a0:	2300      	movs	r3, #0
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	4b2e      	ldr	r3, [pc, #184]	@ (8000860 <HAL_InitTick+0xd0>)
 80007a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007a8:	4a2d      	ldr	r2, [pc, #180]	@ (8000860 <HAL_InitTick+0xd0>)
 80007aa:	f043 0301 	orr.w	r3, r3, #1
 80007ae:	6453      	str	r3, [r2, #68]	@ 0x44
 80007b0:	4b2b      	ldr	r3, [pc, #172]	@ (8000860 <HAL_InitTick+0xd0>)
 80007b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007b4:	f003 0301 	and.w	r3, r3, #1
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007bc:	f107 020c 	add.w	r2, r7, #12
 80007c0:	f107 0310 	add.w	r3, r7, #16
 80007c4:	4611      	mov	r1, r2
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 fffe 	bl	80017c8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80007cc:	f000 ffe8 	bl	80017a0 <HAL_RCC_GetPCLK2Freq>
 80007d0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007d4:	4a23      	ldr	r2, [pc, #140]	@ (8000864 <HAL_InitTick+0xd4>)
 80007d6:	fba2 2303 	umull	r2, r3, r2, r3
 80007da:	0c9b      	lsrs	r3, r3, #18
 80007dc:	3b01      	subs	r3, #1
 80007de:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80007e0:	4b21      	ldr	r3, [pc, #132]	@ (8000868 <HAL_InitTick+0xd8>)
 80007e2:	4a22      	ldr	r2, [pc, #136]	@ (800086c <HAL_InitTick+0xdc>)
 80007e4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80007e6:	4b20      	ldr	r3, [pc, #128]	@ (8000868 <HAL_InitTick+0xd8>)
 80007e8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80007ec:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80007ee:	4a1e      	ldr	r2, [pc, #120]	@ (8000868 <HAL_InitTick+0xd8>)
 80007f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007f2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80007f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000868 <HAL_InitTick+0xd8>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000868 <HAL_InitTick+0xd8>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000800:	4b19      	ldr	r3, [pc, #100]	@ (8000868 <HAL_InitTick+0xd8>)
 8000802:	2200      	movs	r2, #0
 8000804:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000806:	4818      	ldr	r0, [pc, #96]	@ (8000868 <HAL_InitTick+0xd8>)
 8000808:	f001 f810 	bl	800182c <HAL_TIM_Base_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000812:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000816:	2b00      	cmp	r3, #0
 8000818:	d11b      	bne.n	8000852 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800081a:	4813      	ldr	r0, [pc, #76]	@ (8000868 <HAL_InitTick+0xd8>)
 800081c:	f001 f860 	bl	80018e0 <HAL_TIM_Base_Start_IT>
 8000820:	4603      	mov	r3, r0
 8000822:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000826:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800082a:	2b00      	cmp	r3, #0
 800082c:	d111      	bne.n	8000852 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800082e:	2019      	movs	r0, #25
 8000830:	f000 f998 	bl	8000b64 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2b0f      	cmp	r3, #15
 8000838:	d808      	bhi.n	800084c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800083a:	2200      	movs	r2, #0
 800083c:	6879      	ldr	r1, [r7, #4]
 800083e:	2019      	movs	r0, #25
 8000840:	f000 f974 	bl	8000b2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000844:	4a0a      	ldr	r2, [pc, #40]	@ (8000870 <HAL_InitTick+0xe0>)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	6013      	str	r3, [r2, #0]
 800084a:	e002      	b.n	8000852 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800084c:	2301      	movs	r3, #1
 800084e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000852:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000856:	4618      	mov	r0, r3
 8000858:	3730      	adds	r7, #48	@ 0x30
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40023800 	.word	0x40023800
 8000864:	431bde83 	.word	0x431bde83
 8000868:	20000088 	.word	0x20000088
 800086c:	40010000 	.word	0x40010000
 8000870:	20000004 	.word	0x20000004

08000874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <NMI_Handler+0x4>

0800087c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <HardFault_Handler+0x4>

08000884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <MemManage_Handler+0x4>

0800088c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <BusFault_Handler+0x4>

08000894 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000898:	bf00      	nop
 800089a:	e7fd      	b.n	8000898 <UsageFault_Handler+0x4>

0800089c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
	...

080008ac <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80008b0:	4802      	ldr	r0, [pc, #8]	@ (80008bc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80008b2:	f001 f885 	bl	80019c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000088 	.word	0x20000088

080008c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008c4:	4b06      	ldr	r3, [pc, #24]	@ (80008e0 <SystemInit+0x20>)
 80008c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008ca:	4a05      	ldr	r2, [pc, #20]	@ (80008e0 <SystemInit+0x20>)
 80008cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	e000ed00 	.word	0xe000ed00

080008e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80008e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800091c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008e8:	f7ff ffea 	bl	80008c0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008ec:	480c      	ldr	r0, [pc, #48]	@ (8000920 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008ee:	490d      	ldr	r1, [pc, #52]	@ (8000924 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000928 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f4:	e002      	b.n	80008fc <LoopCopyDataInit>

080008f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008fa:	3304      	adds	r3, #4

080008fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000900:	d3f9      	bcc.n	80008f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000902:	4a0a      	ldr	r2, [pc, #40]	@ (800092c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000904:	4c0a      	ldr	r4, [pc, #40]	@ (8000930 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000906:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000908:	e001      	b.n	800090e <LoopFillZerobss>

0800090a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800090a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800090c:	3204      	adds	r2, #4

0800090e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800090e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000910:	d3fb      	bcc.n	800090a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000912:	f004 fcb7 	bl	8005284 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000916:	f7ff fde3 	bl	80004e0 <main>
  bx  lr    
 800091a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800091c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000920:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000924:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000928:	08005460 	.word	0x08005460
  ldr r2, =_sbss
 800092c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000930:	20004bfc 	.word	0x20004bfc

08000934 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000934:	e7fe      	b.n	8000934 <ADC_IRQHandler>
	...

08000938 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800093c:	4b0e      	ldr	r3, [pc, #56]	@ (8000978 <HAL_Init+0x40>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a0d      	ldr	r2, [pc, #52]	@ (8000978 <HAL_Init+0x40>)
 8000942:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000946:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000948:	4b0b      	ldr	r3, [pc, #44]	@ (8000978 <HAL_Init+0x40>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a0a      	ldr	r2, [pc, #40]	@ (8000978 <HAL_Init+0x40>)
 800094e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000952:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000954:	4b08      	ldr	r3, [pc, #32]	@ (8000978 <HAL_Init+0x40>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a07      	ldr	r2, [pc, #28]	@ (8000978 <HAL_Init+0x40>)
 800095a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800095e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000960:	2003      	movs	r0, #3
 8000962:	f000 f8d8 	bl	8000b16 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000966:	200f      	movs	r0, #15
 8000968:	f7ff ff12 	bl	8000790 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800096c:	f7ff fee4 	bl	8000738 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000970:	2300      	movs	r3, #0
}
 8000972:	4618      	mov	r0, r3
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40023c00 	.word	0x40023c00

0800097c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000980:	4b06      	ldr	r3, [pc, #24]	@ (800099c <HAL_IncTick+0x20>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	461a      	mov	r2, r3
 8000986:	4b06      	ldr	r3, [pc, #24]	@ (80009a0 <HAL_IncTick+0x24>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4413      	add	r3, r2
 800098c:	4a04      	ldr	r2, [pc, #16]	@ (80009a0 <HAL_IncTick+0x24>)
 800098e:	6013      	str	r3, [r2, #0]
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	20000008 	.word	0x20000008
 80009a0:	200000d0 	.word	0x200000d0

080009a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  return uwTick;
 80009a8:	4b03      	ldr	r3, [pc, #12]	@ (80009b8 <HAL_GetTick+0x14>)
 80009aa:	681b      	ldr	r3, [r3, #0]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	200000d0 	.word	0x200000d0

080009bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f003 0307 	and.w	r3, r3, #7
 80009ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a00 <__NVIC_SetPriorityGrouping+0x44>)
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009d2:	68ba      	ldr	r2, [r7, #8]
 80009d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009d8:	4013      	ands	r3, r2
 80009da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ee:	4a04      	ldr	r2, [pc, #16]	@ (8000a00 <__NVIC_SetPriorityGrouping+0x44>)
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	60d3      	str	r3, [r2, #12]
}
 80009f4:	bf00      	nop
 80009f6:	3714      	adds	r7, #20
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a08:	4b04      	ldr	r3, [pc, #16]	@ (8000a1c <__NVIC_GetPriorityGrouping+0x18>)
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	0a1b      	lsrs	r3, r3, #8
 8000a0e:	f003 0307 	and.w	r3, r3, #7
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	db0b      	blt.n	8000a4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	f003 021f 	and.w	r2, r3, #31
 8000a38:	4907      	ldr	r1, [pc, #28]	@ (8000a58 <__NVIC_EnableIRQ+0x38>)
 8000a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3e:	095b      	lsrs	r3, r3, #5
 8000a40:	2001      	movs	r0, #1
 8000a42:	fa00 f202 	lsl.w	r2, r0, r2
 8000a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	e000e100 	.word	0xe000e100

08000a5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	6039      	str	r1, [r7, #0]
 8000a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	db0a      	blt.n	8000a86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	b2da      	uxtb	r2, r3
 8000a74:	490c      	ldr	r1, [pc, #48]	@ (8000aa8 <__NVIC_SetPriority+0x4c>)
 8000a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7a:	0112      	lsls	r2, r2, #4
 8000a7c:	b2d2      	uxtb	r2, r2
 8000a7e:	440b      	add	r3, r1
 8000a80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a84:	e00a      	b.n	8000a9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	b2da      	uxtb	r2, r3
 8000a8a:	4908      	ldr	r1, [pc, #32]	@ (8000aac <__NVIC_SetPriority+0x50>)
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	f003 030f 	and.w	r3, r3, #15
 8000a92:	3b04      	subs	r3, #4
 8000a94:	0112      	lsls	r2, r2, #4
 8000a96:	b2d2      	uxtb	r2, r2
 8000a98:	440b      	add	r3, r1
 8000a9a:	761a      	strb	r2, [r3, #24]
}
 8000a9c:	bf00      	nop
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	e000e100 	.word	0xe000e100
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b089      	sub	sp, #36	@ 0x24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	60b9      	str	r1, [r7, #8]
 8000aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	f003 0307 	and.w	r3, r3, #7
 8000ac2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ac4:	69fb      	ldr	r3, [r7, #28]
 8000ac6:	f1c3 0307 	rsb	r3, r3, #7
 8000aca:	2b04      	cmp	r3, #4
 8000acc:	bf28      	it	cs
 8000ace:	2304      	movcs	r3, #4
 8000ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	3304      	adds	r3, #4
 8000ad6:	2b06      	cmp	r3, #6
 8000ad8:	d902      	bls.n	8000ae0 <NVIC_EncodePriority+0x30>
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	3b03      	subs	r3, #3
 8000ade:	e000      	b.n	8000ae2 <NVIC_EncodePriority+0x32>
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	fa02 f303 	lsl.w	r3, r2, r3
 8000aee:	43da      	mvns	r2, r3
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	401a      	ands	r2, r3
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af8:	f04f 31ff 	mov.w	r1, #4294967295
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	fa01 f303 	lsl.w	r3, r1, r3
 8000b02:	43d9      	mvns	r1, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b08:	4313      	orrs	r3, r2
         );
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3724      	adds	r7, #36	@ 0x24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr

08000b16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b082      	sub	sp, #8
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f7ff ff4c 	bl	80009bc <__NVIC_SetPriorityGrouping>
}
 8000b24:	bf00      	nop
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
 8000b38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b3e:	f7ff ff61 	bl	8000a04 <__NVIC_GetPriorityGrouping>
 8000b42:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b44:	687a      	ldr	r2, [r7, #4]
 8000b46:	68b9      	ldr	r1, [r7, #8]
 8000b48:	6978      	ldr	r0, [r7, #20]
 8000b4a:	f7ff ffb1 	bl	8000ab0 <NVIC_EncodePriority>
 8000b4e:	4602      	mov	r2, r0
 8000b50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b54:	4611      	mov	r1, r2
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff ff80 	bl	8000a5c <__NVIC_SetPriority>
}
 8000b5c:	bf00      	nop
 8000b5e:	3718      	adds	r7, #24
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff ff54 	bl	8000a20 <__NVIC_EnableIRQ>
}
 8000b78:	bf00      	nop
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b089      	sub	sp, #36	@ 0x24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]
 8000b9a:	e177      	b.n	8000e8c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	697a      	ldr	r2, [r7, #20]
 8000bac:	4013      	ands	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bb0:	693a      	ldr	r2, [r7, #16]
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	f040 8166 	bne.w	8000e86 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f003 0303 	and.w	r3, r3, #3
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d005      	beq.n	8000bd2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bce:	2b02      	cmp	r3, #2
 8000bd0:	d130      	bne.n	8000c34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	689b      	ldr	r3, [r3, #8]
 8000bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	2203      	movs	r2, #3
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	43db      	mvns	r3, r3
 8000be4:	69ba      	ldr	r2, [r7, #24]
 8000be6:	4013      	ands	r3, r2
 8000be8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	68da      	ldr	r2, [r3, #12]
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	005b      	lsls	r3, r3, #1
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	69ba      	ldr	r2, [r7, #24]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	69ba      	ldr	r2, [r7, #24]
 8000c00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c08:	2201      	movs	r2, #1
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c10:	43db      	mvns	r3, r3
 8000c12:	69ba      	ldr	r2, [r7, #24]
 8000c14:	4013      	ands	r3, r2
 8000c16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	091b      	lsrs	r3, r3, #4
 8000c1e:	f003 0201 	and.w	r2, r3, #1
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	69ba      	ldr	r2, [r7, #24]
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	69ba      	ldr	r2, [r7, #24]
 8000c32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f003 0303 	and.w	r3, r3, #3
 8000c3c:	2b03      	cmp	r3, #3
 8000c3e:	d017      	beq.n	8000c70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	2203      	movs	r2, #3
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	43db      	mvns	r3, r3
 8000c52:	69ba      	ldr	r2, [r7, #24]
 8000c54:	4013      	ands	r3, r2
 8000c56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	689a      	ldr	r2, [r3, #8]
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	69ba      	ldr	r2, [r7, #24]
 8000c66:	4313      	orrs	r3, r2
 8000c68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f003 0303 	and.w	r3, r3, #3
 8000c78:	2b02      	cmp	r3, #2
 8000c7a:	d123      	bne.n	8000cc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	08da      	lsrs	r2, r3, #3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3208      	adds	r2, #8
 8000c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	f003 0307 	and.w	r3, r3, #7
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	220f      	movs	r2, #15
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	69ba      	ldr	r2, [r7, #24]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	691a      	ldr	r2, [r3, #16]
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	69ba      	ldr	r2, [r7, #24]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	08da      	lsrs	r2, r3, #3
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	3208      	adds	r2, #8
 8000cbe:	69b9      	ldr	r1, [r7, #24]
 8000cc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	2203      	movs	r2, #3
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f003 0203 	and.w	r2, r3, #3
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	f000 80c0 	beq.w	8000e86 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	4b66      	ldr	r3, [pc, #408]	@ (8000ea4 <HAL_GPIO_Init+0x324>)
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d0e:	4a65      	ldr	r2, [pc, #404]	@ (8000ea4 <HAL_GPIO_Init+0x324>)
 8000d10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d14:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d16:	4b63      	ldr	r3, [pc, #396]	@ (8000ea4 <HAL_GPIO_Init+0x324>)
 8000d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d22:	4a61      	ldr	r2, [pc, #388]	@ (8000ea8 <HAL_GPIO_Init+0x328>)
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	089b      	lsrs	r3, r3, #2
 8000d28:	3302      	adds	r3, #2
 8000d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	f003 0303 	and.w	r3, r3, #3
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	220f      	movs	r2, #15
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43db      	mvns	r3, r3
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	4013      	ands	r3, r2
 8000d44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a58      	ldr	r2, [pc, #352]	@ (8000eac <HAL_GPIO_Init+0x32c>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d037      	beq.n	8000dbe <HAL_GPIO_Init+0x23e>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a57      	ldr	r2, [pc, #348]	@ (8000eb0 <HAL_GPIO_Init+0x330>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d031      	beq.n	8000dba <HAL_GPIO_Init+0x23a>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a56      	ldr	r2, [pc, #344]	@ (8000eb4 <HAL_GPIO_Init+0x334>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d02b      	beq.n	8000db6 <HAL_GPIO_Init+0x236>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a55      	ldr	r2, [pc, #340]	@ (8000eb8 <HAL_GPIO_Init+0x338>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d025      	beq.n	8000db2 <HAL_GPIO_Init+0x232>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a54      	ldr	r2, [pc, #336]	@ (8000ebc <HAL_GPIO_Init+0x33c>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d01f      	beq.n	8000dae <HAL_GPIO_Init+0x22e>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a53      	ldr	r2, [pc, #332]	@ (8000ec0 <HAL_GPIO_Init+0x340>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d019      	beq.n	8000daa <HAL_GPIO_Init+0x22a>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a52      	ldr	r2, [pc, #328]	@ (8000ec4 <HAL_GPIO_Init+0x344>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d013      	beq.n	8000da6 <HAL_GPIO_Init+0x226>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a51      	ldr	r2, [pc, #324]	@ (8000ec8 <HAL_GPIO_Init+0x348>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d00d      	beq.n	8000da2 <HAL_GPIO_Init+0x222>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a50      	ldr	r2, [pc, #320]	@ (8000ecc <HAL_GPIO_Init+0x34c>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d007      	beq.n	8000d9e <HAL_GPIO_Init+0x21e>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a4f      	ldr	r2, [pc, #316]	@ (8000ed0 <HAL_GPIO_Init+0x350>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d101      	bne.n	8000d9a <HAL_GPIO_Init+0x21a>
 8000d96:	2309      	movs	r3, #9
 8000d98:	e012      	b.n	8000dc0 <HAL_GPIO_Init+0x240>
 8000d9a:	230a      	movs	r3, #10
 8000d9c:	e010      	b.n	8000dc0 <HAL_GPIO_Init+0x240>
 8000d9e:	2308      	movs	r3, #8
 8000da0:	e00e      	b.n	8000dc0 <HAL_GPIO_Init+0x240>
 8000da2:	2307      	movs	r3, #7
 8000da4:	e00c      	b.n	8000dc0 <HAL_GPIO_Init+0x240>
 8000da6:	2306      	movs	r3, #6
 8000da8:	e00a      	b.n	8000dc0 <HAL_GPIO_Init+0x240>
 8000daa:	2305      	movs	r3, #5
 8000dac:	e008      	b.n	8000dc0 <HAL_GPIO_Init+0x240>
 8000dae:	2304      	movs	r3, #4
 8000db0:	e006      	b.n	8000dc0 <HAL_GPIO_Init+0x240>
 8000db2:	2303      	movs	r3, #3
 8000db4:	e004      	b.n	8000dc0 <HAL_GPIO_Init+0x240>
 8000db6:	2302      	movs	r3, #2
 8000db8:	e002      	b.n	8000dc0 <HAL_GPIO_Init+0x240>
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e000      	b.n	8000dc0 <HAL_GPIO_Init+0x240>
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	69fa      	ldr	r2, [r7, #28]
 8000dc2:	f002 0203 	and.w	r2, r2, #3
 8000dc6:	0092      	lsls	r2, r2, #2
 8000dc8:	4093      	lsls	r3, r2
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000dd0:	4935      	ldr	r1, [pc, #212]	@ (8000ea8 <HAL_GPIO_Init+0x328>)
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	089b      	lsrs	r3, r3, #2
 8000dd6:	3302      	adds	r3, #2
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dde:	4b3d      	ldr	r3, [pc, #244]	@ (8000ed4 <HAL_GPIO_Init+0x354>)
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	43db      	mvns	r3, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4013      	ands	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d003      	beq.n	8000e02 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e02:	4a34      	ldr	r2, [pc, #208]	@ (8000ed4 <HAL_GPIO_Init+0x354>)
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e08:	4b32      	ldr	r3, [pc, #200]	@ (8000ed4 <HAL_GPIO_Init+0x354>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	43db      	mvns	r3, r3
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	4013      	ands	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d003      	beq.n	8000e2c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e2c:	4a29      	ldr	r2, [pc, #164]	@ (8000ed4 <HAL_GPIO_Init+0x354>)
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e32:	4b28      	ldr	r3, [pc, #160]	@ (8000ed4 <HAL_GPIO_Init+0x354>)
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d003      	beq.n	8000e56 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e56:	4a1f      	ldr	r2, [pc, #124]	@ (8000ed4 <HAL_GPIO_Init+0x354>)
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e5c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ed4 <HAL_GPIO_Init+0x354>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	43db      	mvns	r3, r3
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d003      	beq.n	8000e80 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e80:	4a14      	ldr	r2, [pc, #80]	@ (8000ed4 <HAL_GPIO_Init+0x354>)
 8000e82:	69bb      	ldr	r3, [r7, #24]
 8000e84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	61fb      	str	r3, [r7, #28]
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	2b0f      	cmp	r3, #15
 8000e90:	f67f ae84 	bls.w	8000b9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e94:	bf00      	nop
 8000e96:	bf00      	nop
 8000e98:	3724      	adds	r7, #36	@ 0x24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40013800 	.word	0x40013800
 8000eac:	40020000 	.word	0x40020000
 8000eb0:	40020400 	.word	0x40020400
 8000eb4:	40020800 	.word	0x40020800
 8000eb8:	40020c00 	.word	0x40020c00
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	40021400 	.word	0x40021400
 8000ec4:	40021800 	.word	0x40021800
 8000ec8:	40021c00 	.word	0x40021c00
 8000ecc:	40022000 	.word	0x40022000
 8000ed0:	40022400 	.word	0x40022400
 8000ed4:	40013c00 	.word	0x40013c00

08000ed8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	807b      	strh	r3, [r7, #2]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ee8:	787b      	ldrb	r3, [r7, #1]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d003      	beq.n	8000ef6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000eee:	887a      	ldrh	r2, [r7, #2]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ef4:	e003      	b.n	8000efe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ef6:	887b      	ldrh	r3, [r7, #2]
 8000ef8:	041a      	lsls	r2, r3, #16
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	619a      	str	r2, [r3, #24]
}
 8000efe:	bf00      	nop
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	b085      	sub	sp, #20
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
 8000f12:	460b      	mov	r3, r1
 8000f14:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	695b      	ldr	r3, [r3, #20]
 8000f1a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f1c:	887a      	ldrh	r2, [r7, #2]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	4013      	ands	r3, r2
 8000f22:	041a      	lsls	r2, r3, #16
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	43d9      	mvns	r1, r3
 8000f28:	887b      	ldrh	r3, [r7, #2]
 8000f2a:	400b      	ands	r3, r1
 8000f2c:	431a      	orrs	r2, r3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	619a      	str	r2, [r3, #24]
}
 8000f32:	bf00      	nop
 8000f34:	3714      	adds	r7, #20
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
	...

08000f40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d101      	bne.n	8000f52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e267      	b.n	8001422 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d075      	beq.n	800104a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000f5e:	4b88      	ldr	r3, [pc, #544]	@ (8001180 <HAL_RCC_OscConfig+0x240>)
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	f003 030c 	and.w	r3, r3, #12
 8000f66:	2b04      	cmp	r3, #4
 8000f68:	d00c      	beq.n	8000f84 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f6a:	4b85      	ldr	r3, [pc, #532]	@ (8001180 <HAL_RCC_OscConfig+0x240>)
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000f72:	2b08      	cmp	r3, #8
 8000f74:	d112      	bne.n	8000f9c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f76:	4b82      	ldr	r3, [pc, #520]	@ (8001180 <HAL_RCC_OscConfig+0x240>)
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000f82:	d10b      	bne.n	8000f9c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f84:	4b7e      	ldr	r3, [pc, #504]	@ (8001180 <HAL_RCC_OscConfig+0x240>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d05b      	beq.n	8001048 <HAL_RCC_OscConfig+0x108>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d157      	bne.n	8001048 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e242      	b.n	8001422 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fa4:	d106      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x74>
 8000fa6:	4b76      	ldr	r3, [pc, #472]	@ (8001180 <HAL_RCC_OscConfig+0x240>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a75      	ldr	r2, [pc, #468]	@ (8001180 <HAL_RCC_OscConfig+0x240>)
 8000fac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fb0:	6013      	str	r3, [r2, #0]
 8000fb2:	e01d      	b.n	8000ff0 <HAL_RCC_OscConfig+0xb0>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000fbc:	d10c      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x98>
 8000fbe:	4b70      	ldr	r3, [pc, #448]	@ (8001180 <HAL_RCC_OscConfig+0x240>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a6f      	ldr	r2, [pc, #444]	@ (8001180 <HAL_RCC_OscConfig+0x240>)
 8000fc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fc8:	6013      	str	r3, [r2, #0]
 8000fca:	4b6d      	ldr	r3, [pc, #436]	@ (8001180 <HAL_RCC_OscConfig+0x240>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a6c      	ldr	r2, [pc, #432]	@ (8001180 <HAL_RCC_OscConfig+0x240>)
 8000fd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fd4:	6013      	str	r3, [r2, #0]
 8000fd6:	e00b      	b.n	8000ff0 <HAL_RCC_OscConfig+0xb0>
 8000fd8:	4b69      	ldr	r3, [pc, #420]	@ (8001180 <HAL_RCC_OscConfig+0x240>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a68      	ldr	r2, [pc, #416]	@ (8001180 <HAL_RCC_OscConfig+0x240>)
 8000fde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fe2:	6013      	str	r3, [r2, #0]
 8000fe4:	4b66      	ldr	r3, [pc, #408]	@ (8001180 <HAL_RCC_OscConfig+0x240>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a65      	ldr	r2, [pc, #404]	@ (8001180 <HAL_RCC_OscConfig+0x240>)
 8000fea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d013      	beq.n	8001020 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff8:	f7ff fcd4 	bl	80009a4 <HAL_GetTick>
 8000ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ffe:	e008      	b.n	8001012 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001000:	f7ff fcd0 	bl	80009a4 <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	2b64      	cmp	r3, #100	@ 0x64
 800100c:	d901      	bls.n	8001012 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800100e:	2303      	movs	r3, #3
 8001010:	e207      	b.n	8001422 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001012:	4b5b      	ldr	r3, [pc, #364]	@ (8001180 <HAL_RCC_OscConfig+0x240>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d0f0      	beq.n	8001000 <HAL_RCC_OscConfig+0xc0>
 800101e:	e014      	b.n	800104a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001020:	f7ff fcc0 	bl	80009a4 <HAL_GetTick>
 8001024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001026:	e008      	b.n	800103a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001028:	f7ff fcbc 	bl	80009a4 <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	2b64      	cmp	r3, #100	@ 0x64
 8001034:	d901      	bls.n	800103a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001036:	2303      	movs	r3, #3
 8001038:	e1f3      	b.n	8001422 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800103a:	4b51      	ldr	r3, [pc, #324]	@ (8001180 <HAL_RCC_OscConfig+0x240>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d1f0      	bne.n	8001028 <HAL_RCC_OscConfig+0xe8>
 8001046:	e000      	b.n	800104a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001048:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	2b00      	cmp	r3, #0
 8001054:	d063      	beq.n	800111e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001056:	4b4a      	ldr	r3, [pc, #296]	@ (8001180 <HAL_RCC_OscConfig+0x240>)
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	f003 030c 	and.w	r3, r3, #12
 800105e:	2b00      	cmp	r3, #0
 8001060:	d00b      	beq.n	800107a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001062:	4b47      	ldr	r3, [pc, #284]	@ (8001180 <HAL_RCC_OscConfig+0x240>)
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800106a:	2b08      	cmp	r3, #8
 800106c:	d11c      	bne.n	80010a8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800106e:	4b44      	ldr	r3, [pc, #272]	@ (8001180 <HAL_RCC_OscConfig+0x240>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d116      	bne.n	80010a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800107a:	4b41      	ldr	r3, [pc, #260]	@ (8001180 <HAL_RCC_OscConfig+0x240>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	2b00      	cmp	r3, #0
 8001084:	d005      	beq.n	8001092 <HAL_RCC_OscConfig+0x152>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d001      	beq.n	8001092 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e1c7      	b.n	8001422 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001092:	4b3b      	ldr	r3, [pc, #236]	@ (8001180 <HAL_RCC_OscConfig+0x240>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	691b      	ldr	r3, [r3, #16]
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	4937      	ldr	r1, [pc, #220]	@ (8001180 <HAL_RCC_OscConfig+0x240>)
 80010a2:	4313      	orrs	r3, r2
 80010a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010a6:	e03a      	b.n	800111e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d020      	beq.n	80010f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010b0:	4b34      	ldr	r3, [pc, #208]	@ (8001184 <HAL_RCC_OscConfig+0x244>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010b6:	f7ff fc75 	bl	80009a4 <HAL_GetTick>
 80010ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010bc:	e008      	b.n	80010d0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010be:	f7ff fc71 	bl	80009a4 <HAL_GetTick>
 80010c2:	4602      	mov	r2, r0
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d901      	bls.n	80010d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80010cc:	2303      	movs	r3, #3
 80010ce:	e1a8      	b.n	8001422 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001180 <HAL_RCC_OscConfig+0x240>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0302 	and.w	r3, r3, #2
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d0f0      	beq.n	80010be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010dc:	4b28      	ldr	r3, [pc, #160]	@ (8001180 <HAL_RCC_OscConfig+0x240>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	691b      	ldr	r3, [r3, #16]
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	4925      	ldr	r1, [pc, #148]	@ (8001180 <HAL_RCC_OscConfig+0x240>)
 80010ec:	4313      	orrs	r3, r2
 80010ee:	600b      	str	r3, [r1, #0]
 80010f0:	e015      	b.n	800111e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010f2:	4b24      	ldr	r3, [pc, #144]	@ (8001184 <HAL_RCC_OscConfig+0x244>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010f8:	f7ff fc54 	bl	80009a4 <HAL_GetTick>
 80010fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010fe:	e008      	b.n	8001112 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001100:	f7ff fc50 	bl	80009a4 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b02      	cmp	r3, #2
 800110c:	d901      	bls.n	8001112 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e187      	b.n	8001422 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001112:	4b1b      	ldr	r3, [pc, #108]	@ (8001180 <HAL_RCC_OscConfig+0x240>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	2b00      	cmp	r3, #0
 800111c:	d1f0      	bne.n	8001100 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0308 	and.w	r3, r3, #8
 8001126:	2b00      	cmp	r3, #0
 8001128:	d036      	beq.n	8001198 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	695b      	ldr	r3, [r3, #20]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d016      	beq.n	8001160 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001132:	4b15      	ldr	r3, [pc, #84]	@ (8001188 <HAL_RCC_OscConfig+0x248>)
 8001134:	2201      	movs	r2, #1
 8001136:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001138:	f7ff fc34 	bl	80009a4 <HAL_GetTick>
 800113c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800113e:	e008      	b.n	8001152 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001140:	f7ff fc30 	bl	80009a4 <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	2b02      	cmp	r3, #2
 800114c:	d901      	bls.n	8001152 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800114e:	2303      	movs	r3, #3
 8001150:	e167      	b.n	8001422 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001152:	4b0b      	ldr	r3, [pc, #44]	@ (8001180 <HAL_RCC_OscConfig+0x240>)
 8001154:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	2b00      	cmp	r3, #0
 800115c:	d0f0      	beq.n	8001140 <HAL_RCC_OscConfig+0x200>
 800115e:	e01b      	b.n	8001198 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001160:	4b09      	ldr	r3, [pc, #36]	@ (8001188 <HAL_RCC_OscConfig+0x248>)
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001166:	f7ff fc1d 	bl	80009a4 <HAL_GetTick>
 800116a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800116c:	e00e      	b.n	800118c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800116e:	f7ff fc19 	bl	80009a4 <HAL_GetTick>
 8001172:	4602      	mov	r2, r0
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	2b02      	cmp	r3, #2
 800117a:	d907      	bls.n	800118c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800117c:	2303      	movs	r3, #3
 800117e:	e150      	b.n	8001422 <HAL_RCC_OscConfig+0x4e2>
 8001180:	40023800 	.word	0x40023800
 8001184:	42470000 	.word	0x42470000
 8001188:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800118c:	4b88      	ldr	r3, [pc, #544]	@ (80013b0 <HAL_RCC_OscConfig+0x470>)
 800118e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001190:	f003 0302 	and.w	r3, r3, #2
 8001194:	2b00      	cmp	r3, #0
 8001196:	d1ea      	bne.n	800116e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0304 	and.w	r3, r3, #4
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	f000 8097 	beq.w	80012d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011a6:	2300      	movs	r3, #0
 80011a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011aa:	4b81      	ldr	r3, [pc, #516]	@ (80013b0 <HAL_RCC_OscConfig+0x470>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d10f      	bne.n	80011d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	4b7d      	ldr	r3, [pc, #500]	@ (80013b0 <HAL_RCC_OscConfig+0x470>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011be:	4a7c      	ldr	r2, [pc, #496]	@ (80013b0 <HAL_RCC_OscConfig+0x470>)
 80011c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011c6:	4b7a      	ldr	r3, [pc, #488]	@ (80013b0 <HAL_RCC_OscConfig+0x470>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011d2:	2301      	movs	r3, #1
 80011d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d6:	4b77      	ldr	r3, [pc, #476]	@ (80013b4 <HAL_RCC_OscConfig+0x474>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d118      	bne.n	8001214 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011e2:	4b74      	ldr	r3, [pc, #464]	@ (80013b4 <HAL_RCC_OscConfig+0x474>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a73      	ldr	r2, [pc, #460]	@ (80013b4 <HAL_RCC_OscConfig+0x474>)
 80011e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011ee:	f7ff fbd9 	bl	80009a4 <HAL_GetTick>
 80011f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f4:	e008      	b.n	8001208 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011f6:	f7ff fbd5 	bl	80009a4 <HAL_GetTick>
 80011fa:	4602      	mov	r2, r0
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	2b02      	cmp	r3, #2
 8001202:	d901      	bls.n	8001208 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001204:	2303      	movs	r3, #3
 8001206:	e10c      	b.n	8001422 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001208:	4b6a      	ldr	r3, [pc, #424]	@ (80013b4 <HAL_RCC_OscConfig+0x474>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001210:	2b00      	cmp	r3, #0
 8001212:	d0f0      	beq.n	80011f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d106      	bne.n	800122a <HAL_RCC_OscConfig+0x2ea>
 800121c:	4b64      	ldr	r3, [pc, #400]	@ (80013b0 <HAL_RCC_OscConfig+0x470>)
 800121e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001220:	4a63      	ldr	r2, [pc, #396]	@ (80013b0 <HAL_RCC_OscConfig+0x470>)
 8001222:	f043 0301 	orr.w	r3, r3, #1
 8001226:	6713      	str	r3, [r2, #112]	@ 0x70
 8001228:	e01c      	b.n	8001264 <HAL_RCC_OscConfig+0x324>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	2b05      	cmp	r3, #5
 8001230:	d10c      	bne.n	800124c <HAL_RCC_OscConfig+0x30c>
 8001232:	4b5f      	ldr	r3, [pc, #380]	@ (80013b0 <HAL_RCC_OscConfig+0x470>)
 8001234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001236:	4a5e      	ldr	r2, [pc, #376]	@ (80013b0 <HAL_RCC_OscConfig+0x470>)
 8001238:	f043 0304 	orr.w	r3, r3, #4
 800123c:	6713      	str	r3, [r2, #112]	@ 0x70
 800123e:	4b5c      	ldr	r3, [pc, #368]	@ (80013b0 <HAL_RCC_OscConfig+0x470>)
 8001240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001242:	4a5b      	ldr	r2, [pc, #364]	@ (80013b0 <HAL_RCC_OscConfig+0x470>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	6713      	str	r3, [r2, #112]	@ 0x70
 800124a:	e00b      	b.n	8001264 <HAL_RCC_OscConfig+0x324>
 800124c:	4b58      	ldr	r3, [pc, #352]	@ (80013b0 <HAL_RCC_OscConfig+0x470>)
 800124e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001250:	4a57      	ldr	r2, [pc, #348]	@ (80013b0 <HAL_RCC_OscConfig+0x470>)
 8001252:	f023 0301 	bic.w	r3, r3, #1
 8001256:	6713      	str	r3, [r2, #112]	@ 0x70
 8001258:	4b55      	ldr	r3, [pc, #340]	@ (80013b0 <HAL_RCC_OscConfig+0x470>)
 800125a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800125c:	4a54      	ldr	r2, [pc, #336]	@ (80013b0 <HAL_RCC_OscConfig+0x470>)
 800125e:	f023 0304 	bic.w	r3, r3, #4
 8001262:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d015      	beq.n	8001298 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800126c:	f7ff fb9a 	bl	80009a4 <HAL_GetTick>
 8001270:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001272:	e00a      	b.n	800128a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001274:	f7ff fb96 	bl	80009a4 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001282:	4293      	cmp	r3, r2
 8001284:	d901      	bls.n	800128a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e0cb      	b.n	8001422 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800128a:	4b49      	ldr	r3, [pc, #292]	@ (80013b0 <HAL_RCC_OscConfig+0x470>)
 800128c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d0ee      	beq.n	8001274 <HAL_RCC_OscConfig+0x334>
 8001296:	e014      	b.n	80012c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001298:	f7ff fb84 	bl	80009a4 <HAL_GetTick>
 800129c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800129e:	e00a      	b.n	80012b6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012a0:	f7ff fb80 	bl	80009a4 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e0b5      	b.n	8001422 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012b6:	4b3e      	ldr	r3, [pc, #248]	@ (80013b0 <HAL_RCC_OscConfig+0x470>)
 80012b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1ee      	bne.n	80012a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80012c2:	7dfb      	ldrb	r3, [r7, #23]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d105      	bne.n	80012d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012c8:	4b39      	ldr	r3, [pc, #228]	@ (80013b0 <HAL_RCC_OscConfig+0x470>)
 80012ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012cc:	4a38      	ldr	r2, [pc, #224]	@ (80013b0 <HAL_RCC_OscConfig+0x470>)
 80012ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80012d2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f000 80a1 	beq.w	8001420 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012de:	4b34      	ldr	r3, [pc, #208]	@ (80013b0 <HAL_RCC_OscConfig+0x470>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f003 030c 	and.w	r3, r3, #12
 80012e6:	2b08      	cmp	r3, #8
 80012e8:	d05c      	beq.n	80013a4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	699b      	ldr	r3, [r3, #24]
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d141      	bne.n	8001376 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012f2:	4b31      	ldr	r3, [pc, #196]	@ (80013b8 <HAL_RCC_OscConfig+0x478>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f8:	f7ff fb54 	bl	80009a4 <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001300:	f7ff fb50 	bl	80009a4 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e087      	b.n	8001422 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001312:	4b27      	ldr	r3, [pc, #156]	@ (80013b0 <HAL_RCC_OscConfig+0x470>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1f0      	bne.n	8001300 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	69da      	ldr	r2, [r3, #28]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a1b      	ldr	r3, [r3, #32]
 8001326:	431a      	orrs	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132c:	019b      	lsls	r3, r3, #6
 800132e:	431a      	orrs	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001334:	085b      	lsrs	r3, r3, #1
 8001336:	3b01      	subs	r3, #1
 8001338:	041b      	lsls	r3, r3, #16
 800133a:	431a      	orrs	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001340:	061b      	lsls	r3, r3, #24
 8001342:	491b      	ldr	r1, [pc, #108]	@ (80013b0 <HAL_RCC_OscConfig+0x470>)
 8001344:	4313      	orrs	r3, r2
 8001346:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001348:	4b1b      	ldr	r3, [pc, #108]	@ (80013b8 <HAL_RCC_OscConfig+0x478>)
 800134a:	2201      	movs	r2, #1
 800134c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134e:	f7ff fb29 	bl	80009a4 <HAL_GetTick>
 8001352:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001354:	e008      	b.n	8001368 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001356:	f7ff fb25 	bl	80009a4 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d901      	bls.n	8001368 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e05c      	b.n	8001422 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001368:	4b11      	ldr	r3, [pc, #68]	@ (80013b0 <HAL_RCC_OscConfig+0x470>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d0f0      	beq.n	8001356 <HAL_RCC_OscConfig+0x416>
 8001374:	e054      	b.n	8001420 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001376:	4b10      	ldr	r3, [pc, #64]	@ (80013b8 <HAL_RCC_OscConfig+0x478>)
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137c:	f7ff fb12 	bl	80009a4 <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001384:	f7ff fb0e 	bl	80009a4 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e045      	b.n	8001422 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001396:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <HAL_RCC_OscConfig+0x470>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d1f0      	bne.n	8001384 <HAL_RCC_OscConfig+0x444>
 80013a2:	e03d      	b.n	8001420 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d107      	bne.n	80013bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e038      	b.n	8001422 <HAL_RCC_OscConfig+0x4e2>
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40007000 	.word	0x40007000
 80013b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80013bc:	4b1b      	ldr	r3, [pc, #108]	@ (800142c <HAL_RCC_OscConfig+0x4ec>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d028      	beq.n	800141c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d121      	bne.n	800141c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d11a      	bne.n	800141c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80013ec:	4013      	ands	r3, r2
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80013f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d111      	bne.n	800141c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001402:	085b      	lsrs	r3, r3, #1
 8001404:	3b01      	subs	r3, #1
 8001406:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001408:	429a      	cmp	r2, r3
 800140a:	d107      	bne.n	800141c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001416:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001418:	429a      	cmp	r2, r3
 800141a:	d001      	beq.n	8001420 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e000      	b.n	8001422 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3718      	adds	r7, #24
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40023800 	.word	0x40023800

08001430 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d101      	bne.n	8001444 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e0cc      	b.n	80015de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001444:	4b68      	ldr	r3, [pc, #416]	@ (80015e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 030f 	and.w	r3, r3, #15
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	429a      	cmp	r2, r3
 8001450:	d90c      	bls.n	800146c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001452:	4b65      	ldr	r3, [pc, #404]	@ (80015e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001454:	683a      	ldr	r2, [r7, #0]
 8001456:	b2d2      	uxtb	r2, r2
 8001458:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800145a:	4b63      	ldr	r3, [pc, #396]	@ (80015e8 <HAL_RCC_ClockConfig+0x1b8>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 030f 	and.w	r3, r3, #15
 8001462:	683a      	ldr	r2, [r7, #0]
 8001464:	429a      	cmp	r2, r3
 8001466:	d001      	beq.n	800146c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e0b8      	b.n	80015de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0302 	and.w	r3, r3, #2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d020      	beq.n	80014ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0304 	and.w	r3, r3, #4
 8001480:	2b00      	cmp	r3, #0
 8001482:	d005      	beq.n	8001490 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001484:	4b59      	ldr	r3, [pc, #356]	@ (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	4a58      	ldr	r2, [pc, #352]	@ (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 800148a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800148e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0308 	and.w	r3, r3, #8
 8001498:	2b00      	cmp	r3, #0
 800149a:	d005      	beq.n	80014a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800149c:	4b53      	ldr	r3, [pc, #332]	@ (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	4a52      	ldr	r2, [pc, #328]	@ (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 80014a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80014a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014a8:	4b50      	ldr	r3, [pc, #320]	@ (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	494d      	ldr	r1, [pc, #308]	@ (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 80014b6:	4313      	orrs	r3, r2
 80014b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d044      	beq.n	8001550 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d107      	bne.n	80014de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ce:	4b47      	ldr	r3, [pc, #284]	@ (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d119      	bne.n	800150e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e07f      	b.n	80015de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d003      	beq.n	80014ee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014ea:	2b03      	cmp	r3, #3
 80014ec:	d107      	bne.n	80014fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ee:	4b3f      	ldr	r3, [pc, #252]	@ (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d109      	bne.n	800150e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e06f      	b.n	80015de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014fe:	4b3b      	ldr	r3, [pc, #236]	@ (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d101      	bne.n	800150e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e067      	b.n	80015de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800150e:	4b37      	ldr	r3, [pc, #220]	@ (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f023 0203 	bic.w	r2, r3, #3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	4934      	ldr	r1, [pc, #208]	@ (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 800151c:	4313      	orrs	r3, r2
 800151e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001520:	f7ff fa40 	bl	80009a4 <HAL_GetTick>
 8001524:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001526:	e00a      	b.n	800153e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001528:	f7ff fa3c 	bl	80009a4 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001536:	4293      	cmp	r3, r2
 8001538:	d901      	bls.n	800153e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e04f      	b.n	80015de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800153e:	4b2b      	ldr	r3, [pc, #172]	@ (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f003 020c 	and.w	r2, r3, #12
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	429a      	cmp	r2, r3
 800154e:	d1eb      	bne.n	8001528 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001550:	4b25      	ldr	r3, [pc, #148]	@ (80015e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 030f 	and.w	r3, r3, #15
 8001558:	683a      	ldr	r2, [r7, #0]
 800155a:	429a      	cmp	r2, r3
 800155c:	d20c      	bcs.n	8001578 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800155e:	4b22      	ldr	r3, [pc, #136]	@ (80015e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	b2d2      	uxtb	r2, r2
 8001564:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001566:	4b20      	ldr	r3, [pc, #128]	@ (80015e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 030f 	and.w	r3, r3, #15
 800156e:	683a      	ldr	r2, [r7, #0]
 8001570:	429a      	cmp	r2, r3
 8001572:	d001      	beq.n	8001578 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e032      	b.n	80015de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	2b00      	cmp	r3, #0
 8001582:	d008      	beq.n	8001596 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001584:	4b19      	ldr	r3, [pc, #100]	@ (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	4916      	ldr	r1, [pc, #88]	@ (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 8001592:	4313      	orrs	r3, r2
 8001594:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0308 	and.w	r3, r3, #8
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d009      	beq.n	80015b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015a2:	4b12      	ldr	r3, [pc, #72]	@ (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	490e      	ldr	r1, [pc, #56]	@ (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015b6:	f000 f821 	bl	80015fc <HAL_RCC_GetSysClockFreq>
 80015ba:	4602      	mov	r2, r0
 80015bc:	4b0b      	ldr	r3, [pc, #44]	@ (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	091b      	lsrs	r3, r3, #4
 80015c2:	f003 030f 	and.w	r3, r3, #15
 80015c6:	490a      	ldr	r1, [pc, #40]	@ (80015f0 <HAL_RCC_ClockConfig+0x1c0>)
 80015c8:	5ccb      	ldrb	r3, [r1, r3]
 80015ca:	fa22 f303 	lsr.w	r3, r2, r3
 80015ce:	4a09      	ldr	r2, [pc, #36]	@ (80015f4 <HAL_RCC_ClockConfig+0x1c4>)
 80015d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80015d2:	4b09      	ldr	r3, [pc, #36]	@ (80015f8 <HAL_RCC_ClockConfig+0x1c8>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff f8da 	bl	8000790 <HAL_InitTick>

  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40023c00 	.word	0x40023c00
 80015ec:	40023800 	.word	0x40023800
 80015f0:	08005438 	.word	0x08005438
 80015f4:	20000000 	.word	0x20000000
 80015f8:	20000004 	.word	0x20000004

080015fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001600:	b090      	sub	sp, #64	@ 0x40
 8001602:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001604:	2300      	movs	r3, #0
 8001606:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001608:	2300      	movs	r3, #0
 800160a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800160c:	2300      	movs	r3, #0
 800160e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001610:	2300      	movs	r3, #0
 8001612:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001614:	4b59      	ldr	r3, [pc, #356]	@ (800177c <HAL_RCC_GetSysClockFreq+0x180>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f003 030c 	and.w	r3, r3, #12
 800161c:	2b08      	cmp	r3, #8
 800161e:	d00d      	beq.n	800163c <HAL_RCC_GetSysClockFreq+0x40>
 8001620:	2b08      	cmp	r3, #8
 8001622:	f200 80a1 	bhi.w	8001768 <HAL_RCC_GetSysClockFreq+0x16c>
 8001626:	2b00      	cmp	r3, #0
 8001628:	d002      	beq.n	8001630 <HAL_RCC_GetSysClockFreq+0x34>
 800162a:	2b04      	cmp	r3, #4
 800162c:	d003      	beq.n	8001636 <HAL_RCC_GetSysClockFreq+0x3a>
 800162e:	e09b      	b.n	8001768 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001630:	4b53      	ldr	r3, [pc, #332]	@ (8001780 <HAL_RCC_GetSysClockFreq+0x184>)
 8001632:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001634:	e09b      	b.n	800176e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001636:	4b53      	ldr	r3, [pc, #332]	@ (8001784 <HAL_RCC_GetSysClockFreq+0x188>)
 8001638:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800163a:	e098      	b.n	800176e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800163c:	4b4f      	ldr	r3, [pc, #316]	@ (800177c <HAL_RCC_GetSysClockFreq+0x180>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001644:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001646:	4b4d      	ldr	r3, [pc, #308]	@ (800177c <HAL_RCC_GetSysClockFreq+0x180>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d028      	beq.n	80016a4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001652:	4b4a      	ldr	r3, [pc, #296]	@ (800177c <HAL_RCC_GetSysClockFreq+0x180>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	099b      	lsrs	r3, r3, #6
 8001658:	2200      	movs	r2, #0
 800165a:	623b      	str	r3, [r7, #32]
 800165c:	627a      	str	r2, [r7, #36]	@ 0x24
 800165e:	6a3b      	ldr	r3, [r7, #32]
 8001660:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001664:	2100      	movs	r1, #0
 8001666:	4b47      	ldr	r3, [pc, #284]	@ (8001784 <HAL_RCC_GetSysClockFreq+0x188>)
 8001668:	fb03 f201 	mul.w	r2, r3, r1
 800166c:	2300      	movs	r3, #0
 800166e:	fb00 f303 	mul.w	r3, r0, r3
 8001672:	4413      	add	r3, r2
 8001674:	4a43      	ldr	r2, [pc, #268]	@ (8001784 <HAL_RCC_GetSysClockFreq+0x188>)
 8001676:	fba0 1202 	umull	r1, r2, r0, r2
 800167a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800167c:	460a      	mov	r2, r1
 800167e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001680:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001682:	4413      	add	r3, r2
 8001684:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001688:	2200      	movs	r2, #0
 800168a:	61bb      	str	r3, [r7, #24]
 800168c:	61fa      	str	r2, [r7, #28]
 800168e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001692:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001696:	f7fe fdab 	bl	80001f0 <__aeabi_uldivmod>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4613      	mov	r3, r2
 80016a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80016a2:	e053      	b.n	800174c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016a4:	4b35      	ldr	r3, [pc, #212]	@ (800177c <HAL_RCC_GetSysClockFreq+0x180>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	099b      	lsrs	r3, r3, #6
 80016aa:	2200      	movs	r2, #0
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	617a      	str	r2, [r7, #20]
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80016b6:	f04f 0b00 	mov.w	fp, #0
 80016ba:	4652      	mov	r2, sl
 80016bc:	465b      	mov	r3, fp
 80016be:	f04f 0000 	mov.w	r0, #0
 80016c2:	f04f 0100 	mov.w	r1, #0
 80016c6:	0159      	lsls	r1, r3, #5
 80016c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016cc:	0150      	lsls	r0, r2, #5
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	ebb2 080a 	subs.w	r8, r2, sl
 80016d6:	eb63 090b 	sbc.w	r9, r3, fp
 80016da:	f04f 0200 	mov.w	r2, #0
 80016de:	f04f 0300 	mov.w	r3, #0
 80016e2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80016e6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80016ea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80016ee:	ebb2 0408 	subs.w	r4, r2, r8
 80016f2:	eb63 0509 	sbc.w	r5, r3, r9
 80016f6:	f04f 0200 	mov.w	r2, #0
 80016fa:	f04f 0300 	mov.w	r3, #0
 80016fe:	00eb      	lsls	r3, r5, #3
 8001700:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001704:	00e2      	lsls	r2, r4, #3
 8001706:	4614      	mov	r4, r2
 8001708:	461d      	mov	r5, r3
 800170a:	eb14 030a 	adds.w	r3, r4, sl
 800170e:	603b      	str	r3, [r7, #0]
 8001710:	eb45 030b 	adc.w	r3, r5, fp
 8001714:	607b      	str	r3, [r7, #4]
 8001716:	f04f 0200 	mov.w	r2, #0
 800171a:	f04f 0300 	mov.w	r3, #0
 800171e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001722:	4629      	mov	r1, r5
 8001724:	028b      	lsls	r3, r1, #10
 8001726:	4621      	mov	r1, r4
 8001728:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800172c:	4621      	mov	r1, r4
 800172e:	028a      	lsls	r2, r1, #10
 8001730:	4610      	mov	r0, r2
 8001732:	4619      	mov	r1, r3
 8001734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001736:	2200      	movs	r2, #0
 8001738:	60bb      	str	r3, [r7, #8]
 800173a:	60fa      	str	r2, [r7, #12]
 800173c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001740:	f7fe fd56 	bl	80001f0 <__aeabi_uldivmod>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	4613      	mov	r3, r2
 800174a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800174c:	4b0b      	ldr	r3, [pc, #44]	@ (800177c <HAL_RCC_GetSysClockFreq+0x180>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	0c1b      	lsrs	r3, r3, #16
 8001752:	f003 0303 	and.w	r3, r3, #3
 8001756:	3301      	adds	r3, #1
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800175c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800175e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001760:	fbb2 f3f3 	udiv	r3, r2, r3
 8001764:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001766:	e002      	b.n	800176e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001768:	4b05      	ldr	r3, [pc, #20]	@ (8001780 <HAL_RCC_GetSysClockFreq+0x184>)
 800176a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800176c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800176e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001770:	4618      	mov	r0, r3
 8001772:	3740      	adds	r7, #64	@ 0x40
 8001774:	46bd      	mov	sp, r7
 8001776:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800177a:	bf00      	nop
 800177c:	40023800 	.word	0x40023800
 8001780:	00f42400 	.word	0x00f42400
 8001784:	017d7840 	.word	0x017d7840

08001788 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800178c:	4b03      	ldr	r3, [pc, #12]	@ (800179c <HAL_RCC_GetHCLKFreq+0x14>)
 800178e:	681b      	ldr	r3, [r3, #0]
}
 8001790:	4618      	mov	r0, r3
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	20000000 	.word	0x20000000

080017a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80017a4:	f7ff fff0 	bl	8001788 <HAL_RCC_GetHCLKFreq>
 80017a8:	4602      	mov	r2, r0
 80017aa:	4b05      	ldr	r3, [pc, #20]	@ (80017c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	0b5b      	lsrs	r3, r3, #13
 80017b0:	f003 0307 	and.w	r3, r3, #7
 80017b4:	4903      	ldr	r1, [pc, #12]	@ (80017c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017b6:	5ccb      	ldrb	r3, [r1, r3]
 80017b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017bc:	4618      	mov	r0, r3
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40023800 	.word	0x40023800
 80017c4:	08005448 	.word	0x08005448

080017c8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	220f      	movs	r2, #15
 80017d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80017d8:	4b12      	ldr	r3, [pc, #72]	@ (8001824 <HAL_RCC_GetClockConfig+0x5c>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f003 0203 	and.w	r2, r3, #3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80017e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001824 <HAL_RCC_GetClockConfig+0x5c>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80017f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001824 <HAL_RCC_GetClockConfig+0x5c>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80017fc:	4b09      	ldr	r3, [pc, #36]	@ (8001824 <HAL_RCC_GetClockConfig+0x5c>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	08db      	lsrs	r3, r3, #3
 8001802:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800180a:	4b07      	ldr	r3, [pc, #28]	@ (8001828 <HAL_RCC_GetClockConfig+0x60>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 020f 	and.w	r2, r3, #15
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	601a      	str	r2, [r3, #0]
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	40023800 	.word	0x40023800
 8001828:	40023c00 	.word	0x40023c00

0800182c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e041      	b.n	80018c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d106      	bne.n	8001858 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f000 f839 	bl	80018ca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2202      	movs	r2, #2
 800185c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3304      	adds	r3, #4
 8001868:	4619      	mov	r1, r3
 800186a:	4610      	mov	r0, r2
 800186c:	f000 f9c0 	bl	8001bf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2201      	movs	r2, #1
 800187c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2201      	movs	r2, #1
 8001884:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2201      	movs	r2, #1
 800188c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2201      	movs	r2, #1
 8001894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2201      	movs	r2, #1
 800189c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2201      	movs	r2, #1
 80018b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2201      	movs	r2, #1
 80018bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b083      	sub	sp, #12
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80018d2:	bf00      	nop
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
	...

080018e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d001      	beq.n	80018f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e04e      	b.n	8001996 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2202      	movs	r2, #2
 80018fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	68da      	ldr	r2, [r3, #12]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f042 0201 	orr.w	r2, r2, #1
 800190e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a23      	ldr	r2, [pc, #140]	@ (80019a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d022      	beq.n	8001960 <HAL_TIM_Base_Start_IT+0x80>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001922:	d01d      	beq.n	8001960 <HAL_TIM_Base_Start_IT+0x80>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a1f      	ldr	r2, [pc, #124]	@ (80019a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d018      	beq.n	8001960 <HAL_TIM_Base_Start_IT+0x80>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a1e      	ldr	r2, [pc, #120]	@ (80019ac <HAL_TIM_Base_Start_IT+0xcc>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d013      	beq.n	8001960 <HAL_TIM_Base_Start_IT+0x80>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a1c      	ldr	r2, [pc, #112]	@ (80019b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d00e      	beq.n	8001960 <HAL_TIM_Base_Start_IT+0x80>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a1b      	ldr	r2, [pc, #108]	@ (80019b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d009      	beq.n	8001960 <HAL_TIM_Base_Start_IT+0x80>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a19      	ldr	r2, [pc, #100]	@ (80019b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d004      	beq.n	8001960 <HAL_TIM_Base_Start_IT+0x80>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a18      	ldr	r2, [pc, #96]	@ (80019bc <HAL_TIM_Base_Start_IT+0xdc>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d111      	bne.n	8001984 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2b06      	cmp	r3, #6
 8001970:	d010      	beq.n	8001994 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f042 0201 	orr.w	r2, r2, #1
 8001980:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001982:	e007      	b.n	8001994 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f042 0201 	orr.w	r2, r2, #1
 8001992:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3714      	adds	r7, #20
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	40010000 	.word	0x40010000
 80019a8:	40000400 	.word	0x40000400
 80019ac:	40000800 	.word	0x40000800
 80019b0:	40000c00 	.word	0x40000c00
 80019b4:	40010400 	.word	0x40010400
 80019b8:	40014000 	.word	0x40014000
 80019bc:	40001800 	.word	0x40001800

080019c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d020      	beq.n	8001a24 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d01b      	beq.n	8001a24 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f06f 0202 	mvn.w	r2, #2
 80019f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2201      	movs	r2, #1
 80019fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	f003 0303 	and.w	r3, r3, #3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f000 f8d2 	bl	8001bb4 <HAL_TIM_IC_CaptureCallback>
 8001a10:	e005      	b.n	8001a1e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 f8c4 	bl	8001ba0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f000 f8d5 	bl	8001bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	f003 0304 	and.w	r3, r3, #4
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d020      	beq.n	8001a70 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d01b      	beq.n	8001a70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f06f 0204 	mvn.w	r2, #4
 8001a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2202      	movs	r2, #2
 8001a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d003      	beq.n	8001a5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 f8ac 	bl	8001bb4 <HAL_TIM_IC_CaptureCallback>
 8001a5c:	e005      	b.n	8001a6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f000 f89e 	bl	8001ba0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f000 f8af 	bl	8001bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	f003 0308 	and.w	r3, r3, #8
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d020      	beq.n	8001abc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f003 0308 	and.w	r3, r3, #8
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d01b      	beq.n	8001abc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f06f 0208 	mvn.w	r2, #8
 8001a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2204      	movs	r2, #4
 8001a92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	f003 0303 	and.w	r3, r3, #3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 f886 	bl	8001bb4 <HAL_TIM_IC_CaptureCallback>
 8001aa8:	e005      	b.n	8001ab6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 f878 	bl	8001ba0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 f889 	bl	8001bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	f003 0310 	and.w	r3, r3, #16
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d020      	beq.n	8001b08 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f003 0310 	and.w	r3, r3, #16
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d01b      	beq.n	8001b08 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f06f 0210 	mvn.w	r2, #16
 8001ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2208      	movs	r2, #8
 8001ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 f860 	bl	8001bb4 <HAL_TIM_IC_CaptureCallback>
 8001af4:	e005      	b.n	8001b02 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f000 f852 	bl	8001ba0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f000 f863 	bl	8001bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d00c      	beq.n	8001b2c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f003 0301 	and.w	r3, r3, #1
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d007      	beq.n	8001b2c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f06f 0201 	mvn.w	r2, #1
 8001b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7fe fdee 	bl	8000708 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d00c      	beq.n	8001b50 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d007      	beq.n	8001b50 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 f906 	bl	8001d5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d00c      	beq.n	8001b74 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d007      	beq.n	8001b74 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 f834 	bl	8001bdc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	f003 0320 	and.w	r3, r3, #32
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d00c      	beq.n	8001b98 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f003 0320 	and.w	r3, r3, #32
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d007      	beq.n	8001b98 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f06f 0220 	mvn.w	r2, #32
 8001b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 f8d8 	bl	8001d48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b98:	bf00      	nop
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4a46      	ldr	r2, [pc, #280]	@ (8001d1c <TIM_Base_SetConfig+0x12c>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d013      	beq.n	8001c30 <TIM_Base_SetConfig+0x40>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c0e:	d00f      	beq.n	8001c30 <TIM_Base_SetConfig+0x40>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4a43      	ldr	r2, [pc, #268]	@ (8001d20 <TIM_Base_SetConfig+0x130>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d00b      	beq.n	8001c30 <TIM_Base_SetConfig+0x40>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4a42      	ldr	r2, [pc, #264]	@ (8001d24 <TIM_Base_SetConfig+0x134>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d007      	beq.n	8001c30 <TIM_Base_SetConfig+0x40>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4a41      	ldr	r2, [pc, #260]	@ (8001d28 <TIM_Base_SetConfig+0x138>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d003      	beq.n	8001c30 <TIM_Base_SetConfig+0x40>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a40      	ldr	r2, [pc, #256]	@ (8001d2c <TIM_Base_SetConfig+0x13c>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d108      	bne.n	8001c42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a35      	ldr	r2, [pc, #212]	@ (8001d1c <TIM_Base_SetConfig+0x12c>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d02b      	beq.n	8001ca2 <TIM_Base_SetConfig+0xb2>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c50:	d027      	beq.n	8001ca2 <TIM_Base_SetConfig+0xb2>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a32      	ldr	r2, [pc, #200]	@ (8001d20 <TIM_Base_SetConfig+0x130>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d023      	beq.n	8001ca2 <TIM_Base_SetConfig+0xb2>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a31      	ldr	r2, [pc, #196]	@ (8001d24 <TIM_Base_SetConfig+0x134>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d01f      	beq.n	8001ca2 <TIM_Base_SetConfig+0xb2>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a30      	ldr	r2, [pc, #192]	@ (8001d28 <TIM_Base_SetConfig+0x138>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d01b      	beq.n	8001ca2 <TIM_Base_SetConfig+0xb2>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a2f      	ldr	r2, [pc, #188]	@ (8001d2c <TIM_Base_SetConfig+0x13c>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d017      	beq.n	8001ca2 <TIM_Base_SetConfig+0xb2>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a2e      	ldr	r2, [pc, #184]	@ (8001d30 <TIM_Base_SetConfig+0x140>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d013      	beq.n	8001ca2 <TIM_Base_SetConfig+0xb2>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a2d      	ldr	r2, [pc, #180]	@ (8001d34 <TIM_Base_SetConfig+0x144>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d00f      	beq.n	8001ca2 <TIM_Base_SetConfig+0xb2>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a2c      	ldr	r2, [pc, #176]	@ (8001d38 <TIM_Base_SetConfig+0x148>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d00b      	beq.n	8001ca2 <TIM_Base_SetConfig+0xb2>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a2b      	ldr	r2, [pc, #172]	@ (8001d3c <TIM_Base_SetConfig+0x14c>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d007      	beq.n	8001ca2 <TIM_Base_SetConfig+0xb2>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a2a      	ldr	r2, [pc, #168]	@ (8001d40 <TIM_Base_SetConfig+0x150>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d003      	beq.n	8001ca2 <TIM_Base_SetConfig+0xb2>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a29      	ldr	r2, [pc, #164]	@ (8001d44 <TIM_Base_SetConfig+0x154>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d108      	bne.n	8001cb4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ca8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a10      	ldr	r2, [pc, #64]	@ (8001d1c <TIM_Base_SetConfig+0x12c>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d003      	beq.n	8001ce8 <TIM_Base_SetConfig+0xf8>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4a12      	ldr	r2, [pc, #72]	@ (8001d2c <TIM_Base_SetConfig+0x13c>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d103      	bne.n	8001cf0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	691a      	ldr	r2, [r3, #16]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d105      	bne.n	8001d0e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	f023 0201 	bic.w	r2, r3, #1
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	611a      	str	r2, [r3, #16]
  }
}
 8001d0e:	bf00      	nop
 8001d10:	3714      	adds	r7, #20
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	40010000 	.word	0x40010000
 8001d20:	40000400 	.word	0x40000400
 8001d24:	40000800 	.word	0x40000800
 8001d28:	40000c00 	.word	0x40000c00
 8001d2c:	40010400 	.word	0x40010400
 8001d30:	40014000 	.word	0x40014000
 8001d34:	40014400 	.word	0x40014400
 8001d38:	40014800 	.word	0x40014800
 8001d3c:	40001800 	.word	0x40001800
 8001d40:	40001c00 	.word	0x40001c00
 8001d44:	40002000 	.word	0x40002000

08001d48 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <__NVIC_SetPriority>:
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	6039      	str	r1, [r7, #0]
 8001d7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	db0a      	blt.n	8001d9a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	490c      	ldr	r1, [pc, #48]	@ (8001dbc <__NVIC_SetPriority+0x4c>)
 8001d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8e:	0112      	lsls	r2, r2, #4
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	440b      	add	r3, r1
 8001d94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001d98:	e00a      	b.n	8001db0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	4908      	ldr	r1, [pc, #32]	@ (8001dc0 <__NVIC_SetPriority+0x50>)
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	3b04      	subs	r3, #4
 8001da8:	0112      	lsls	r2, r2, #4
 8001daa:	b2d2      	uxtb	r2, r2
 8001dac:	440b      	add	r3, r1
 8001dae:	761a      	strb	r2, [r3, #24]
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	e000e100 	.word	0xe000e100
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001dc8:	4b05      	ldr	r3, [pc, #20]	@ (8001de0 <SysTick_Handler+0x1c>)
 8001dca:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001dcc:	f002 f880 	bl	8003ed0 <xTaskGetSchedulerState>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d001      	beq.n	8001dda <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001dd6:	f002 ff77 	bl	8004cc8 <xPortSysTickHandler>
  }
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	e000e010 	.word	0xe000e010

08001de4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001de8:	2100      	movs	r1, #0
 8001dea:	f06f 0004 	mvn.w	r0, #4
 8001dee:	f7ff ffbf 	bl	8001d70 <__NVIC_SetPriority>
#endif
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
	...

08001df8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001dfe:	f3ef 8305 	mrs	r3, IPSR
 8001e02:	603b      	str	r3, [r7, #0]
  return(result);
 8001e04:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001e0a:	f06f 0305 	mvn.w	r3, #5
 8001e0e:	607b      	str	r3, [r7, #4]
 8001e10:	e00c      	b.n	8001e2c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001e12:	4b0a      	ldr	r3, [pc, #40]	@ (8001e3c <osKernelInitialize+0x44>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d105      	bne.n	8001e26 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001e1a:	4b08      	ldr	r3, [pc, #32]	@ (8001e3c <osKernelInitialize+0x44>)
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001e20:	2300      	movs	r3, #0
 8001e22:	607b      	str	r3, [r7, #4]
 8001e24:	e002      	b.n	8001e2c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001e26:	f04f 33ff 	mov.w	r3, #4294967295
 8001e2a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001e2c:	687b      	ldr	r3, [r7, #4]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	200000d4 	.word	0x200000d4

08001e40 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e46:	f3ef 8305 	mrs	r3, IPSR
 8001e4a:	603b      	str	r3, [r7, #0]
  return(result);
 8001e4c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <osKernelStart+0x1a>
    stat = osErrorISR;
 8001e52:	f06f 0305 	mvn.w	r3, #5
 8001e56:	607b      	str	r3, [r7, #4]
 8001e58:	e010      	b.n	8001e7c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e88 <osKernelStart+0x48>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d109      	bne.n	8001e76 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001e62:	f7ff ffbf 	bl	8001de4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001e66:	4b08      	ldr	r3, [pc, #32]	@ (8001e88 <osKernelStart+0x48>)
 8001e68:	2202      	movs	r2, #2
 8001e6a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001e6c:	f001 fbbc 	bl	80035e8 <vTaskStartScheduler>
      stat = osOK;
 8001e70:	2300      	movs	r3, #0
 8001e72:	607b      	str	r3, [r7, #4]
 8001e74:	e002      	b.n	8001e7c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001e76:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001e7c:	687b      	ldr	r3, [r7, #4]
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	200000d4 	.word	0x200000d4

08001e8c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b08e      	sub	sp, #56	@ 0x38
 8001e90:	af04      	add	r7, sp, #16
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e9c:	f3ef 8305 	mrs	r3, IPSR
 8001ea0:	617b      	str	r3, [r7, #20]
  return(result);
 8001ea2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d17e      	bne.n	8001fa6 <osThreadNew+0x11a>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d07b      	beq.n	8001fa6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001eae:	2380      	movs	r3, #128	@ 0x80
 8001eb0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001eb2:	2318      	movs	r3, #24
 8001eb4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8001eba:	f04f 33ff 	mov.w	r3, #4294967295
 8001ebe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d045      	beq.n	8001f52 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d002      	beq.n	8001ed4 <osThreadNew+0x48>
        name = attr->name;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d002      	beq.n	8001ee2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d008      	beq.n	8001efa <osThreadNew+0x6e>
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	2b38      	cmp	r3, #56	@ 0x38
 8001eec:	d805      	bhi.n	8001efa <osThreadNew+0x6e>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <osThreadNew+0x72>
        return (NULL);
 8001efa:	2300      	movs	r3, #0
 8001efc:	e054      	b.n	8001fa8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	089b      	lsrs	r3, r3, #2
 8001f0c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00e      	beq.n	8001f34 <osThreadNew+0xa8>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	2ba7      	cmp	r3, #167	@ 0xa7
 8001f1c:	d90a      	bls.n	8001f34 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d006      	beq.n	8001f34 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d002      	beq.n	8001f34 <osThreadNew+0xa8>
        mem = 1;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	61bb      	str	r3, [r7, #24]
 8001f32:	e010      	b.n	8001f56 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d10c      	bne.n	8001f56 <osThreadNew+0xca>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d108      	bne.n	8001f56 <osThreadNew+0xca>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d104      	bne.n	8001f56 <osThreadNew+0xca>
          mem = 0;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	61bb      	str	r3, [r7, #24]
 8001f50:	e001      	b.n	8001f56 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d110      	bne.n	8001f7e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001f64:	9202      	str	r2, [sp, #8]
 8001f66:	9301      	str	r3, [sp, #4]
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	6a3a      	ldr	r2, [r7, #32]
 8001f70:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001f72:	68f8      	ldr	r0, [r7, #12]
 8001f74:	f001 f944 	bl	8003200 <xTaskCreateStatic>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	613b      	str	r3, [r7, #16]
 8001f7c:	e013      	b.n	8001fa6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d110      	bne.n	8001fa6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001f84:	6a3b      	ldr	r3, [r7, #32]
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	f107 0310 	add.w	r3, r7, #16
 8001f8c:	9301      	str	r3, [sp, #4]
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	9300      	str	r3, [sp, #0]
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001f96:	68f8      	ldr	r0, [r7, #12]
 8001f98:	f001 f992 	bl	80032c0 <xTaskCreate>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d001      	beq.n	8001fa6 <osThreadNew+0x11a>
            hTask = NULL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001fa6:	693b      	ldr	r3, [r7, #16]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3728      	adds	r7, #40	@ 0x28
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001fb8:	f3ef 8305 	mrs	r3, IPSR
 8001fbc:	60bb      	str	r3, [r7, #8]
  return(result);
 8001fbe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d003      	beq.n	8001fcc <osDelay+0x1c>
    stat = osErrorISR;
 8001fc4:	f06f 0305 	mvn.w	r3, #5
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	e007      	b.n	8001fdc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d002      	beq.n	8001fdc <osDelay+0x2c>
      vTaskDelay(ticks);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f001 fad0 	bl	800357c <vTaskDelay>
    }
  }

  return (stat);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b088      	sub	sp, #32
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ff2:	f3ef 8305 	mrs	r3, IPSR
 8001ff6:	60bb      	str	r3, [r7, #8]
  return(result);
 8001ff8:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d174      	bne.n	80020e8 <osMutexNew+0x102>
    if (attr != NULL) {
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d003      	beq.n	800200c <osMutexNew+0x26>
      type = attr->attr_bits;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	61bb      	str	r3, [r7, #24]
 800200a:	e001      	b.n	8002010 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800200c:	2300      	movs	r3, #0
 800200e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b00      	cmp	r3, #0
 8002018:	d002      	beq.n	8002020 <osMutexNew+0x3a>
      rmtx = 1U;
 800201a:	2301      	movs	r3, #1
 800201c:	617b      	str	r3, [r7, #20]
 800201e:	e001      	b.n	8002024 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	f003 0308 	and.w	r3, r3, #8
 800202a:	2b00      	cmp	r3, #0
 800202c:	d15c      	bne.n	80020e8 <osMutexNew+0x102>
      mem = -1;
 800202e:	f04f 33ff 	mov.w	r3, #4294967295
 8002032:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d015      	beq.n	8002066 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d006      	beq.n	8002050 <osMutexNew+0x6a>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	2b4f      	cmp	r3, #79	@ 0x4f
 8002048:	d902      	bls.n	8002050 <osMutexNew+0x6a>
          mem = 1;
 800204a:	2301      	movs	r3, #1
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	e00c      	b.n	800206a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d108      	bne.n	800206a <osMutexNew+0x84>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d104      	bne.n	800206a <osMutexNew+0x84>
            mem = 0;
 8002060:	2300      	movs	r3, #0
 8002062:	613b      	str	r3, [r7, #16]
 8002064:	e001      	b.n	800206a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8002066:	2300      	movs	r3, #0
 8002068:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d112      	bne.n	8002096 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d007      	beq.n	8002086 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	4619      	mov	r1, r3
 800207c:	2004      	movs	r0, #4
 800207e:	f000 fb20 	bl	80026c2 <xQueueCreateMutexStatic>
 8002082:	61f8      	str	r0, [r7, #28]
 8002084:	e016      	b.n	80020b4 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	4619      	mov	r1, r3
 800208c:	2001      	movs	r0, #1
 800208e:	f000 fb18 	bl	80026c2 <xQueueCreateMutexStatic>
 8002092:	61f8      	str	r0, [r7, #28]
 8002094:	e00e      	b.n	80020b4 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d10b      	bne.n	80020b4 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d004      	beq.n	80020ac <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80020a2:	2004      	movs	r0, #4
 80020a4:	f000 faf5 	bl	8002692 <xQueueCreateMutex>
 80020a8:	61f8      	str	r0, [r7, #28]
 80020aa:	e003      	b.n	80020b4 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80020ac:	2001      	movs	r0, #1
 80020ae:	f000 faf0 	bl	8002692 <xQueueCreateMutex>
 80020b2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00c      	beq.n	80020d4 <osMutexNew+0xee>
        if (attr != NULL) {
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <osMutexNew+0xe2>
          name = attr->name;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	e001      	b.n	80020cc <osMutexNew+0xe6>
        } else {
          name = NULL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80020cc:	68f9      	ldr	r1, [r7, #12]
 80020ce:	69f8      	ldr	r0, [r7, #28]
 80020d0:	f001 f838 	bl	8003144 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d006      	beq.n	80020e8 <osMutexNew+0x102>
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d003      	beq.n	80020e8 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	f043 0301 	orr.w	r3, r3, #1
 80020e6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80020e8:	69fb      	ldr	r3, [r7, #28]
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3720      	adds	r7, #32
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b086      	sub	sp, #24
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f023 0301 	bic.w	r3, r3, #1
 8002102:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800210c:	2300      	movs	r3, #0
 800210e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002110:	f3ef 8305 	mrs	r3, IPSR
 8002114:	60bb      	str	r3, [r7, #8]
  return(result);
 8002116:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8002118:	2b00      	cmp	r3, #0
 800211a:	d003      	beq.n	8002124 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800211c:	f06f 0305 	mvn.w	r3, #5
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	e02c      	b.n	800217e <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d103      	bne.n	8002132 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800212a:	f06f 0303 	mvn.w	r3, #3
 800212e:	617b      	str	r3, [r7, #20]
 8002130:	e025      	b.n	800217e <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d011      	beq.n	800215c <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8002138:	6839      	ldr	r1, [r7, #0]
 800213a:	6938      	ldr	r0, [r7, #16]
 800213c:	f000 fb11 	bl	8002762 <xQueueTakeMutexRecursive>
 8002140:	4603      	mov	r3, r0
 8002142:	2b01      	cmp	r3, #1
 8002144:	d01b      	beq.n	800217e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d003      	beq.n	8002154 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800214c:	f06f 0301 	mvn.w	r3, #1
 8002150:	617b      	str	r3, [r7, #20]
 8002152:	e014      	b.n	800217e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8002154:	f06f 0302 	mvn.w	r3, #2
 8002158:	617b      	str	r3, [r7, #20]
 800215a:	e010      	b.n	800217e <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800215c:	6839      	ldr	r1, [r7, #0]
 800215e:	6938      	ldr	r0, [r7, #16]
 8002160:	f000 fdb8 	bl	8002cd4 <xQueueSemaphoreTake>
 8002164:	4603      	mov	r3, r0
 8002166:	2b01      	cmp	r3, #1
 8002168:	d009      	beq.n	800217e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d003      	beq.n	8002178 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8002170:	f06f 0301 	mvn.w	r3, #1
 8002174:	617b      	str	r3, [r7, #20]
 8002176:	e002      	b.n	800217e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8002178:	f06f 0302 	mvn.w	r3, #2
 800217c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800217e:	697b      	ldr	r3, [r7, #20]
}
 8002180:	4618      	mov	r0, r3
 8002182:	3718      	adds	r7, #24
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f023 0301 	bic.w	r3, r3, #1
 8002196:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80021a0:	2300      	movs	r3, #0
 80021a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021a4:	f3ef 8305 	mrs	r3, IPSR
 80021a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80021aa:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d003      	beq.n	80021b8 <osMutexRelease+0x30>
    stat = osErrorISR;
 80021b0:	f06f 0305 	mvn.w	r3, #5
 80021b4:	617b      	str	r3, [r7, #20]
 80021b6:	e01f      	b.n	80021f8 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d103      	bne.n	80021c6 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80021be:	f06f 0303 	mvn.w	r3, #3
 80021c2:	617b      	str	r3, [r7, #20]
 80021c4:	e018      	b.n	80021f8 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d009      	beq.n	80021e0 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80021cc:	6938      	ldr	r0, [r7, #16]
 80021ce:	f000 fa93 	bl	80026f8 <xQueueGiveMutexRecursive>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d00f      	beq.n	80021f8 <osMutexRelease+0x70>
        stat = osErrorResource;
 80021d8:	f06f 0302 	mvn.w	r3, #2
 80021dc:	617b      	str	r3, [r7, #20]
 80021de:	e00b      	b.n	80021f8 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80021e0:	2300      	movs	r3, #0
 80021e2:	2200      	movs	r2, #0
 80021e4:	2100      	movs	r1, #0
 80021e6:	6938      	ldr	r0, [r7, #16]
 80021e8:	f000 faf2 	bl	80027d0 <xQueueGenericSend>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d002      	beq.n	80021f8 <osMutexRelease+0x70>
        stat = osErrorResource;
 80021f2:	f06f 0302 	mvn.w	r3, #2
 80021f6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80021f8:	697b      	ldr	r3, [r7, #20]
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3718      	adds	r7, #24
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
	...

08002204 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	4a07      	ldr	r2, [pc, #28]	@ (8002230 <vApplicationGetIdleTaskMemory+0x2c>)
 8002214:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	4a06      	ldr	r2, [pc, #24]	@ (8002234 <vApplicationGetIdleTaskMemory+0x30>)
 800221a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2280      	movs	r2, #128	@ 0x80
 8002220:	601a      	str	r2, [r3, #0]
}
 8002222:	bf00      	nop
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	200000d8 	.word	0x200000d8
 8002234:	20000180 	.word	0x20000180

08002238 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	4a07      	ldr	r2, [pc, #28]	@ (8002264 <vApplicationGetTimerTaskMemory+0x2c>)
 8002248:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	4a06      	ldr	r2, [pc, #24]	@ (8002268 <vApplicationGetTimerTaskMemory+0x30>)
 800224e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002256:	601a      	str	r2, [r3, #0]
}
 8002258:	bf00      	nop
 800225a:	3714      	adds	r7, #20
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	20000380 	.word	0x20000380
 8002268:	20000428 	.word	0x20000428

0800226c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f103 0208 	add.w	r2, r3, #8
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f04f 32ff 	mov.w	r2, #4294967295
 8002284:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f103 0208 	add.w	r2, r3, #8
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f103 0208 	add.w	r2, r3, #8
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80022c6:	b480      	push	{r7}
 80022c8:	b085      	sub	sp, #20
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
 80022ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	1c5a      	adds	r2, r3, #1
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	601a      	str	r2, [r3, #0]
}
 8002302:	bf00      	nop
 8002304:	3714      	adds	r7, #20
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800230e:	b480      	push	{r7}
 8002310:	b085      	sub	sp, #20
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
 8002316:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002324:	d103      	bne.n	800232e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	e00c      	b.n	8002348 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	3308      	adds	r3, #8
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	e002      	b.n	800233c <vListInsert+0x2e>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68ba      	ldr	r2, [r7, #8]
 8002344:	429a      	cmp	r2, r3
 8002346:	d2f6      	bcs.n	8002336 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	1c5a      	adds	r2, r3, #1
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	601a      	str	r2, [r3, #0]
}
 8002374:	bf00      	nop
 8002376:	3714      	adds	r7, #20
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	6892      	ldr	r2, [r2, #8]
 8002396:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6852      	ldr	r2, [r2, #4]
 80023a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d103      	bne.n	80023b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	1e5a      	subs	r2, r3, #1
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3714      	adds	r7, #20
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d10b      	bne.n	8002400 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80023e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023ec:	f383 8811 	msr	BASEPRI, r3
 80023f0:	f3bf 8f6f 	isb	sy
 80023f4:	f3bf 8f4f 	dsb	sy
 80023f8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80023fa:	bf00      	nop
 80023fc:	bf00      	nop
 80023fe:	e7fd      	b.n	80023fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002400:	f002 fbd2 	bl	8004ba8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800240c:	68f9      	ldr	r1, [r7, #12]
 800240e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002410:	fb01 f303 	mul.w	r3, r1, r3
 8002414:	441a      	add	r2, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002430:	3b01      	subs	r3, #1
 8002432:	68f9      	ldr	r1, [r7, #12]
 8002434:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002436:	fb01 f303 	mul.w	r3, r1, r3
 800243a:	441a      	add	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	22ff      	movs	r2, #255	@ 0xff
 8002444:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	22ff      	movs	r2, #255	@ 0xff
 800244c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d114      	bne.n	8002480 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d01a      	beq.n	8002494 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	3310      	adds	r3, #16
 8002462:	4618      	mov	r0, r3
 8002464:	f001 fb5e 	bl	8003b24 <xTaskRemoveFromEventList>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d012      	beq.n	8002494 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800246e:	4b0d      	ldr	r3, [pc, #52]	@ (80024a4 <xQueueGenericReset+0xd0>)
 8002470:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	f3bf 8f4f 	dsb	sy
 800247a:	f3bf 8f6f 	isb	sy
 800247e:	e009      	b.n	8002494 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	3310      	adds	r3, #16
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff fef1 	bl	800226c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	3324      	adds	r3, #36	@ 0x24
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff feec 	bl	800226c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002494:	f002 fbba 	bl	8004c0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002498:	2301      	movs	r3, #1
}
 800249a:	4618      	mov	r0, r3
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	e000ed04 	.word	0xe000ed04

080024a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08e      	sub	sp, #56	@ 0x38
 80024ac:	af02      	add	r7, sp, #8
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
 80024b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10b      	bne.n	80024d4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80024bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024c0:	f383 8811 	msr	BASEPRI, r3
 80024c4:	f3bf 8f6f 	isb	sy
 80024c8:	f3bf 8f4f 	dsb	sy
 80024cc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80024ce:	bf00      	nop
 80024d0:	bf00      	nop
 80024d2:	e7fd      	b.n	80024d0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d10b      	bne.n	80024f2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80024da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024de:	f383 8811 	msr	BASEPRI, r3
 80024e2:	f3bf 8f6f 	isb	sy
 80024e6:	f3bf 8f4f 	dsb	sy
 80024ea:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80024ec:	bf00      	nop
 80024ee:	bf00      	nop
 80024f0:	e7fd      	b.n	80024ee <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d002      	beq.n	80024fe <xQueueGenericCreateStatic+0x56>
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <xQueueGenericCreateStatic+0x5a>
 80024fe:	2301      	movs	r3, #1
 8002500:	e000      	b.n	8002504 <xQueueGenericCreateStatic+0x5c>
 8002502:	2300      	movs	r3, #0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10b      	bne.n	8002520 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800250c:	f383 8811 	msr	BASEPRI, r3
 8002510:	f3bf 8f6f 	isb	sy
 8002514:	f3bf 8f4f 	dsb	sy
 8002518:	623b      	str	r3, [r7, #32]
}
 800251a:	bf00      	nop
 800251c:	bf00      	nop
 800251e:	e7fd      	b.n	800251c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d102      	bne.n	800252c <xQueueGenericCreateStatic+0x84>
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d101      	bne.n	8002530 <xQueueGenericCreateStatic+0x88>
 800252c:	2301      	movs	r3, #1
 800252e:	e000      	b.n	8002532 <xQueueGenericCreateStatic+0x8a>
 8002530:	2300      	movs	r3, #0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10b      	bne.n	800254e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800253a:	f383 8811 	msr	BASEPRI, r3
 800253e:	f3bf 8f6f 	isb	sy
 8002542:	f3bf 8f4f 	dsb	sy
 8002546:	61fb      	str	r3, [r7, #28]
}
 8002548:	bf00      	nop
 800254a:	bf00      	nop
 800254c:	e7fd      	b.n	800254a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800254e:	2350      	movs	r3, #80	@ 0x50
 8002550:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	2b50      	cmp	r3, #80	@ 0x50
 8002556:	d00b      	beq.n	8002570 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800255c:	f383 8811 	msr	BASEPRI, r3
 8002560:	f3bf 8f6f 	isb	sy
 8002564:	f3bf 8f4f 	dsb	sy
 8002568:	61bb      	str	r3, [r7, #24]
}
 800256a:	bf00      	nop
 800256c:	bf00      	nop
 800256e:	e7fd      	b.n	800256c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002570:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00d      	beq.n	8002598 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800257c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002584:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800258a:	9300      	str	r3, [sp, #0]
 800258c:	4613      	mov	r3, r2
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	68b9      	ldr	r1, [r7, #8]
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f000 f840 	bl	8002618 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800259a:	4618      	mov	r0, r3
 800259c:	3730      	adds	r7, #48	@ 0x30
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b08a      	sub	sp, #40	@ 0x28
 80025a6:	af02      	add	r7, sp, #8
 80025a8:	60f8      	str	r0, [r7, #12]
 80025aa:	60b9      	str	r1, [r7, #8]
 80025ac:	4613      	mov	r3, r2
 80025ae:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10b      	bne.n	80025ce <xQueueGenericCreate+0x2c>
	__asm volatile
 80025b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025ba:	f383 8811 	msr	BASEPRI, r3
 80025be:	f3bf 8f6f 	isb	sy
 80025c2:	f3bf 8f4f 	dsb	sy
 80025c6:	613b      	str	r3, [r7, #16]
}
 80025c8:	bf00      	nop
 80025ca:	bf00      	nop
 80025cc:	e7fd      	b.n	80025ca <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	68ba      	ldr	r2, [r7, #8]
 80025d2:	fb02 f303 	mul.w	r3, r2, r3
 80025d6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	3350      	adds	r3, #80	@ 0x50
 80025dc:	4618      	mov	r0, r3
 80025de:	f002 fc05 	bl	8004dec <pvPortMalloc>
 80025e2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d011      	beq.n	800260e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	3350      	adds	r3, #80	@ 0x50
 80025f2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80025fc:	79fa      	ldrb	r2, [r7, #7]
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	4613      	mov	r3, r2
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	68b9      	ldr	r1, [r7, #8]
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f000 f805 	bl	8002618 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800260e:	69bb      	ldr	r3, [r7, #24]
	}
 8002610:	4618      	mov	r0, r3
 8002612:	3720      	adds	r7, #32
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
 8002624:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d103      	bne.n	8002634 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	e002      	b.n	800263a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	68ba      	ldr	r2, [r7, #8]
 8002644:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002646:	2101      	movs	r1, #1
 8002648:	69b8      	ldr	r0, [r7, #24]
 800264a:	f7ff fec3 	bl	80023d4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	78fa      	ldrb	r2, [r7, #3]
 8002652:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002656:	bf00      	nop
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800265e:	b580      	push	{r7, lr}
 8002660:	b082      	sub	sp, #8
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00e      	beq.n	800268a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800267e:	2300      	movs	r3, #0
 8002680:	2200      	movs	r2, #0
 8002682:	2100      	movs	r1, #0
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 f8a3 	bl	80027d0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002692:	b580      	push	{r7, lr}
 8002694:	b086      	sub	sp, #24
 8002696:	af00      	add	r7, sp, #0
 8002698:	4603      	mov	r3, r0
 800269a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800269c:	2301      	movs	r3, #1
 800269e:	617b      	str	r3, [r7, #20]
 80026a0:	2300      	movs	r3, #0
 80026a2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80026a4:	79fb      	ldrb	r3, [r7, #7]
 80026a6:	461a      	mov	r2, r3
 80026a8:	6939      	ldr	r1, [r7, #16]
 80026aa:	6978      	ldr	r0, [r7, #20]
 80026ac:	f7ff ff79 	bl	80025a2 <xQueueGenericCreate>
 80026b0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f7ff ffd3 	bl	800265e <prvInitialiseMutex>

		return xNewQueue;
 80026b8:	68fb      	ldr	r3, [r7, #12]
	}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3718      	adds	r7, #24
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b088      	sub	sp, #32
 80026c6:	af02      	add	r7, sp, #8
 80026c8:	4603      	mov	r3, r0
 80026ca:	6039      	str	r1, [r7, #0]
 80026cc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80026ce:	2301      	movs	r3, #1
 80026d0:	617b      	str	r3, [r7, #20]
 80026d2:	2300      	movs	r3, #0
 80026d4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80026d6:	79fb      	ldrb	r3, [r7, #7]
 80026d8:	9300      	str	r3, [sp, #0]
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	2200      	movs	r2, #0
 80026de:	6939      	ldr	r1, [r7, #16]
 80026e0:	6978      	ldr	r0, [r7, #20]
 80026e2:	f7ff fee1 	bl	80024a8 <xQueueGenericCreateStatic>
 80026e6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f7ff ffb8 	bl	800265e <prvInitialiseMutex>

		return xNewQueue;
 80026ee:	68fb      	ldr	r3, [r7, #12]
	}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3718      	adds	r7, #24
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80026f8:	b590      	push	{r4, r7, lr}
 80026fa:	b087      	sub	sp, #28
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10b      	bne.n	8002722 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800270a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800270e:	f383 8811 	msr	BASEPRI, r3
 8002712:	f3bf 8f6f 	isb	sy
 8002716:	f3bf 8f4f 	dsb	sy
 800271a:	60fb      	str	r3, [r7, #12]
}
 800271c:	bf00      	nop
 800271e:	bf00      	nop
 8002720:	e7fd      	b.n	800271e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	689c      	ldr	r4, [r3, #8]
 8002726:	f001 fbc3 	bl	8003eb0 <xTaskGetCurrentTaskHandle>
 800272a:	4603      	mov	r3, r0
 800272c:	429c      	cmp	r4, r3
 800272e:	d111      	bne.n	8002754 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	1e5a      	subs	r2, r3, #1
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d105      	bne.n	800274e <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8002742:	2300      	movs	r3, #0
 8002744:	2200      	movs	r2, #0
 8002746:	2100      	movs	r1, #0
 8002748:	6938      	ldr	r0, [r7, #16]
 800274a:	f000 f841 	bl	80027d0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800274e:	2301      	movs	r3, #1
 8002750:	617b      	str	r3, [r7, #20]
 8002752:	e001      	b.n	8002758 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8002754:	2300      	movs	r3, #0
 8002756:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8002758:	697b      	ldr	r3, [r7, #20]
	}
 800275a:	4618      	mov	r0, r3
 800275c:	371c      	adds	r7, #28
 800275e:	46bd      	mov	sp, r7
 8002760:	bd90      	pop	{r4, r7, pc}

08002762 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8002762:	b590      	push	{r4, r7, lr}
 8002764:	b087      	sub	sp, #28
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
 800276a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10b      	bne.n	800278e <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8002776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800277a:	f383 8811 	msr	BASEPRI, r3
 800277e:	f3bf 8f6f 	isb	sy
 8002782:	f3bf 8f4f 	dsb	sy
 8002786:	60fb      	str	r3, [r7, #12]
}
 8002788:	bf00      	nop
 800278a:	bf00      	nop
 800278c:	e7fd      	b.n	800278a <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	689c      	ldr	r4, [r3, #8]
 8002792:	f001 fb8d 	bl	8003eb0 <xTaskGetCurrentTaskHandle>
 8002796:	4603      	mov	r3, r0
 8002798:	429c      	cmp	r4, r3
 800279a:	d107      	bne.n	80027ac <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	1c5a      	adds	r2, r3, #1
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80027a6:	2301      	movs	r3, #1
 80027a8:	617b      	str	r3, [r7, #20]
 80027aa:	e00c      	b.n	80027c6 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80027ac:	6839      	ldr	r1, [r7, #0]
 80027ae:	6938      	ldr	r0, [r7, #16]
 80027b0:	f000 fa90 	bl	8002cd4 <xQueueSemaphoreTake>
 80027b4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d004      	beq.n	80027c6 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	1c5a      	adds	r2, r3, #1
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80027c6:	697b      	ldr	r3, [r7, #20]
	}
 80027c8:	4618      	mov	r0, r3
 80027ca:	371c      	adds	r7, #28
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd90      	pop	{r4, r7, pc}

080027d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08e      	sub	sp, #56	@ 0x38
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
 80027dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80027de:	2300      	movs	r3, #0
 80027e0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80027e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d10b      	bne.n	8002804 <xQueueGenericSend+0x34>
	__asm volatile
 80027ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027f0:	f383 8811 	msr	BASEPRI, r3
 80027f4:	f3bf 8f6f 	isb	sy
 80027f8:	f3bf 8f4f 	dsb	sy
 80027fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80027fe:	bf00      	nop
 8002800:	bf00      	nop
 8002802:	e7fd      	b.n	8002800 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d103      	bne.n	8002812 <xQueueGenericSend+0x42>
 800280a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800280c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <xQueueGenericSend+0x46>
 8002812:	2301      	movs	r3, #1
 8002814:	e000      	b.n	8002818 <xQueueGenericSend+0x48>
 8002816:	2300      	movs	r3, #0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d10b      	bne.n	8002834 <xQueueGenericSend+0x64>
	__asm volatile
 800281c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002820:	f383 8811 	msr	BASEPRI, r3
 8002824:	f3bf 8f6f 	isb	sy
 8002828:	f3bf 8f4f 	dsb	sy
 800282c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800282e:	bf00      	nop
 8002830:	bf00      	nop
 8002832:	e7fd      	b.n	8002830 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	2b02      	cmp	r3, #2
 8002838:	d103      	bne.n	8002842 <xQueueGenericSend+0x72>
 800283a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800283c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800283e:	2b01      	cmp	r3, #1
 8002840:	d101      	bne.n	8002846 <xQueueGenericSend+0x76>
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <xQueueGenericSend+0x78>
 8002846:	2300      	movs	r3, #0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10b      	bne.n	8002864 <xQueueGenericSend+0x94>
	__asm volatile
 800284c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002850:	f383 8811 	msr	BASEPRI, r3
 8002854:	f3bf 8f6f 	isb	sy
 8002858:	f3bf 8f4f 	dsb	sy
 800285c:	623b      	str	r3, [r7, #32]
}
 800285e:	bf00      	nop
 8002860:	bf00      	nop
 8002862:	e7fd      	b.n	8002860 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002864:	f001 fb34 	bl	8003ed0 <xTaskGetSchedulerState>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d102      	bne.n	8002874 <xQueueGenericSend+0xa4>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <xQueueGenericSend+0xa8>
 8002874:	2301      	movs	r3, #1
 8002876:	e000      	b.n	800287a <xQueueGenericSend+0xaa>
 8002878:	2300      	movs	r3, #0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10b      	bne.n	8002896 <xQueueGenericSend+0xc6>
	__asm volatile
 800287e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002882:	f383 8811 	msr	BASEPRI, r3
 8002886:	f3bf 8f6f 	isb	sy
 800288a:	f3bf 8f4f 	dsb	sy
 800288e:	61fb      	str	r3, [r7, #28]
}
 8002890:	bf00      	nop
 8002892:	bf00      	nop
 8002894:	e7fd      	b.n	8002892 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002896:	f002 f987 	bl	8004ba8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800289a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800289c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800289e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d302      	bcc.n	80028ac <xQueueGenericSend+0xdc>
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d129      	bne.n	8002900 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	68b9      	ldr	r1, [r7, #8]
 80028b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80028b2:	f000 fb37 	bl	8002f24 <prvCopyDataToQueue>
 80028b6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d010      	beq.n	80028e2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028c2:	3324      	adds	r3, #36	@ 0x24
 80028c4:	4618      	mov	r0, r3
 80028c6:	f001 f92d 	bl	8003b24 <xTaskRemoveFromEventList>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d013      	beq.n	80028f8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80028d0:	4b3f      	ldr	r3, [pc, #252]	@ (80029d0 <xQueueGenericSend+0x200>)
 80028d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	f3bf 8f4f 	dsb	sy
 80028dc:	f3bf 8f6f 	isb	sy
 80028e0:	e00a      	b.n	80028f8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80028e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d007      	beq.n	80028f8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80028e8:	4b39      	ldr	r3, [pc, #228]	@ (80029d0 <xQueueGenericSend+0x200>)
 80028ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	f3bf 8f4f 	dsb	sy
 80028f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80028f8:	f002 f988 	bl	8004c0c <vPortExitCritical>
				return pdPASS;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e063      	b.n	80029c8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d103      	bne.n	800290e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002906:	f002 f981 	bl	8004c0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800290a:	2300      	movs	r3, #0
 800290c:	e05c      	b.n	80029c8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800290e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002910:	2b00      	cmp	r3, #0
 8002912:	d106      	bne.n	8002922 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002914:	f107 0314 	add.w	r3, r7, #20
 8002918:	4618      	mov	r0, r3
 800291a:	f001 f967 	bl	8003bec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800291e:	2301      	movs	r3, #1
 8002920:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002922:	f002 f973 	bl	8004c0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002926:	f000 fecf 	bl	80036c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800292a:	f002 f93d 	bl	8004ba8 <vPortEnterCritical>
 800292e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002930:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002934:	b25b      	sxtb	r3, r3
 8002936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800293a:	d103      	bne.n	8002944 <xQueueGenericSend+0x174>
 800293c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800293e:	2200      	movs	r2, #0
 8002940:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002946:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800294a:	b25b      	sxtb	r3, r3
 800294c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002950:	d103      	bne.n	800295a <xQueueGenericSend+0x18a>
 8002952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800295a:	f002 f957 	bl	8004c0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800295e:	1d3a      	adds	r2, r7, #4
 8002960:	f107 0314 	add.w	r3, r7, #20
 8002964:	4611      	mov	r1, r2
 8002966:	4618      	mov	r0, r3
 8002968:	f001 f956 	bl	8003c18 <xTaskCheckForTimeOut>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d124      	bne.n	80029bc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002972:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002974:	f000 fbce 	bl	8003114 <prvIsQueueFull>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d018      	beq.n	80029b0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800297e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002980:	3310      	adds	r3, #16
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	4611      	mov	r1, r2
 8002986:	4618      	mov	r0, r3
 8002988:	f001 f87a 	bl	8003a80 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800298c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800298e:	f000 fb59 	bl	8003044 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002992:	f000 fea7 	bl	80036e4 <xTaskResumeAll>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	f47f af7c 	bne.w	8002896 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800299e:	4b0c      	ldr	r3, [pc, #48]	@ (80029d0 <xQueueGenericSend+0x200>)
 80029a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	f3bf 8f4f 	dsb	sy
 80029aa:	f3bf 8f6f 	isb	sy
 80029ae:	e772      	b.n	8002896 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80029b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80029b2:	f000 fb47 	bl	8003044 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80029b6:	f000 fe95 	bl	80036e4 <xTaskResumeAll>
 80029ba:	e76c      	b.n	8002896 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80029bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80029be:	f000 fb41 	bl	8003044 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80029c2:	f000 fe8f 	bl	80036e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80029c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3738      	adds	r7, #56	@ 0x38
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	e000ed04 	.word	0xe000ed04

080029d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b090      	sub	sp, #64	@ 0x40
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
 80029e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80029e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d10b      	bne.n	8002a04 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80029ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029f0:	f383 8811 	msr	BASEPRI, r3
 80029f4:	f3bf 8f6f 	isb	sy
 80029f8:	f3bf 8f4f 	dsb	sy
 80029fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80029fe:	bf00      	nop
 8002a00:	bf00      	nop
 8002a02:	e7fd      	b.n	8002a00 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d103      	bne.n	8002a12 <xQueueGenericSendFromISR+0x3e>
 8002a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <xQueueGenericSendFromISR+0x42>
 8002a12:	2301      	movs	r3, #1
 8002a14:	e000      	b.n	8002a18 <xQueueGenericSendFromISR+0x44>
 8002a16:	2300      	movs	r3, #0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d10b      	bne.n	8002a34 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a20:	f383 8811 	msr	BASEPRI, r3
 8002a24:	f3bf 8f6f 	isb	sy
 8002a28:	f3bf 8f4f 	dsb	sy
 8002a2c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002a2e:	bf00      	nop
 8002a30:	bf00      	nop
 8002a32:	e7fd      	b.n	8002a30 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d103      	bne.n	8002a42 <xQueueGenericSendFromISR+0x6e>
 8002a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d101      	bne.n	8002a46 <xQueueGenericSendFromISR+0x72>
 8002a42:	2301      	movs	r3, #1
 8002a44:	e000      	b.n	8002a48 <xQueueGenericSendFromISR+0x74>
 8002a46:	2300      	movs	r3, #0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d10b      	bne.n	8002a64 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a50:	f383 8811 	msr	BASEPRI, r3
 8002a54:	f3bf 8f6f 	isb	sy
 8002a58:	f3bf 8f4f 	dsb	sy
 8002a5c:	623b      	str	r3, [r7, #32]
}
 8002a5e:	bf00      	nop
 8002a60:	bf00      	nop
 8002a62:	e7fd      	b.n	8002a60 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002a64:	f002 f980 	bl	8004d68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002a68:	f3ef 8211 	mrs	r2, BASEPRI
 8002a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a70:	f383 8811 	msr	BASEPRI, r3
 8002a74:	f3bf 8f6f 	isb	sy
 8002a78:	f3bf 8f4f 	dsb	sy
 8002a7c:	61fa      	str	r2, [r7, #28]
 8002a7e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002a80:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002a82:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d302      	bcc.n	8002a96 <xQueueGenericSendFromISR+0xc2>
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d12f      	bne.n	8002af6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a98:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002a9c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002aa6:	683a      	ldr	r2, [r7, #0]
 8002aa8:	68b9      	ldr	r1, [r7, #8]
 8002aaa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002aac:	f000 fa3a 	bl	8002f24 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002ab0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab8:	d112      	bne.n	8002ae0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d016      	beq.n	8002af0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ac4:	3324      	adds	r3, #36	@ 0x24
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f001 f82c 	bl	8003b24 <xTaskRemoveFromEventList>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00e      	beq.n	8002af0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00b      	beq.n	8002af0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	e007      	b.n	8002af0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002ae0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	b25a      	sxtb	r2, r3
 8002aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002af0:	2301      	movs	r3, #1
 8002af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002af4:	e001      	b.n	8002afa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002af6:	2300      	movs	r3, #0
 8002af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002afa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002afc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002b04:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002b06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3740      	adds	r7, #64	@ 0x40
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b08c      	sub	sp, #48	@ 0x30
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10b      	bne.n	8002b42 <xQueueReceive+0x32>
	__asm volatile
 8002b2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b2e:	f383 8811 	msr	BASEPRI, r3
 8002b32:	f3bf 8f6f 	isb	sy
 8002b36:	f3bf 8f4f 	dsb	sy
 8002b3a:	623b      	str	r3, [r7, #32]
}
 8002b3c:	bf00      	nop
 8002b3e:	bf00      	nop
 8002b40:	e7fd      	b.n	8002b3e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d103      	bne.n	8002b50 <xQueueReceive+0x40>
 8002b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d101      	bne.n	8002b54 <xQueueReceive+0x44>
 8002b50:	2301      	movs	r3, #1
 8002b52:	e000      	b.n	8002b56 <xQueueReceive+0x46>
 8002b54:	2300      	movs	r3, #0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10b      	bne.n	8002b72 <xQueueReceive+0x62>
	__asm volatile
 8002b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b5e:	f383 8811 	msr	BASEPRI, r3
 8002b62:	f3bf 8f6f 	isb	sy
 8002b66:	f3bf 8f4f 	dsb	sy
 8002b6a:	61fb      	str	r3, [r7, #28]
}
 8002b6c:	bf00      	nop
 8002b6e:	bf00      	nop
 8002b70:	e7fd      	b.n	8002b6e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b72:	f001 f9ad 	bl	8003ed0 <xTaskGetSchedulerState>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d102      	bne.n	8002b82 <xQueueReceive+0x72>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <xQueueReceive+0x76>
 8002b82:	2301      	movs	r3, #1
 8002b84:	e000      	b.n	8002b88 <xQueueReceive+0x78>
 8002b86:	2300      	movs	r3, #0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d10b      	bne.n	8002ba4 <xQueueReceive+0x94>
	__asm volatile
 8002b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b90:	f383 8811 	msr	BASEPRI, r3
 8002b94:	f3bf 8f6f 	isb	sy
 8002b98:	f3bf 8f4f 	dsb	sy
 8002b9c:	61bb      	str	r3, [r7, #24]
}
 8002b9e:	bf00      	nop
 8002ba0:	bf00      	nop
 8002ba2:	e7fd      	b.n	8002ba0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ba4:	f002 f800 	bl	8004ba8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bac:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d01f      	beq.n	8002bf4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002bb4:	68b9      	ldr	r1, [r7, #8]
 8002bb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002bb8:	f000 fa1e 	bl	8002ff8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bbe:	1e5a      	subs	r2, r3, #1
 8002bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bc2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00f      	beq.n	8002bec <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bce:	3310      	adds	r3, #16
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f000 ffa7 	bl	8003b24 <xTaskRemoveFromEventList>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d007      	beq.n	8002bec <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002bdc:	4b3c      	ldr	r3, [pc, #240]	@ (8002cd0 <xQueueReceive+0x1c0>)
 8002bde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	f3bf 8f4f 	dsb	sy
 8002be8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002bec:	f002 f80e 	bl	8004c0c <vPortExitCritical>
				return pdPASS;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e069      	b.n	8002cc8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d103      	bne.n	8002c02 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002bfa:	f002 f807 	bl	8004c0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	e062      	b.n	8002cc8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d106      	bne.n	8002c16 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c08:	f107 0310 	add.w	r3, r7, #16
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f000 ffed 	bl	8003bec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c12:	2301      	movs	r3, #1
 8002c14:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c16:	f001 fff9 	bl	8004c0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c1a:	f000 fd55 	bl	80036c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c1e:	f001 ffc3 	bl	8004ba8 <vPortEnterCritical>
 8002c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002c28:	b25b      	sxtb	r3, r3
 8002c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c2e:	d103      	bne.n	8002c38 <xQueueReceive+0x128>
 8002c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002c3e:	b25b      	sxtb	r3, r3
 8002c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c44:	d103      	bne.n	8002c4e <xQueueReceive+0x13e>
 8002c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002c4e:	f001 ffdd 	bl	8004c0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c52:	1d3a      	adds	r2, r7, #4
 8002c54:	f107 0310 	add.w	r3, r7, #16
 8002c58:	4611      	mov	r1, r2
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f000 ffdc 	bl	8003c18 <xTaskCheckForTimeOut>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d123      	bne.n	8002cae <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002c68:	f000 fa3e 	bl	80030e8 <prvIsQueueEmpty>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d017      	beq.n	8002ca2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c74:	3324      	adds	r3, #36	@ 0x24
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	4611      	mov	r1, r2
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f000 ff00 	bl	8003a80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002c80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002c82:	f000 f9df 	bl	8003044 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002c86:	f000 fd2d 	bl	80036e4 <xTaskResumeAll>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d189      	bne.n	8002ba4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002c90:	4b0f      	ldr	r3, [pc, #60]	@ (8002cd0 <xQueueReceive+0x1c0>)
 8002c92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	f3bf 8f4f 	dsb	sy
 8002c9c:	f3bf 8f6f 	isb	sy
 8002ca0:	e780      	b.n	8002ba4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002ca2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002ca4:	f000 f9ce 	bl	8003044 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ca8:	f000 fd1c 	bl	80036e4 <xTaskResumeAll>
 8002cac:	e77a      	b.n	8002ba4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002cae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002cb0:	f000 f9c8 	bl	8003044 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002cb4:	f000 fd16 	bl	80036e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002cb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002cba:	f000 fa15 	bl	80030e8 <prvIsQueueEmpty>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f43f af6f 	beq.w	8002ba4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002cc6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3730      	adds	r7, #48	@ 0x30
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	e000ed04 	.word	0xe000ed04

08002cd4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b08e      	sub	sp, #56	@ 0x38
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10b      	bne.n	8002d08 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8002cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cf4:	f383 8811 	msr	BASEPRI, r3
 8002cf8:	f3bf 8f6f 	isb	sy
 8002cfc:	f3bf 8f4f 	dsb	sy
 8002d00:	623b      	str	r3, [r7, #32]
}
 8002d02:	bf00      	nop
 8002d04:	bf00      	nop
 8002d06:	e7fd      	b.n	8002d04 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00b      	beq.n	8002d28 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8002d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d14:	f383 8811 	msr	BASEPRI, r3
 8002d18:	f3bf 8f6f 	isb	sy
 8002d1c:	f3bf 8f4f 	dsb	sy
 8002d20:	61fb      	str	r3, [r7, #28]
}
 8002d22:	bf00      	nop
 8002d24:	bf00      	nop
 8002d26:	e7fd      	b.n	8002d24 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d28:	f001 f8d2 	bl	8003ed0 <xTaskGetSchedulerState>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d102      	bne.n	8002d38 <xQueueSemaphoreTake+0x64>
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <xQueueSemaphoreTake+0x68>
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e000      	b.n	8002d3e <xQueueSemaphoreTake+0x6a>
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10b      	bne.n	8002d5a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8002d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d46:	f383 8811 	msr	BASEPRI, r3
 8002d4a:	f3bf 8f6f 	isb	sy
 8002d4e:	f3bf 8f4f 	dsb	sy
 8002d52:	61bb      	str	r3, [r7, #24]
}
 8002d54:	bf00      	nop
 8002d56:	bf00      	nop
 8002d58:	e7fd      	b.n	8002d56 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d5a:	f001 ff25 	bl	8004ba8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d62:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d024      	beq.n	8002db4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d6c:	1e5a      	subs	r2, r3, #1
 8002d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d70:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d104      	bne.n	8002d84 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002d7a:	f001 fa23 	bl	80041c4 <pvTaskIncrementMutexHeldCount>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d82:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00f      	beq.n	8002dac <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d8e:	3310      	adds	r3, #16
 8002d90:	4618      	mov	r0, r3
 8002d92:	f000 fec7 	bl	8003b24 <xTaskRemoveFromEventList>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d007      	beq.n	8002dac <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002d9c:	4b54      	ldr	r3, [pc, #336]	@ (8002ef0 <xQueueSemaphoreTake+0x21c>)
 8002d9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	f3bf 8f4f 	dsb	sy
 8002da8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002dac:	f001 ff2e 	bl	8004c0c <vPortExitCritical>
				return pdPASS;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e098      	b.n	8002ee6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d112      	bne.n	8002de0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00b      	beq.n	8002dd8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8002dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dc4:	f383 8811 	msr	BASEPRI, r3
 8002dc8:	f3bf 8f6f 	isb	sy
 8002dcc:	f3bf 8f4f 	dsb	sy
 8002dd0:	617b      	str	r3, [r7, #20]
}
 8002dd2:	bf00      	nop
 8002dd4:	bf00      	nop
 8002dd6:	e7fd      	b.n	8002dd4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002dd8:	f001 ff18 	bl	8004c0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	e082      	b.n	8002ee6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002de0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d106      	bne.n	8002df4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002de6:	f107 030c 	add.w	r3, r7, #12
 8002dea:	4618      	mov	r0, r3
 8002dec:	f000 fefe 	bl	8003bec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002df0:	2301      	movs	r3, #1
 8002df2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002df4:	f001 ff0a 	bl	8004c0c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002df8:	f000 fc66 	bl	80036c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002dfc:	f001 fed4 	bl	8004ba8 <vPortEnterCritical>
 8002e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e02:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002e06:	b25b      	sxtb	r3, r3
 8002e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e0c:	d103      	bne.n	8002e16 <xQueueSemaphoreTake+0x142>
 8002e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002e1c:	b25b      	sxtb	r3, r3
 8002e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e22:	d103      	bne.n	8002e2c <xQueueSemaphoreTake+0x158>
 8002e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e2c:	f001 feee 	bl	8004c0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e30:	463a      	mov	r2, r7
 8002e32:	f107 030c 	add.w	r3, r7, #12
 8002e36:	4611      	mov	r1, r2
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f000 feed 	bl	8003c18 <xTaskCheckForTimeOut>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d132      	bne.n	8002eaa <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e44:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002e46:	f000 f94f 	bl	80030e8 <prvIsQueueEmpty>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d026      	beq.n	8002e9e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d109      	bne.n	8002e6c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8002e58:	f001 fea6 	bl	8004ba8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f001 f853 	bl	8003f0c <xTaskPriorityInherit>
 8002e66:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8002e68:	f001 fed0 	bl	8004c0c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002e6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e6e:	3324      	adds	r3, #36	@ 0x24
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	4611      	mov	r1, r2
 8002e74:	4618      	mov	r0, r3
 8002e76:	f000 fe03 	bl	8003a80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002e7a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002e7c:	f000 f8e2 	bl	8003044 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002e80:	f000 fc30 	bl	80036e4 <xTaskResumeAll>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f47f af67 	bne.w	8002d5a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8002e8c:	4b18      	ldr	r3, [pc, #96]	@ (8002ef0 <xQueueSemaphoreTake+0x21c>)
 8002e8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	f3bf 8f4f 	dsb	sy
 8002e98:	f3bf 8f6f 	isb	sy
 8002e9c:	e75d      	b.n	8002d5a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002e9e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002ea0:	f000 f8d0 	bl	8003044 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ea4:	f000 fc1e 	bl	80036e4 <xTaskResumeAll>
 8002ea8:	e757      	b.n	8002d5a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002eaa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002eac:	f000 f8ca 	bl	8003044 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002eb0:	f000 fc18 	bl	80036e4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002eb4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002eb6:	f000 f917 	bl	80030e8 <prvIsQueueEmpty>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f43f af4c 	beq.w	8002d5a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00d      	beq.n	8002ee4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8002ec8:	f001 fe6e 	bl	8004ba8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002ecc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002ece:	f000 f811 	bl	8002ef4 <prvGetDisinheritPriorityAfterTimeout>
 8002ed2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002eda:	4618      	mov	r0, r3
 8002edc:	f001 f8ee 	bl	80040bc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002ee0:	f001 fe94 	bl	8004c0c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002ee4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3738      	adds	r7, #56	@ 0x38
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	e000ed04 	.word	0xe000ed04

08002ef4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d006      	beq.n	8002f12 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	e001      	b.n	8002f16 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002f12:	2300      	movs	r3, #0
 8002f14:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8002f16:	68fb      	ldr	r3, [r7, #12]
	}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3714      	adds	r7, #20
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002f30:	2300      	movs	r3, #0
 8002f32:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f38:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10d      	bne.n	8002f5e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d14d      	bne.n	8002fe6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f001 f844 	bl	8003fdc <xTaskPriorityDisinherit>
 8002f54:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	609a      	str	r2, [r3, #8]
 8002f5c:	e043      	b.n	8002fe6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d119      	bne.n	8002f98 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6858      	ldr	r0, [r3, #4]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	68b9      	ldr	r1, [r7, #8]
 8002f70:	f002 f9ae 	bl	80052d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7c:	441a      	add	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d32b      	bcc.n	8002fe6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	605a      	str	r2, [r3, #4]
 8002f96:	e026      	b.n	8002fe6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	68d8      	ldr	r0, [r3, #12]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	68b9      	ldr	r1, [r7, #8]
 8002fa4:	f002 f994 	bl	80052d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	68da      	ldr	r2, [r3, #12]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb0:	425b      	negs	r3, r3
 8002fb2:	441a      	add	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	68da      	ldr	r2, [r3, #12]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d207      	bcs.n	8002fd4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fcc:	425b      	negs	r3, r3
 8002fce:	441a      	add	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d105      	bne.n	8002fe6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d002      	beq.n	8002fe6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1c5a      	adds	r2, r3, #1
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002fee:	697b      	ldr	r3, [r7, #20]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3718      	adds	r7, #24
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003006:	2b00      	cmp	r3, #0
 8003008:	d018      	beq.n	800303c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68da      	ldr	r2, [r3, #12]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003012:	441a      	add	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	68da      	ldr	r2, [r3, #12]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	429a      	cmp	r2, r3
 8003022:	d303      	bcc.n	800302c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68d9      	ldr	r1, [r3, #12]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003034:	461a      	mov	r2, r3
 8003036:	6838      	ldr	r0, [r7, #0]
 8003038:	f002 f94a 	bl	80052d0 <memcpy>
	}
}
 800303c:	bf00      	nop
 800303e:	3708      	adds	r7, #8
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800304c:	f001 fdac 	bl	8004ba8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003056:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003058:	e011      	b.n	800307e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305e:	2b00      	cmp	r3, #0
 8003060:	d012      	beq.n	8003088 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	3324      	adds	r3, #36	@ 0x24
 8003066:	4618      	mov	r0, r3
 8003068:	f000 fd5c 	bl	8003b24 <xTaskRemoveFromEventList>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003072:	f000 fe35 	bl	8003ce0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003076:	7bfb      	ldrb	r3, [r7, #15]
 8003078:	3b01      	subs	r3, #1
 800307a:	b2db      	uxtb	r3, r3
 800307c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800307e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003082:	2b00      	cmp	r3, #0
 8003084:	dce9      	bgt.n	800305a <prvUnlockQueue+0x16>
 8003086:	e000      	b.n	800308a <prvUnlockQueue+0x46>
					break;
 8003088:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	22ff      	movs	r2, #255	@ 0xff
 800308e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003092:	f001 fdbb 	bl	8004c0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003096:	f001 fd87 	bl	8004ba8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80030a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80030a2:	e011      	b.n	80030c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d012      	beq.n	80030d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3310      	adds	r3, #16
 80030b0:	4618      	mov	r0, r3
 80030b2:	f000 fd37 	bl	8003b24 <xTaskRemoveFromEventList>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80030bc:	f000 fe10 	bl	8003ce0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80030c0:	7bbb      	ldrb	r3, [r7, #14]
 80030c2:	3b01      	subs	r3, #1
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80030c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	dce9      	bgt.n	80030a4 <prvUnlockQueue+0x60>
 80030d0:	e000      	b.n	80030d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80030d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	22ff      	movs	r2, #255	@ 0xff
 80030d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80030dc:	f001 fd96 	bl	8004c0c <vPortExitCritical>
}
 80030e0:	bf00      	nop
 80030e2:	3710      	adds	r7, #16
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80030f0:	f001 fd5a 	bl	8004ba8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d102      	bne.n	8003102 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80030fc:	2301      	movs	r3, #1
 80030fe:	60fb      	str	r3, [r7, #12]
 8003100:	e001      	b.n	8003106 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003102:	2300      	movs	r3, #0
 8003104:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003106:	f001 fd81 	bl	8004c0c <vPortExitCritical>

	return xReturn;
 800310a:	68fb      	ldr	r3, [r7, #12]
}
 800310c:	4618      	mov	r0, r3
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800311c:	f001 fd44 	bl	8004ba8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003128:	429a      	cmp	r2, r3
 800312a:	d102      	bne.n	8003132 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800312c:	2301      	movs	r3, #1
 800312e:	60fb      	str	r3, [r7, #12]
 8003130:	e001      	b.n	8003136 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003132:	2300      	movs	r3, #0
 8003134:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003136:	f001 fd69 	bl	8004c0c <vPortExitCritical>

	return xReturn;
 800313a:	68fb      	ldr	r3, [r7, #12]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800314e:	2300      	movs	r3, #0
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	e014      	b.n	800317e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003154:	4a0f      	ldr	r2, [pc, #60]	@ (8003194 <vQueueAddToRegistry+0x50>)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10b      	bne.n	8003178 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003160:	490c      	ldr	r1, [pc, #48]	@ (8003194 <vQueueAddToRegistry+0x50>)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800316a:	4a0a      	ldr	r2, [pc, #40]	@ (8003194 <vQueueAddToRegistry+0x50>)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	4413      	add	r3, r2
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003176:	e006      	b.n	8003186 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	3301      	adds	r3, #1
 800317c:	60fb      	str	r3, [r7, #12]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2b07      	cmp	r3, #7
 8003182:	d9e7      	bls.n	8003154 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003184:	bf00      	nop
 8003186:	bf00      	nop
 8003188:	3714      	adds	r7, #20
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	20000828 	.word	0x20000828

08003198 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80031a8:	f001 fcfe 	bl	8004ba8 <vPortEnterCritical>
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80031b2:	b25b      	sxtb	r3, r3
 80031b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b8:	d103      	bne.n	80031c2 <vQueueWaitForMessageRestricted+0x2a>
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80031c8:	b25b      	sxtb	r3, r3
 80031ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ce:	d103      	bne.n	80031d8 <vQueueWaitForMessageRestricted+0x40>
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80031d8:	f001 fd18 	bl	8004c0c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d106      	bne.n	80031f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	3324      	adds	r3, #36	@ 0x24
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	68b9      	ldr	r1, [r7, #8]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 fc6d 	bl	8003acc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80031f2:	6978      	ldr	r0, [r7, #20]
 80031f4:	f7ff ff26 	bl	8003044 <prvUnlockQueue>
	}
 80031f8:	bf00      	nop
 80031fa:	3718      	adds	r7, #24
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003200:	b580      	push	{r7, lr}
 8003202:	b08e      	sub	sp, #56	@ 0x38
 8003204:	af04      	add	r7, sp, #16
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
 800320c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800320e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003210:	2b00      	cmp	r3, #0
 8003212:	d10b      	bne.n	800322c <xTaskCreateStatic+0x2c>
	__asm volatile
 8003214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003218:	f383 8811 	msr	BASEPRI, r3
 800321c:	f3bf 8f6f 	isb	sy
 8003220:	f3bf 8f4f 	dsb	sy
 8003224:	623b      	str	r3, [r7, #32]
}
 8003226:	bf00      	nop
 8003228:	bf00      	nop
 800322a:	e7fd      	b.n	8003228 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800322c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10b      	bne.n	800324a <xTaskCreateStatic+0x4a>
	__asm volatile
 8003232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003236:	f383 8811 	msr	BASEPRI, r3
 800323a:	f3bf 8f6f 	isb	sy
 800323e:	f3bf 8f4f 	dsb	sy
 8003242:	61fb      	str	r3, [r7, #28]
}
 8003244:	bf00      	nop
 8003246:	bf00      	nop
 8003248:	e7fd      	b.n	8003246 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800324a:	23a8      	movs	r3, #168	@ 0xa8
 800324c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	2ba8      	cmp	r3, #168	@ 0xa8
 8003252:	d00b      	beq.n	800326c <xTaskCreateStatic+0x6c>
	__asm volatile
 8003254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003258:	f383 8811 	msr	BASEPRI, r3
 800325c:	f3bf 8f6f 	isb	sy
 8003260:	f3bf 8f4f 	dsb	sy
 8003264:	61bb      	str	r3, [r7, #24]
}
 8003266:	bf00      	nop
 8003268:	bf00      	nop
 800326a:	e7fd      	b.n	8003268 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800326c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800326e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003270:	2b00      	cmp	r3, #0
 8003272:	d01e      	beq.n	80032b2 <xTaskCreateStatic+0xb2>
 8003274:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003276:	2b00      	cmp	r3, #0
 8003278:	d01b      	beq.n	80032b2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800327a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800327c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800327e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003280:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003282:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003286:	2202      	movs	r2, #2
 8003288:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800328c:	2300      	movs	r3, #0
 800328e:	9303      	str	r3, [sp, #12]
 8003290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003292:	9302      	str	r3, [sp, #8]
 8003294:	f107 0314 	add.w	r3, r7, #20
 8003298:	9301      	str	r3, [sp, #4]
 800329a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	68b9      	ldr	r1, [r7, #8]
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f000 f851 	bl	800334c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80032aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80032ac:	f000 f8f6 	bl	800349c <prvAddNewTaskToReadyList>
 80032b0:	e001      	b.n	80032b6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80032b2:	2300      	movs	r3, #0
 80032b4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80032b6:	697b      	ldr	r3, [r7, #20]
	}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3728      	adds	r7, #40	@ 0x28
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b08c      	sub	sp, #48	@ 0x30
 80032c4:	af04      	add	r7, sp, #16
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	603b      	str	r3, [r7, #0]
 80032cc:	4613      	mov	r3, r2
 80032ce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80032d0:	88fb      	ldrh	r3, [r7, #6]
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4618      	mov	r0, r3
 80032d6:	f001 fd89 	bl	8004dec <pvPortMalloc>
 80032da:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00e      	beq.n	8003300 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80032e2:	20a8      	movs	r0, #168	@ 0xa8
 80032e4:	f001 fd82 	bl	8004dec <pvPortMalloc>
 80032e8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d003      	beq.n	80032f8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80032f6:	e005      	b.n	8003304 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80032f8:	6978      	ldr	r0, [r7, #20]
 80032fa:	f001 fe45 	bl	8004f88 <vPortFree>
 80032fe:	e001      	b.n	8003304 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003300:	2300      	movs	r3, #0
 8003302:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d017      	beq.n	800333a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003312:	88fa      	ldrh	r2, [r7, #6]
 8003314:	2300      	movs	r3, #0
 8003316:	9303      	str	r3, [sp, #12]
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	9302      	str	r3, [sp, #8]
 800331c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800331e:	9301      	str	r3, [sp, #4]
 8003320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	68b9      	ldr	r1, [r7, #8]
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f000 f80f 	bl	800334c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800332e:	69f8      	ldr	r0, [r7, #28]
 8003330:	f000 f8b4 	bl	800349c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003334:	2301      	movs	r3, #1
 8003336:	61bb      	str	r3, [r7, #24]
 8003338:	e002      	b.n	8003340 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800333a:	f04f 33ff 	mov.w	r3, #4294967295
 800333e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003340:	69bb      	ldr	r3, [r7, #24]
	}
 8003342:	4618      	mov	r0, r3
 8003344:	3720      	adds	r7, #32
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
	...

0800334c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b088      	sub	sp, #32
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
 8003358:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800335a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800335c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	461a      	mov	r2, r3
 8003364:	21a5      	movs	r1, #165	@ 0xa5
 8003366:	f001 ff2f 	bl	80051c8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800336a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800336c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003374:	3b01      	subs	r3, #1
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	4413      	add	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	f023 0307 	bic.w	r3, r3, #7
 8003382:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	f003 0307 	and.w	r3, r3, #7
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00b      	beq.n	80033a6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800338e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003392:	f383 8811 	msr	BASEPRI, r3
 8003396:	f3bf 8f6f 	isb	sy
 800339a:	f3bf 8f4f 	dsb	sy
 800339e:	617b      	str	r3, [r7, #20]
}
 80033a0:	bf00      	nop
 80033a2:	bf00      	nop
 80033a4:	e7fd      	b.n	80033a2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d01f      	beq.n	80033ec <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033ac:	2300      	movs	r3, #0
 80033ae:	61fb      	str	r3, [r7, #28]
 80033b0:	e012      	b.n	80033d8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80033b2:	68ba      	ldr	r2, [r7, #8]
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	4413      	add	r3, r2
 80033b8:	7819      	ldrb	r1, [r3, #0]
 80033ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	4413      	add	r3, r2
 80033c0:	3334      	adds	r3, #52	@ 0x34
 80033c2:	460a      	mov	r2, r1
 80033c4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	4413      	add	r3, r2
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d006      	beq.n	80033e0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	3301      	adds	r3, #1
 80033d6:	61fb      	str	r3, [r7, #28]
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	2b0f      	cmp	r3, #15
 80033dc:	d9e9      	bls.n	80033b2 <prvInitialiseNewTask+0x66>
 80033de:	e000      	b.n	80033e2 <prvInitialiseNewTask+0x96>
			{
				break;
 80033e0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80033e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80033ea:	e003      	b.n	80033f4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80033ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80033f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033f6:	2b37      	cmp	r3, #55	@ 0x37
 80033f8:	d901      	bls.n	80033fe <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80033fa:	2337      	movs	r3, #55	@ 0x37
 80033fc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80033fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003400:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003402:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003406:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003408:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800340a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800340c:	2200      	movs	r2, #0
 800340e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003412:	3304      	adds	r3, #4
 8003414:	4618      	mov	r0, r3
 8003416:	f7fe ff49 	bl	80022ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800341a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800341c:	3318      	adds	r3, #24
 800341e:	4618      	mov	r0, r3
 8003420:	f7fe ff44 	bl	80022ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003426:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003428:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800342a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800342c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003432:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003436:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003438:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800343a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800343c:	2200      	movs	r2, #0
 800343e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003444:	2200      	movs	r2, #0
 8003446:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800344a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800344c:	3354      	adds	r3, #84	@ 0x54
 800344e:	224c      	movs	r2, #76	@ 0x4c
 8003450:	2100      	movs	r1, #0
 8003452:	4618      	mov	r0, r3
 8003454:	f001 feb8 	bl	80051c8 <memset>
 8003458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800345a:	4a0d      	ldr	r2, [pc, #52]	@ (8003490 <prvInitialiseNewTask+0x144>)
 800345c:	659a      	str	r2, [r3, #88]	@ 0x58
 800345e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003460:	4a0c      	ldr	r2, [pc, #48]	@ (8003494 <prvInitialiseNewTask+0x148>)
 8003462:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003466:	4a0c      	ldr	r2, [pc, #48]	@ (8003498 <prvInitialiseNewTask+0x14c>)
 8003468:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800346a:	683a      	ldr	r2, [r7, #0]
 800346c:	68f9      	ldr	r1, [r7, #12]
 800346e:	69b8      	ldr	r0, [r7, #24]
 8003470:	f001 fa6a 	bl	8004948 <pxPortInitialiseStack>
 8003474:	4602      	mov	r2, r0
 8003476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003478:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800347a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800347c:	2b00      	cmp	r3, #0
 800347e:	d002      	beq.n	8003486 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003482:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003484:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003486:	bf00      	nop
 8003488:	3720      	adds	r7, #32
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	20004abc 	.word	0x20004abc
 8003494:	20004b24 	.word	0x20004b24
 8003498:	20004b8c 	.word	0x20004b8c

0800349c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80034a4:	f001 fb80 	bl	8004ba8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80034a8:	4b2d      	ldr	r3, [pc, #180]	@ (8003560 <prvAddNewTaskToReadyList+0xc4>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	3301      	adds	r3, #1
 80034ae:	4a2c      	ldr	r2, [pc, #176]	@ (8003560 <prvAddNewTaskToReadyList+0xc4>)
 80034b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80034b2:	4b2c      	ldr	r3, [pc, #176]	@ (8003564 <prvAddNewTaskToReadyList+0xc8>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d109      	bne.n	80034ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80034ba:	4a2a      	ldr	r2, [pc, #168]	@ (8003564 <prvAddNewTaskToReadyList+0xc8>)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80034c0:	4b27      	ldr	r3, [pc, #156]	@ (8003560 <prvAddNewTaskToReadyList+0xc4>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d110      	bne.n	80034ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80034c8:	f000 fc2e 	bl	8003d28 <prvInitialiseTaskLists>
 80034cc:	e00d      	b.n	80034ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80034ce:	4b26      	ldr	r3, [pc, #152]	@ (8003568 <prvAddNewTaskToReadyList+0xcc>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d109      	bne.n	80034ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80034d6:	4b23      	ldr	r3, [pc, #140]	@ (8003564 <prvAddNewTaskToReadyList+0xc8>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d802      	bhi.n	80034ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80034e4:	4a1f      	ldr	r2, [pc, #124]	@ (8003564 <prvAddNewTaskToReadyList+0xc8>)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80034ea:	4b20      	ldr	r3, [pc, #128]	@ (800356c <prvAddNewTaskToReadyList+0xd0>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	3301      	adds	r3, #1
 80034f0:	4a1e      	ldr	r2, [pc, #120]	@ (800356c <prvAddNewTaskToReadyList+0xd0>)
 80034f2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80034f4:	4b1d      	ldr	r3, [pc, #116]	@ (800356c <prvAddNewTaskToReadyList+0xd0>)
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003500:	4b1b      	ldr	r3, [pc, #108]	@ (8003570 <prvAddNewTaskToReadyList+0xd4>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	429a      	cmp	r2, r3
 8003506:	d903      	bls.n	8003510 <prvAddNewTaskToReadyList+0x74>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800350c:	4a18      	ldr	r2, [pc, #96]	@ (8003570 <prvAddNewTaskToReadyList+0xd4>)
 800350e:	6013      	str	r3, [r2, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003514:	4613      	mov	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4413      	add	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	4a15      	ldr	r2, [pc, #84]	@ (8003574 <prvAddNewTaskToReadyList+0xd8>)
 800351e:	441a      	add	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	3304      	adds	r3, #4
 8003524:	4619      	mov	r1, r3
 8003526:	4610      	mov	r0, r2
 8003528:	f7fe fecd 	bl	80022c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800352c:	f001 fb6e 	bl	8004c0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003530:	4b0d      	ldr	r3, [pc, #52]	@ (8003568 <prvAddNewTaskToReadyList+0xcc>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00e      	beq.n	8003556 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003538:	4b0a      	ldr	r3, [pc, #40]	@ (8003564 <prvAddNewTaskToReadyList+0xc8>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003542:	429a      	cmp	r2, r3
 8003544:	d207      	bcs.n	8003556 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003546:	4b0c      	ldr	r3, [pc, #48]	@ (8003578 <prvAddNewTaskToReadyList+0xdc>)
 8003548:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	f3bf 8f4f 	dsb	sy
 8003552:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003556:	bf00      	nop
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	20000d3c 	.word	0x20000d3c
 8003564:	20000868 	.word	0x20000868
 8003568:	20000d48 	.word	0x20000d48
 800356c:	20000d58 	.word	0x20000d58
 8003570:	20000d44 	.word	0x20000d44
 8003574:	2000086c 	.word	0x2000086c
 8003578:	e000ed04 	.word	0xe000ed04

0800357c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003584:	2300      	movs	r3, #0
 8003586:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d018      	beq.n	80035c0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800358e:	4b14      	ldr	r3, [pc, #80]	@ (80035e0 <vTaskDelay+0x64>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00b      	beq.n	80035ae <vTaskDelay+0x32>
	__asm volatile
 8003596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800359a:	f383 8811 	msr	BASEPRI, r3
 800359e:	f3bf 8f6f 	isb	sy
 80035a2:	f3bf 8f4f 	dsb	sy
 80035a6:	60bb      	str	r3, [r7, #8]
}
 80035a8:	bf00      	nop
 80035aa:	bf00      	nop
 80035ac:	e7fd      	b.n	80035aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80035ae:	f000 f88b 	bl	80036c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80035b2:	2100      	movs	r1, #0
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 fe19 	bl	80041ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80035ba:	f000 f893 	bl	80036e4 <xTaskResumeAll>
 80035be:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d107      	bne.n	80035d6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80035c6:	4b07      	ldr	r3, [pc, #28]	@ (80035e4 <vTaskDelay+0x68>)
 80035c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035cc:	601a      	str	r2, [r3, #0]
 80035ce:	f3bf 8f4f 	dsb	sy
 80035d2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80035d6:	bf00      	nop
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	20000d64 	.word	0x20000d64
 80035e4:	e000ed04 	.word	0xe000ed04

080035e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b08a      	sub	sp, #40	@ 0x28
 80035ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80035ee:	2300      	movs	r3, #0
 80035f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80035f2:	2300      	movs	r3, #0
 80035f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80035f6:	463a      	mov	r2, r7
 80035f8:	1d39      	adds	r1, r7, #4
 80035fa:	f107 0308 	add.w	r3, r7, #8
 80035fe:	4618      	mov	r0, r3
 8003600:	f7fe fe00 	bl	8002204 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003604:	6839      	ldr	r1, [r7, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	9202      	str	r2, [sp, #8]
 800360c:	9301      	str	r3, [sp, #4]
 800360e:	2300      	movs	r3, #0
 8003610:	9300      	str	r3, [sp, #0]
 8003612:	2300      	movs	r3, #0
 8003614:	460a      	mov	r2, r1
 8003616:	4924      	ldr	r1, [pc, #144]	@ (80036a8 <vTaskStartScheduler+0xc0>)
 8003618:	4824      	ldr	r0, [pc, #144]	@ (80036ac <vTaskStartScheduler+0xc4>)
 800361a:	f7ff fdf1 	bl	8003200 <xTaskCreateStatic>
 800361e:	4603      	mov	r3, r0
 8003620:	4a23      	ldr	r2, [pc, #140]	@ (80036b0 <vTaskStartScheduler+0xc8>)
 8003622:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003624:	4b22      	ldr	r3, [pc, #136]	@ (80036b0 <vTaskStartScheduler+0xc8>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d002      	beq.n	8003632 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800362c:	2301      	movs	r3, #1
 800362e:	617b      	str	r3, [r7, #20]
 8003630:	e001      	b.n	8003636 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003632:	2300      	movs	r3, #0
 8003634:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d102      	bne.n	8003642 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800363c:	f000 fe2a 	bl	8004294 <xTimerCreateTimerTask>
 8003640:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d11b      	bne.n	8003680 <vTaskStartScheduler+0x98>
	__asm volatile
 8003648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800364c:	f383 8811 	msr	BASEPRI, r3
 8003650:	f3bf 8f6f 	isb	sy
 8003654:	f3bf 8f4f 	dsb	sy
 8003658:	613b      	str	r3, [r7, #16]
}
 800365a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800365c:	4b15      	ldr	r3, [pc, #84]	@ (80036b4 <vTaskStartScheduler+0xcc>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	3354      	adds	r3, #84	@ 0x54
 8003662:	4a15      	ldr	r2, [pc, #84]	@ (80036b8 <vTaskStartScheduler+0xd0>)
 8003664:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003666:	4b15      	ldr	r3, [pc, #84]	@ (80036bc <vTaskStartScheduler+0xd4>)
 8003668:	f04f 32ff 	mov.w	r2, #4294967295
 800366c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800366e:	4b14      	ldr	r3, [pc, #80]	@ (80036c0 <vTaskStartScheduler+0xd8>)
 8003670:	2201      	movs	r2, #1
 8003672:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003674:	4b13      	ldr	r3, [pc, #76]	@ (80036c4 <vTaskStartScheduler+0xdc>)
 8003676:	2200      	movs	r2, #0
 8003678:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800367a:	f001 f9f1 	bl	8004a60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800367e:	e00f      	b.n	80036a0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003686:	d10b      	bne.n	80036a0 <vTaskStartScheduler+0xb8>
	__asm volatile
 8003688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800368c:	f383 8811 	msr	BASEPRI, r3
 8003690:	f3bf 8f6f 	isb	sy
 8003694:	f3bf 8f4f 	dsb	sy
 8003698:	60fb      	str	r3, [r7, #12]
}
 800369a:	bf00      	nop
 800369c:	bf00      	nop
 800369e:	e7fd      	b.n	800369c <vTaskStartScheduler+0xb4>
}
 80036a0:	bf00      	nop
 80036a2:	3718      	adds	r7, #24
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	080053c8 	.word	0x080053c8
 80036ac:	08003cf9 	.word	0x08003cf9
 80036b0:	20000d60 	.word	0x20000d60
 80036b4:	20000868 	.word	0x20000868
 80036b8:	20000010 	.word	0x20000010
 80036bc:	20000d5c 	.word	0x20000d5c
 80036c0:	20000d48 	.word	0x20000d48
 80036c4:	20000d40 	.word	0x20000d40

080036c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80036cc:	4b04      	ldr	r3, [pc, #16]	@ (80036e0 <vTaskSuspendAll+0x18>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	3301      	adds	r3, #1
 80036d2:	4a03      	ldr	r2, [pc, #12]	@ (80036e0 <vTaskSuspendAll+0x18>)
 80036d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80036d6:	bf00      	nop
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr
 80036e0:	20000d64 	.word	0x20000d64

080036e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80036ea:	2300      	movs	r3, #0
 80036ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80036ee:	2300      	movs	r3, #0
 80036f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80036f2:	4b42      	ldr	r3, [pc, #264]	@ (80037fc <xTaskResumeAll+0x118>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10b      	bne.n	8003712 <xTaskResumeAll+0x2e>
	__asm volatile
 80036fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036fe:	f383 8811 	msr	BASEPRI, r3
 8003702:	f3bf 8f6f 	isb	sy
 8003706:	f3bf 8f4f 	dsb	sy
 800370a:	603b      	str	r3, [r7, #0]
}
 800370c:	bf00      	nop
 800370e:	bf00      	nop
 8003710:	e7fd      	b.n	800370e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003712:	f001 fa49 	bl	8004ba8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003716:	4b39      	ldr	r3, [pc, #228]	@ (80037fc <xTaskResumeAll+0x118>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	3b01      	subs	r3, #1
 800371c:	4a37      	ldr	r2, [pc, #220]	@ (80037fc <xTaskResumeAll+0x118>)
 800371e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003720:	4b36      	ldr	r3, [pc, #216]	@ (80037fc <xTaskResumeAll+0x118>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d162      	bne.n	80037ee <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003728:	4b35      	ldr	r3, [pc, #212]	@ (8003800 <xTaskResumeAll+0x11c>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d05e      	beq.n	80037ee <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003730:	e02f      	b.n	8003792 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003732:	4b34      	ldr	r3, [pc, #208]	@ (8003804 <xTaskResumeAll+0x120>)
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	3318      	adds	r3, #24
 800373e:	4618      	mov	r0, r3
 8003740:	f7fe fe1e 	bl	8002380 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	3304      	adds	r3, #4
 8003748:	4618      	mov	r0, r3
 800374a:	f7fe fe19 	bl	8002380 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003752:	4b2d      	ldr	r3, [pc, #180]	@ (8003808 <xTaskResumeAll+0x124>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	429a      	cmp	r2, r3
 8003758:	d903      	bls.n	8003762 <xTaskResumeAll+0x7e>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800375e:	4a2a      	ldr	r2, [pc, #168]	@ (8003808 <xTaskResumeAll+0x124>)
 8003760:	6013      	str	r3, [r2, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003766:	4613      	mov	r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	4413      	add	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4a27      	ldr	r2, [pc, #156]	@ (800380c <xTaskResumeAll+0x128>)
 8003770:	441a      	add	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	3304      	adds	r3, #4
 8003776:	4619      	mov	r1, r3
 8003778:	4610      	mov	r0, r2
 800377a:	f7fe fda4 	bl	80022c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003782:	4b23      	ldr	r3, [pc, #140]	@ (8003810 <xTaskResumeAll+0x12c>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003788:	429a      	cmp	r2, r3
 800378a:	d302      	bcc.n	8003792 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800378c:	4b21      	ldr	r3, [pc, #132]	@ (8003814 <xTaskResumeAll+0x130>)
 800378e:	2201      	movs	r2, #1
 8003790:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003792:	4b1c      	ldr	r3, [pc, #112]	@ (8003804 <xTaskResumeAll+0x120>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1cb      	bne.n	8003732 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80037a0:	f000 fb66 	bl	8003e70 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80037a4:	4b1c      	ldr	r3, [pc, #112]	@ (8003818 <xTaskResumeAll+0x134>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d010      	beq.n	80037d2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80037b0:	f000 f846 	bl	8003840 <xTaskIncrementTick>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d002      	beq.n	80037c0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80037ba:	4b16      	ldr	r3, [pc, #88]	@ (8003814 <xTaskResumeAll+0x130>)
 80037bc:	2201      	movs	r2, #1
 80037be:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	3b01      	subs	r3, #1
 80037c4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1f1      	bne.n	80037b0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80037cc:	4b12      	ldr	r3, [pc, #72]	@ (8003818 <xTaskResumeAll+0x134>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80037d2:	4b10      	ldr	r3, [pc, #64]	@ (8003814 <xTaskResumeAll+0x130>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d009      	beq.n	80037ee <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80037da:	2301      	movs	r3, #1
 80037dc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80037de:	4b0f      	ldr	r3, [pc, #60]	@ (800381c <xTaskResumeAll+0x138>)
 80037e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037e4:	601a      	str	r2, [r3, #0]
 80037e6:	f3bf 8f4f 	dsb	sy
 80037ea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80037ee:	f001 fa0d 	bl	8004c0c <vPortExitCritical>

	return xAlreadyYielded;
 80037f2:	68bb      	ldr	r3, [r7, #8]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	20000d64 	.word	0x20000d64
 8003800:	20000d3c 	.word	0x20000d3c
 8003804:	20000cfc 	.word	0x20000cfc
 8003808:	20000d44 	.word	0x20000d44
 800380c:	2000086c 	.word	0x2000086c
 8003810:	20000868 	.word	0x20000868
 8003814:	20000d50 	.word	0x20000d50
 8003818:	20000d4c 	.word	0x20000d4c
 800381c:	e000ed04 	.word	0xe000ed04

08003820 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003826:	4b05      	ldr	r3, [pc, #20]	@ (800383c <xTaskGetTickCount+0x1c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800382c:	687b      	ldr	r3, [r7, #4]
}
 800382e:	4618      	mov	r0, r3
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	20000d40 	.word	0x20000d40

08003840 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003846:	2300      	movs	r3, #0
 8003848:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800384a:	4b4f      	ldr	r3, [pc, #316]	@ (8003988 <xTaskIncrementTick+0x148>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	f040 8090 	bne.w	8003974 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003854:	4b4d      	ldr	r3, [pc, #308]	@ (800398c <xTaskIncrementTick+0x14c>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	3301      	adds	r3, #1
 800385a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800385c:	4a4b      	ldr	r2, [pc, #300]	@ (800398c <xTaskIncrementTick+0x14c>)
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d121      	bne.n	80038ac <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003868:	4b49      	ldr	r3, [pc, #292]	@ (8003990 <xTaskIncrementTick+0x150>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00b      	beq.n	800388a <xTaskIncrementTick+0x4a>
	__asm volatile
 8003872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003876:	f383 8811 	msr	BASEPRI, r3
 800387a:	f3bf 8f6f 	isb	sy
 800387e:	f3bf 8f4f 	dsb	sy
 8003882:	603b      	str	r3, [r7, #0]
}
 8003884:	bf00      	nop
 8003886:	bf00      	nop
 8003888:	e7fd      	b.n	8003886 <xTaskIncrementTick+0x46>
 800388a:	4b41      	ldr	r3, [pc, #260]	@ (8003990 <xTaskIncrementTick+0x150>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	60fb      	str	r3, [r7, #12]
 8003890:	4b40      	ldr	r3, [pc, #256]	@ (8003994 <xTaskIncrementTick+0x154>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a3e      	ldr	r2, [pc, #248]	@ (8003990 <xTaskIncrementTick+0x150>)
 8003896:	6013      	str	r3, [r2, #0]
 8003898:	4a3e      	ldr	r2, [pc, #248]	@ (8003994 <xTaskIncrementTick+0x154>)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6013      	str	r3, [r2, #0]
 800389e:	4b3e      	ldr	r3, [pc, #248]	@ (8003998 <xTaskIncrementTick+0x158>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	3301      	adds	r3, #1
 80038a4:	4a3c      	ldr	r2, [pc, #240]	@ (8003998 <xTaskIncrementTick+0x158>)
 80038a6:	6013      	str	r3, [r2, #0]
 80038a8:	f000 fae2 	bl	8003e70 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80038ac:	4b3b      	ldr	r3, [pc, #236]	@ (800399c <xTaskIncrementTick+0x15c>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d349      	bcc.n	800394a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038b6:	4b36      	ldr	r3, [pc, #216]	@ (8003990 <xTaskIncrementTick+0x150>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d104      	bne.n	80038ca <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038c0:	4b36      	ldr	r3, [pc, #216]	@ (800399c <xTaskIncrementTick+0x15c>)
 80038c2:	f04f 32ff 	mov.w	r2, #4294967295
 80038c6:	601a      	str	r2, [r3, #0]
					break;
 80038c8:	e03f      	b.n	800394a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038ca:	4b31      	ldr	r3, [pc, #196]	@ (8003990 <xTaskIncrementTick+0x150>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d203      	bcs.n	80038ea <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80038e2:	4a2e      	ldr	r2, [pc, #184]	@ (800399c <xTaskIncrementTick+0x15c>)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80038e8:	e02f      	b.n	800394a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	3304      	adds	r3, #4
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7fe fd46 	bl	8002380 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d004      	beq.n	8003906 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	3318      	adds	r3, #24
 8003900:	4618      	mov	r0, r3
 8003902:	f7fe fd3d 	bl	8002380 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800390a:	4b25      	ldr	r3, [pc, #148]	@ (80039a0 <xTaskIncrementTick+0x160>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	429a      	cmp	r2, r3
 8003910:	d903      	bls.n	800391a <xTaskIncrementTick+0xda>
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003916:	4a22      	ldr	r2, [pc, #136]	@ (80039a0 <xTaskIncrementTick+0x160>)
 8003918:	6013      	str	r3, [r2, #0]
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800391e:	4613      	mov	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	4413      	add	r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	4a1f      	ldr	r2, [pc, #124]	@ (80039a4 <xTaskIncrementTick+0x164>)
 8003928:	441a      	add	r2, r3
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	3304      	adds	r3, #4
 800392e:	4619      	mov	r1, r3
 8003930:	4610      	mov	r0, r2
 8003932:	f7fe fcc8 	bl	80022c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800393a:	4b1b      	ldr	r3, [pc, #108]	@ (80039a8 <xTaskIncrementTick+0x168>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003940:	429a      	cmp	r2, r3
 8003942:	d3b8      	bcc.n	80038b6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003944:	2301      	movs	r3, #1
 8003946:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003948:	e7b5      	b.n	80038b6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800394a:	4b17      	ldr	r3, [pc, #92]	@ (80039a8 <xTaskIncrementTick+0x168>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003950:	4914      	ldr	r1, [pc, #80]	@ (80039a4 <xTaskIncrementTick+0x164>)
 8003952:	4613      	mov	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	4413      	add	r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	440b      	add	r3, r1
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d901      	bls.n	8003966 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003962:	2301      	movs	r3, #1
 8003964:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003966:	4b11      	ldr	r3, [pc, #68]	@ (80039ac <xTaskIncrementTick+0x16c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d007      	beq.n	800397e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800396e:	2301      	movs	r3, #1
 8003970:	617b      	str	r3, [r7, #20]
 8003972:	e004      	b.n	800397e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003974:	4b0e      	ldr	r3, [pc, #56]	@ (80039b0 <xTaskIncrementTick+0x170>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	3301      	adds	r3, #1
 800397a:	4a0d      	ldr	r2, [pc, #52]	@ (80039b0 <xTaskIncrementTick+0x170>)
 800397c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800397e:	697b      	ldr	r3, [r7, #20]
}
 8003980:	4618      	mov	r0, r3
 8003982:	3718      	adds	r7, #24
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	20000d64 	.word	0x20000d64
 800398c:	20000d40 	.word	0x20000d40
 8003990:	20000cf4 	.word	0x20000cf4
 8003994:	20000cf8 	.word	0x20000cf8
 8003998:	20000d54 	.word	0x20000d54
 800399c:	20000d5c 	.word	0x20000d5c
 80039a0:	20000d44 	.word	0x20000d44
 80039a4:	2000086c 	.word	0x2000086c
 80039a8:	20000868 	.word	0x20000868
 80039ac:	20000d50 	.word	0x20000d50
 80039b0:	20000d4c 	.word	0x20000d4c

080039b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80039ba:	4b2b      	ldr	r3, [pc, #172]	@ (8003a68 <vTaskSwitchContext+0xb4>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d003      	beq.n	80039ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80039c2:	4b2a      	ldr	r3, [pc, #168]	@ (8003a6c <vTaskSwitchContext+0xb8>)
 80039c4:	2201      	movs	r2, #1
 80039c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80039c8:	e047      	b.n	8003a5a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80039ca:	4b28      	ldr	r3, [pc, #160]	@ (8003a6c <vTaskSwitchContext+0xb8>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039d0:	4b27      	ldr	r3, [pc, #156]	@ (8003a70 <vTaskSwitchContext+0xbc>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	60fb      	str	r3, [r7, #12]
 80039d6:	e011      	b.n	80039fc <vTaskSwitchContext+0x48>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10b      	bne.n	80039f6 <vTaskSwitchContext+0x42>
	__asm volatile
 80039de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039e2:	f383 8811 	msr	BASEPRI, r3
 80039e6:	f3bf 8f6f 	isb	sy
 80039ea:	f3bf 8f4f 	dsb	sy
 80039ee:	607b      	str	r3, [r7, #4]
}
 80039f0:	bf00      	nop
 80039f2:	bf00      	nop
 80039f4:	e7fd      	b.n	80039f2 <vTaskSwitchContext+0x3e>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	3b01      	subs	r3, #1
 80039fa:	60fb      	str	r3, [r7, #12]
 80039fc:	491d      	ldr	r1, [pc, #116]	@ (8003a74 <vTaskSwitchContext+0xc0>)
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	4613      	mov	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4413      	add	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	440b      	add	r3, r1
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d0e3      	beq.n	80039d8 <vTaskSwitchContext+0x24>
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	4613      	mov	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4a16      	ldr	r2, [pc, #88]	@ (8003a74 <vTaskSwitchContext+0xc0>)
 8003a1c:	4413      	add	r3, r2
 8003a1e:	60bb      	str	r3, [r7, #8]
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	685a      	ldr	r2, [r3, #4]
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	605a      	str	r2, [r3, #4]
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	685a      	ldr	r2, [r3, #4]
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	3308      	adds	r3, #8
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d104      	bne.n	8003a40 <vTaskSwitchContext+0x8c>
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	605a      	str	r2, [r3, #4]
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	4a0c      	ldr	r2, [pc, #48]	@ (8003a78 <vTaskSwitchContext+0xc4>)
 8003a48:	6013      	str	r3, [r2, #0]
 8003a4a:	4a09      	ldr	r2, [pc, #36]	@ (8003a70 <vTaskSwitchContext+0xbc>)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003a50:	4b09      	ldr	r3, [pc, #36]	@ (8003a78 <vTaskSwitchContext+0xc4>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	3354      	adds	r3, #84	@ 0x54
 8003a56:	4a09      	ldr	r2, [pc, #36]	@ (8003a7c <vTaskSwitchContext+0xc8>)
 8003a58:	6013      	str	r3, [r2, #0]
}
 8003a5a:	bf00      	nop
 8003a5c:	3714      	adds	r7, #20
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	20000d64 	.word	0x20000d64
 8003a6c:	20000d50 	.word	0x20000d50
 8003a70:	20000d44 	.word	0x20000d44
 8003a74:	2000086c 	.word	0x2000086c
 8003a78:	20000868 	.word	0x20000868
 8003a7c:	20000010 	.word	0x20000010

08003a80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10b      	bne.n	8003aa8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a94:	f383 8811 	msr	BASEPRI, r3
 8003a98:	f3bf 8f6f 	isb	sy
 8003a9c:	f3bf 8f4f 	dsb	sy
 8003aa0:	60fb      	str	r3, [r7, #12]
}
 8003aa2:	bf00      	nop
 8003aa4:	bf00      	nop
 8003aa6:	e7fd      	b.n	8003aa4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003aa8:	4b07      	ldr	r3, [pc, #28]	@ (8003ac8 <vTaskPlaceOnEventList+0x48>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	3318      	adds	r3, #24
 8003aae:	4619      	mov	r1, r3
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f7fe fc2c 	bl	800230e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	6838      	ldr	r0, [r7, #0]
 8003aba:	f000 fb97 	bl	80041ec <prvAddCurrentTaskToDelayedList>
}
 8003abe:	bf00      	nop
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	20000868 	.word	0x20000868

08003acc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10b      	bne.n	8003af6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ae2:	f383 8811 	msr	BASEPRI, r3
 8003ae6:	f3bf 8f6f 	isb	sy
 8003aea:	f3bf 8f4f 	dsb	sy
 8003aee:	617b      	str	r3, [r7, #20]
}
 8003af0:	bf00      	nop
 8003af2:	bf00      	nop
 8003af4:	e7fd      	b.n	8003af2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003af6:	4b0a      	ldr	r3, [pc, #40]	@ (8003b20 <vTaskPlaceOnEventListRestricted+0x54>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	3318      	adds	r3, #24
 8003afc:	4619      	mov	r1, r3
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f7fe fbe1 	bl	80022c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d002      	beq.n	8003b10 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b0e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003b10:	6879      	ldr	r1, [r7, #4]
 8003b12:	68b8      	ldr	r0, [r7, #8]
 8003b14:	f000 fb6a 	bl	80041ec <prvAddCurrentTaskToDelayedList>
	}
 8003b18:	bf00      	nop
 8003b1a:	3718      	adds	r7, #24
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	20000868 	.word	0x20000868

08003b24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b086      	sub	sp, #24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10b      	bne.n	8003b52 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b3e:	f383 8811 	msr	BASEPRI, r3
 8003b42:	f3bf 8f6f 	isb	sy
 8003b46:	f3bf 8f4f 	dsb	sy
 8003b4a:	60fb      	str	r3, [r7, #12]
}
 8003b4c:	bf00      	nop
 8003b4e:	bf00      	nop
 8003b50:	e7fd      	b.n	8003b4e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	3318      	adds	r3, #24
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7fe fc12 	bl	8002380 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b5c:	4b1d      	ldr	r3, [pc, #116]	@ (8003bd4 <xTaskRemoveFromEventList+0xb0>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d11d      	bne.n	8003ba0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	3304      	adds	r3, #4
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7fe fc09 	bl	8002380 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b72:	4b19      	ldr	r3, [pc, #100]	@ (8003bd8 <xTaskRemoveFromEventList+0xb4>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d903      	bls.n	8003b82 <xTaskRemoveFromEventList+0x5e>
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b7e:	4a16      	ldr	r2, [pc, #88]	@ (8003bd8 <xTaskRemoveFromEventList+0xb4>)
 8003b80:	6013      	str	r3, [r2, #0]
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b86:	4613      	mov	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4413      	add	r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	4a13      	ldr	r2, [pc, #76]	@ (8003bdc <xTaskRemoveFromEventList+0xb8>)
 8003b90:	441a      	add	r2, r3
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	3304      	adds	r3, #4
 8003b96:	4619      	mov	r1, r3
 8003b98:	4610      	mov	r0, r2
 8003b9a:	f7fe fb94 	bl	80022c6 <vListInsertEnd>
 8003b9e:	e005      	b.n	8003bac <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	3318      	adds	r3, #24
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	480e      	ldr	r0, [pc, #56]	@ (8003be0 <xTaskRemoveFromEventList+0xbc>)
 8003ba8:	f7fe fb8d 	bl	80022c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8003be4 <xTaskRemoveFromEventList+0xc0>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d905      	bls.n	8003bc6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8003be8 <xTaskRemoveFromEventList+0xc4>)
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]
 8003bc4:	e001      	b.n	8003bca <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003bca:	697b      	ldr	r3, [r7, #20]
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3718      	adds	r7, #24
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	20000d64 	.word	0x20000d64
 8003bd8:	20000d44 	.word	0x20000d44
 8003bdc:	2000086c 	.word	0x2000086c
 8003be0:	20000cfc 	.word	0x20000cfc
 8003be4:	20000868 	.word	0x20000868
 8003be8:	20000d50 	.word	0x20000d50

08003bec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003bf4:	4b06      	ldr	r3, [pc, #24]	@ (8003c10 <vTaskInternalSetTimeOutState+0x24>)
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003bfc:	4b05      	ldr	r3, [pc, #20]	@ (8003c14 <vTaskInternalSetTimeOutState+0x28>)
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	605a      	str	r2, [r3, #4]
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr
 8003c10:	20000d54 	.word	0x20000d54
 8003c14:	20000d40 	.word	0x20000d40

08003c18 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b088      	sub	sp, #32
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d10b      	bne.n	8003c40 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c2c:	f383 8811 	msr	BASEPRI, r3
 8003c30:	f3bf 8f6f 	isb	sy
 8003c34:	f3bf 8f4f 	dsb	sy
 8003c38:	613b      	str	r3, [r7, #16]
}
 8003c3a:	bf00      	nop
 8003c3c:	bf00      	nop
 8003c3e:	e7fd      	b.n	8003c3c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10b      	bne.n	8003c5e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003c46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c4a:	f383 8811 	msr	BASEPRI, r3
 8003c4e:	f3bf 8f6f 	isb	sy
 8003c52:	f3bf 8f4f 	dsb	sy
 8003c56:	60fb      	str	r3, [r7, #12]
}
 8003c58:	bf00      	nop
 8003c5a:	bf00      	nop
 8003c5c:	e7fd      	b.n	8003c5a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003c5e:	f000 ffa3 	bl	8004ba8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003c62:	4b1d      	ldr	r3, [pc, #116]	@ (8003cd8 <xTaskCheckForTimeOut+0xc0>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c7a:	d102      	bne.n	8003c82 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	61fb      	str	r3, [r7, #28]
 8003c80:	e023      	b.n	8003cca <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	4b15      	ldr	r3, [pc, #84]	@ (8003cdc <xTaskCheckForTimeOut+0xc4>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d007      	beq.n	8003c9e <xTaskCheckForTimeOut+0x86>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	69ba      	ldr	r2, [r7, #24]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d302      	bcc.n	8003c9e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	61fb      	str	r3, [r7, #28]
 8003c9c:	e015      	b.n	8003cca <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d20b      	bcs.n	8003cc0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	1ad2      	subs	r2, r2, r3
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f7ff ff99 	bl	8003bec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	61fb      	str	r3, [r7, #28]
 8003cbe:	e004      	b.n	8003cca <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003cca:	f000 ff9f 	bl	8004c0c <vPortExitCritical>

	return xReturn;
 8003cce:	69fb      	ldr	r3, [r7, #28]
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3720      	adds	r7, #32
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	20000d40 	.word	0x20000d40
 8003cdc:	20000d54 	.word	0x20000d54

08003ce0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003ce4:	4b03      	ldr	r3, [pc, #12]	@ (8003cf4 <vTaskMissedYield+0x14>)
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	601a      	str	r2, [r3, #0]
}
 8003cea:	bf00      	nop
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr
 8003cf4:	20000d50 	.word	0x20000d50

08003cf8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003d00:	f000 f852 	bl	8003da8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003d04:	4b06      	ldr	r3, [pc, #24]	@ (8003d20 <prvIdleTask+0x28>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d9f9      	bls.n	8003d00 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003d0c:	4b05      	ldr	r3, [pc, #20]	@ (8003d24 <prvIdleTask+0x2c>)
 8003d0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	f3bf 8f4f 	dsb	sy
 8003d18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003d1c:	e7f0      	b.n	8003d00 <prvIdleTask+0x8>
 8003d1e:	bf00      	nop
 8003d20:	2000086c 	.word	0x2000086c
 8003d24:	e000ed04 	.word	0xe000ed04

08003d28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d2e:	2300      	movs	r3, #0
 8003d30:	607b      	str	r3, [r7, #4]
 8003d32:	e00c      	b.n	8003d4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	4613      	mov	r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	4413      	add	r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	4a12      	ldr	r2, [pc, #72]	@ (8003d88 <prvInitialiseTaskLists+0x60>)
 8003d40:	4413      	add	r3, r2
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7fe fa92 	bl	800226c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	607b      	str	r3, [r7, #4]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b37      	cmp	r3, #55	@ 0x37
 8003d52:	d9ef      	bls.n	8003d34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003d54:	480d      	ldr	r0, [pc, #52]	@ (8003d8c <prvInitialiseTaskLists+0x64>)
 8003d56:	f7fe fa89 	bl	800226c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003d5a:	480d      	ldr	r0, [pc, #52]	@ (8003d90 <prvInitialiseTaskLists+0x68>)
 8003d5c:	f7fe fa86 	bl	800226c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003d60:	480c      	ldr	r0, [pc, #48]	@ (8003d94 <prvInitialiseTaskLists+0x6c>)
 8003d62:	f7fe fa83 	bl	800226c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003d66:	480c      	ldr	r0, [pc, #48]	@ (8003d98 <prvInitialiseTaskLists+0x70>)
 8003d68:	f7fe fa80 	bl	800226c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003d6c:	480b      	ldr	r0, [pc, #44]	@ (8003d9c <prvInitialiseTaskLists+0x74>)
 8003d6e:	f7fe fa7d 	bl	800226c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003d72:	4b0b      	ldr	r3, [pc, #44]	@ (8003da0 <prvInitialiseTaskLists+0x78>)
 8003d74:	4a05      	ldr	r2, [pc, #20]	@ (8003d8c <prvInitialiseTaskLists+0x64>)
 8003d76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003d78:	4b0a      	ldr	r3, [pc, #40]	@ (8003da4 <prvInitialiseTaskLists+0x7c>)
 8003d7a:	4a05      	ldr	r2, [pc, #20]	@ (8003d90 <prvInitialiseTaskLists+0x68>)
 8003d7c:	601a      	str	r2, [r3, #0]
}
 8003d7e:	bf00      	nop
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	2000086c 	.word	0x2000086c
 8003d8c:	20000ccc 	.word	0x20000ccc
 8003d90:	20000ce0 	.word	0x20000ce0
 8003d94:	20000cfc 	.word	0x20000cfc
 8003d98:	20000d10 	.word	0x20000d10
 8003d9c:	20000d28 	.word	0x20000d28
 8003da0:	20000cf4 	.word	0x20000cf4
 8003da4:	20000cf8 	.word	0x20000cf8

08003da8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003dae:	e019      	b.n	8003de4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003db0:	f000 fefa 	bl	8004ba8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003db4:	4b10      	ldr	r3, [pc, #64]	@ (8003df8 <prvCheckTasksWaitingTermination+0x50>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3304      	adds	r3, #4
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7fe fadd 	bl	8002380 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8003dfc <prvCheckTasksWaitingTermination+0x54>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	4a0b      	ldr	r2, [pc, #44]	@ (8003dfc <prvCheckTasksWaitingTermination+0x54>)
 8003dce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8003e00 <prvCheckTasksWaitingTermination+0x58>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	4a0a      	ldr	r2, [pc, #40]	@ (8003e00 <prvCheckTasksWaitingTermination+0x58>)
 8003dd8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003dda:	f000 ff17 	bl	8004c0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f810 	bl	8003e04 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003de4:	4b06      	ldr	r3, [pc, #24]	@ (8003e00 <prvCheckTasksWaitingTermination+0x58>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1e1      	bne.n	8003db0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003dec:	bf00      	nop
 8003dee:	bf00      	nop
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	20000d10 	.word	0x20000d10
 8003dfc:	20000d3c 	.word	0x20000d3c
 8003e00:	20000d24 	.word	0x20000d24

08003e04 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	3354      	adds	r3, #84	@ 0x54
 8003e10:	4618      	mov	r0, r3
 8003e12:	f001 f9e1 	bl	80051d8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d108      	bne.n	8003e32 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e24:	4618      	mov	r0, r3
 8003e26:	f001 f8af 	bl	8004f88 <vPortFree>
				vPortFree( pxTCB );
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f001 f8ac 	bl	8004f88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003e30:	e019      	b.n	8003e66 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d103      	bne.n	8003e44 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f001 f8a3 	bl	8004f88 <vPortFree>
	}
 8003e42:	e010      	b.n	8003e66 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d00b      	beq.n	8003e66 <prvDeleteTCB+0x62>
	__asm volatile
 8003e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e52:	f383 8811 	msr	BASEPRI, r3
 8003e56:	f3bf 8f6f 	isb	sy
 8003e5a:	f3bf 8f4f 	dsb	sy
 8003e5e:	60fb      	str	r3, [r7, #12]
}
 8003e60:	bf00      	nop
 8003e62:	bf00      	nop
 8003e64:	e7fd      	b.n	8003e62 <prvDeleteTCB+0x5e>
	}
 8003e66:	bf00      	nop
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
	...

08003e70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e76:	4b0c      	ldr	r3, [pc, #48]	@ (8003ea8 <prvResetNextTaskUnblockTime+0x38>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d104      	bne.n	8003e8a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003e80:	4b0a      	ldr	r3, [pc, #40]	@ (8003eac <prvResetNextTaskUnblockTime+0x3c>)
 8003e82:	f04f 32ff 	mov.w	r2, #4294967295
 8003e86:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003e88:	e008      	b.n	8003e9c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e8a:	4b07      	ldr	r3, [pc, #28]	@ (8003ea8 <prvResetNextTaskUnblockTime+0x38>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	4a04      	ldr	r2, [pc, #16]	@ (8003eac <prvResetNextTaskUnblockTime+0x3c>)
 8003e9a:	6013      	str	r3, [r2, #0]
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr
 8003ea8:	20000cf4 	.word	0x20000cf4
 8003eac:	20000d5c 	.word	0x20000d5c

08003eb0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8003eb6:	4b05      	ldr	r3, [pc, #20]	@ (8003ecc <xTaskGetCurrentTaskHandle+0x1c>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	607b      	str	r3, [r7, #4]

		return xReturn;
 8003ebc:	687b      	ldr	r3, [r7, #4]
	}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	20000868 	.word	0x20000868

08003ed0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8003f04 <xTaskGetSchedulerState+0x34>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d102      	bne.n	8003ee4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	607b      	str	r3, [r7, #4]
 8003ee2:	e008      	b.n	8003ef6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ee4:	4b08      	ldr	r3, [pc, #32]	@ (8003f08 <xTaskGetSchedulerState+0x38>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d102      	bne.n	8003ef2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003eec:	2302      	movs	r3, #2
 8003eee:	607b      	str	r3, [r7, #4]
 8003ef0:	e001      	b.n	8003ef6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003ef6:	687b      	ldr	r3, [r7, #4]
	}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr
 8003f04:	20000d48 	.word	0x20000d48
 8003f08:	20000d64 	.word	0x20000d64

08003f0c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d051      	beq.n	8003fc6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f26:	4b2a      	ldr	r3, [pc, #168]	@ (8003fd0 <xTaskPriorityInherit+0xc4>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d241      	bcs.n	8003fb4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	db06      	blt.n	8003f46 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f38:	4b25      	ldr	r3, [pc, #148]	@ (8003fd0 <xTaskPriorityInherit+0xc4>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f3e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	6959      	ldr	r1, [r3, #20]
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f4e:	4613      	mov	r3, r2
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	4413      	add	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4a1f      	ldr	r2, [pc, #124]	@ (8003fd4 <xTaskPriorityInherit+0xc8>)
 8003f58:	4413      	add	r3, r2
 8003f5a:	4299      	cmp	r1, r3
 8003f5c:	d122      	bne.n	8003fa4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	3304      	adds	r3, #4
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7fe fa0c 	bl	8002380 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003f68:	4b19      	ldr	r3, [pc, #100]	@ (8003fd0 <xTaskPriorityInherit+0xc4>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f76:	4b18      	ldr	r3, [pc, #96]	@ (8003fd8 <xTaskPriorityInherit+0xcc>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d903      	bls.n	8003f86 <xTaskPriorityInherit+0x7a>
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f82:	4a15      	ldr	r2, [pc, #84]	@ (8003fd8 <xTaskPriorityInherit+0xcc>)
 8003f84:	6013      	str	r3, [r2, #0]
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	4413      	add	r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	4a10      	ldr	r2, [pc, #64]	@ (8003fd4 <xTaskPriorityInherit+0xc8>)
 8003f94:	441a      	add	r2, r3
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	3304      	adds	r3, #4
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	4610      	mov	r0, r2
 8003f9e:	f7fe f992 	bl	80022c6 <vListInsertEnd>
 8003fa2:	e004      	b.n	8003fae <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003fa4:	4b0a      	ldr	r3, [pc, #40]	@ (8003fd0 <xTaskPriorityInherit+0xc4>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	60fb      	str	r3, [r7, #12]
 8003fb2:	e008      	b.n	8003fc6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003fb8:	4b05      	ldr	r3, [pc, #20]	@ (8003fd0 <xTaskPriorityInherit+0xc4>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d201      	bcs.n	8003fc6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
	}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	20000868 	.word	0x20000868
 8003fd4:	2000086c 	.word	0x2000086c
 8003fd8:	20000d44 	.word	0x20000d44

08003fdc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b086      	sub	sp, #24
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d058      	beq.n	80040a4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003ff2:	4b2f      	ldr	r3, [pc, #188]	@ (80040b0 <xTaskPriorityDisinherit+0xd4>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d00b      	beq.n	8004014 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004000:	f383 8811 	msr	BASEPRI, r3
 8004004:	f3bf 8f6f 	isb	sy
 8004008:	f3bf 8f4f 	dsb	sy
 800400c:	60fb      	str	r3, [r7, #12]
}
 800400e:	bf00      	nop
 8004010:	bf00      	nop
 8004012:	e7fd      	b.n	8004010 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004018:	2b00      	cmp	r3, #0
 800401a:	d10b      	bne.n	8004034 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800401c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004020:	f383 8811 	msr	BASEPRI, r3
 8004024:	f3bf 8f6f 	isb	sy
 8004028:	f3bf 8f4f 	dsb	sy
 800402c:	60bb      	str	r3, [r7, #8]
}
 800402e:	bf00      	nop
 8004030:	bf00      	nop
 8004032:	e7fd      	b.n	8004030 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004038:	1e5a      	subs	r2, r3, #1
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004046:	429a      	cmp	r2, r3
 8004048:	d02c      	beq.n	80040a4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800404e:	2b00      	cmp	r3, #0
 8004050:	d128      	bne.n	80040a4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	3304      	adds	r3, #4
 8004056:	4618      	mov	r0, r3
 8004058:	f7fe f992 	bl	8002380 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004068:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004074:	4b0f      	ldr	r3, [pc, #60]	@ (80040b4 <xTaskPriorityDisinherit+0xd8>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	429a      	cmp	r2, r3
 800407a:	d903      	bls.n	8004084 <xTaskPriorityDisinherit+0xa8>
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004080:	4a0c      	ldr	r2, [pc, #48]	@ (80040b4 <xTaskPriorityDisinherit+0xd8>)
 8004082:	6013      	str	r3, [r2, #0]
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004088:	4613      	mov	r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	4413      	add	r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	4a09      	ldr	r2, [pc, #36]	@ (80040b8 <xTaskPriorityDisinherit+0xdc>)
 8004092:	441a      	add	r2, r3
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	3304      	adds	r3, #4
 8004098:	4619      	mov	r1, r3
 800409a:	4610      	mov	r0, r2
 800409c:	f7fe f913 	bl	80022c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80040a0:	2301      	movs	r3, #1
 80040a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80040a4:	697b      	ldr	r3, [r7, #20]
	}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3718      	adds	r7, #24
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	20000868 	.word	0x20000868
 80040b4:	20000d44 	.word	0x20000d44
 80040b8:	2000086c 	.word	0x2000086c

080040bc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b088      	sub	sp, #32
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80040ca:	2301      	movs	r3, #1
 80040cc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d06c      	beq.n	80041ae <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10b      	bne.n	80040f4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80040dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040e0:	f383 8811 	msr	BASEPRI, r3
 80040e4:	f3bf 8f6f 	isb	sy
 80040e8:	f3bf 8f4f 	dsb	sy
 80040ec:	60fb      	str	r3, [r7, #12]
}
 80040ee:	bf00      	nop
 80040f0:	bf00      	nop
 80040f2:	e7fd      	b.n	80040f0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040f8:	683a      	ldr	r2, [r7, #0]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d902      	bls.n	8004104 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	61fb      	str	r3, [r7, #28]
 8004102:	e002      	b.n	800410a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004108:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800410e:	69fa      	ldr	r2, [r7, #28]
 8004110:	429a      	cmp	r2, r3
 8004112:	d04c      	beq.n	80041ae <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	429a      	cmp	r2, r3
 800411c:	d147      	bne.n	80041ae <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800411e:	4b26      	ldr	r3, [pc, #152]	@ (80041b8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	429a      	cmp	r2, r3
 8004126:	d10b      	bne.n	8004140 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8004128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800412c:	f383 8811 	msr	BASEPRI, r3
 8004130:	f3bf 8f6f 	isb	sy
 8004134:	f3bf 8f4f 	dsb	sy
 8004138:	60bb      	str	r3, [r7, #8]
}
 800413a:	bf00      	nop
 800413c:	bf00      	nop
 800413e:	e7fd      	b.n	800413c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004144:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	69fa      	ldr	r2, [r7, #28]
 800414a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	2b00      	cmp	r3, #0
 8004152:	db04      	blt.n	800415e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	6959      	ldr	r1, [r3, #20]
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	4613      	mov	r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4413      	add	r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	4a13      	ldr	r2, [pc, #76]	@ (80041bc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800416e:	4413      	add	r3, r2
 8004170:	4299      	cmp	r1, r3
 8004172:	d11c      	bne.n	80041ae <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	3304      	adds	r3, #4
 8004178:	4618      	mov	r0, r3
 800417a:	f7fe f901 	bl	8002380 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004182:	4b0f      	ldr	r3, [pc, #60]	@ (80041c0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	429a      	cmp	r2, r3
 8004188:	d903      	bls.n	8004192 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800418e:	4a0c      	ldr	r2, [pc, #48]	@ (80041c0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004190:	6013      	str	r3, [r2, #0]
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004196:	4613      	mov	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4413      	add	r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	4a07      	ldr	r2, [pc, #28]	@ (80041bc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80041a0:	441a      	add	r2, r3
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	3304      	adds	r3, #4
 80041a6:	4619      	mov	r1, r3
 80041a8:	4610      	mov	r0, r2
 80041aa:	f7fe f88c 	bl	80022c6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80041ae:	bf00      	nop
 80041b0:	3720      	adds	r7, #32
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	20000868 	.word	0x20000868
 80041bc:	2000086c 	.word	0x2000086c
 80041c0:	20000d44 	.word	0x20000d44

080041c4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80041c8:	4b07      	ldr	r3, [pc, #28]	@ (80041e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d004      	beq.n	80041da <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80041d0:	4b05      	ldr	r3, [pc, #20]	@ (80041e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80041d6:	3201      	adds	r2, #1
 80041d8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80041da:	4b03      	ldr	r3, [pc, #12]	@ (80041e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80041dc:	681b      	ldr	r3, [r3, #0]
	}
 80041de:	4618      	mov	r0, r3
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr
 80041e8:	20000868 	.word	0x20000868

080041ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80041f6:	4b21      	ldr	r3, [pc, #132]	@ (800427c <prvAddCurrentTaskToDelayedList+0x90>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041fc:	4b20      	ldr	r3, [pc, #128]	@ (8004280 <prvAddCurrentTaskToDelayedList+0x94>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	3304      	adds	r3, #4
 8004202:	4618      	mov	r0, r3
 8004204:	f7fe f8bc 	bl	8002380 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800420e:	d10a      	bne.n	8004226 <prvAddCurrentTaskToDelayedList+0x3a>
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d007      	beq.n	8004226 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004216:	4b1a      	ldr	r3, [pc, #104]	@ (8004280 <prvAddCurrentTaskToDelayedList+0x94>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	3304      	adds	r3, #4
 800421c:	4619      	mov	r1, r3
 800421e:	4819      	ldr	r0, [pc, #100]	@ (8004284 <prvAddCurrentTaskToDelayedList+0x98>)
 8004220:	f7fe f851 	bl	80022c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004224:	e026      	b.n	8004274 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4413      	add	r3, r2
 800422c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800422e:	4b14      	ldr	r3, [pc, #80]	@ (8004280 <prvAddCurrentTaskToDelayedList+0x94>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68ba      	ldr	r2, [r7, #8]
 8004234:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004236:	68ba      	ldr	r2, [r7, #8]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	429a      	cmp	r2, r3
 800423c:	d209      	bcs.n	8004252 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800423e:	4b12      	ldr	r3, [pc, #72]	@ (8004288 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	4b0f      	ldr	r3, [pc, #60]	@ (8004280 <prvAddCurrentTaskToDelayedList+0x94>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	3304      	adds	r3, #4
 8004248:	4619      	mov	r1, r3
 800424a:	4610      	mov	r0, r2
 800424c:	f7fe f85f 	bl	800230e <vListInsert>
}
 8004250:	e010      	b.n	8004274 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004252:	4b0e      	ldr	r3, [pc, #56]	@ (800428c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	4b0a      	ldr	r3, [pc, #40]	@ (8004280 <prvAddCurrentTaskToDelayedList+0x94>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	3304      	adds	r3, #4
 800425c:	4619      	mov	r1, r3
 800425e:	4610      	mov	r0, r2
 8004260:	f7fe f855 	bl	800230e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004264:	4b0a      	ldr	r3, [pc, #40]	@ (8004290 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68ba      	ldr	r2, [r7, #8]
 800426a:	429a      	cmp	r2, r3
 800426c:	d202      	bcs.n	8004274 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800426e:	4a08      	ldr	r2, [pc, #32]	@ (8004290 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	6013      	str	r3, [r2, #0]
}
 8004274:	bf00      	nop
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	20000d40 	.word	0x20000d40
 8004280:	20000868 	.word	0x20000868
 8004284:	20000d28 	.word	0x20000d28
 8004288:	20000cf8 	.word	0x20000cf8
 800428c:	20000cf4 	.word	0x20000cf4
 8004290:	20000d5c 	.word	0x20000d5c

08004294 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b08a      	sub	sp, #40	@ 0x28
 8004298:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800429a:	2300      	movs	r3, #0
 800429c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800429e:	f000 fb13 	bl	80048c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80042a2:	4b1d      	ldr	r3, [pc, #116]	@ (8004318 <xTimerCreateTimerTask+0x84>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d021      	beq.n	80042ee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80042aa:	2300      	movs	r3, #0
 80042ac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80042ae:	2300      	movs	r3, #0
 80042b0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80042b2:	1d3a      	adds	r2, r7, #4
 80042b4:	f107 0108 	add.w	r1, r7, #8
 80042b8:	f107 030c 	add.w	r3, r7, #12
 80042bc:	4618      	mov	r0, r3
 80042be:	f7fd ffbb 	bl	8002238 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80042c2:	6879      	ldr	r1, [r7, #4]
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	9202      	str	r2, [sp, #8]
 80042ca:	9301      	str	r3, [sp, #4]
 80042cc:	2302      	movs	r3, #2
 80042ce:	9300      	str	r3, [sp, #0]
 80042d0:	2300      	movs	r3, #0
 80042d2:	460a      	mov	r2, r1
 80042d4:	4911      	ldr	r1, [pc, #68]	@ (800431c <xTimerCreateTimerTask+0x88>)
 80042d6:	4812      	ldr	r0, [pc, #72]	@ (8004320 <xTimerCreateTimerTask+0x8c>)
 80042d8:	f7fe ff92 	bl	8003200 <xTaskCreateStatic>
 80042dc:	4603      	mov	r3, r0
 80042de:	4a11      	ldr	r2, [pc, #68]	@ (8004324 <xTimerCreateTimerTask+0x90>)
 80042e0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80042e2:	4b10      	ldr	r3, [pc, #64]	@ (8004324 <xTimerCreateTimerTask+0x90>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d001      	beq.n	80042ee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80042ea:	2301      	movs	r3, #1
 80042ec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d10b      	bne.n	800430c <xTimerCreateTimerTask+0x78>
	__asm volatile
 80042f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042f8:	f383 8811 	msr	BASEPRI, r3
 80042fc:	f3bf 8f6f 	isb	sy
 8004300:	f3bf 8f4f 	dsb	sy
 8004304:	613b      	str	r3, [r7, #16]
}
 8004306:	bf00      	nop
 8004308:	bf00      	nop
 800430a:	e7fd      	b.n	8004308 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800430c:	697b      	ldr	r3, [r7, #20]
}
 800430e:	4618      	mov	r0, r3
 8004310:	3718      	adds	r7, #24
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	20000d98 	.word	0x20000d98
 800431c:	080053d0 	.word	0x080053d0
 8004320:	08004461 	.word	0x08004461
 8004324:	20000d9c 	.word	0x20000d9c

08004328 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b08a      	sub	sp, #40	@ 0x28
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
 8004334:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004336:	2300      	movs	r3, #0
 8004338:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10b      	bne.n	8004358 <xTimerGenericCommand+0x30>
	__asm volatile
 8004340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004344:	f383 8811 	msr	BASEPRI, r3
 8004348:	f3bf 8f6f 	isb	sy
 800434c:	f3bf 8f4f 	dsb	sy
 8004350:	623b      	str	r3, [r7, #32]
}
 8004352:	bf00      	nop
 8004354:	bf00      	nop
 8004356:	e7fd      	b.n	8004354 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004358:	4b19      	ldr	r3, [pc, #100]	@ (80043c0 <xTimerGenericCommand+0x98>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d02a      	beq.n	80043b6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	2b05      	cmp	r3, #5
 8004370:	dc18      	bgt.n	80043a4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004372:	f7ff fdad 	bl	8003ed0 <xTaskGetSchedulerState>
 8004376:	4603      	mov	r3, r0
 8004378:	2b02      	cmp	r3, #2
 800437a:	d109      	bne.n	8004390 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800437c:	4b10      	ldr	r3, [pc, #64]	@ (80043c0 <xTimerGenericCommand+0x98>)
 800437e:	6818      	ldr	r0, [r3, #0]
 8004380:	f107 0110 	add.w	r1, r7, #16
 8004384:	2300      	movs	r3, #0
 8004386:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004388:	f7fe fa22 	bl	80027d0 <xQueueGenericSend>
 800438c:	6278      	str	r0, [r7, #36]	@ 0x24
 800438e:	e012      	b.n	80043b6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004390:	4b0b      	ldr	r3, [pc, #44]	@ (80043c0 <xTimerGenericCommand+0x98>)
 8004392:	6818      	ldr	r0, [r3, #0]
 8004394:	f107 0110 	add.w	r1, r7, #16
 8004398:	2300      	movs	r3, #0
 800439a:	2200      	movs	r2, #0
 800439c:	f7fe fa18 	bl	80027d0 <xQueueGenericSend>
 80043a0:	6278      	str	r0, [r7, #36]	@ 0x24
 80043a2:	e008      	b.n	80043b6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80043a4:	4b06      	ldr	r3, [pc, #24]	@ (80043c0 <xTimerGenericCommand+0x98>)
 80043a6:	6818      	ldr	r0, [r3, #0]
 80043a8:	f107 0110 	add.w	r1, r7, #16
 80043ac:	2300      	movs	r3, #0
 80043ae:	683a      	ldr	r2, [r7, #0]
 80043b0:	f7fe fb10 	bl	80029d4 <xQueueGenericSendFromISR>
 80043b4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80043b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3728      	adds	r7, #40	@ 0x28
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	20000d98 	.word	0x20000d98

080043c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b088      	sub	sp, #32
 80043c8:	af02      	add	r7, sp, #8
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043ce:	4b23      	ldr	r3, [pc, #140]	@ (800445c <prvProcessExpiredTimer+0x98>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	3304      	adds	r3, #4
 80043dc:	4618      	mov	r0, r3
 80043de:	f7fd ffcf 	bl	8002380 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80043e8:	f003 0304 	and.w	r3, r3, #4
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d023      	beq.n	8004438 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	699a      	ldr	r2, [r3, #24]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	18d1      	adds	r1, r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	683a      	ldr	r2, [r7, #0]
 80043fc:	6978      	ldr	r0, [r7, #20]
 80043fe:	f000 f8d5 	bl	80045ac <prvInsertTimerInActiveList>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d020      	beq.n	800444a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004408:	2300      	movs	r3, #0
 800440a:	9300      	str	r3, [sp, #0]
 800440c:	2300      	movs	r3, #0
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	2100      	movs	r1, #0
 8004412:	6978      	ldr	r0, [r7, #20]
 8004414:	f7ff ff88 	bl	8004328 <xTimerGenericCommand>
 8004418:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d114      	bne.n	800444a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004424:	f383 8811 	msr	BASEPRI, r3
 8004428:	f3bf 8f6f 	isb	sy
 800442c:	f3bf 8f4f 	dsb	sy
 8004430:	60fb      	str	r3, [r7, #12]
}
 8004432:	bf00      	nop
 8004434:	bf00      	nop
 8004436:	e7fd      	b.n	8004434 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800443e:	f023 0301 	bic.w	r3, r3, #1
 8004442:	b2da      	uxtb	r2, r3
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	6978      	ldr	r0, [r7, #20]
 8004450:	4798      	blx	r3
}
 8004452:	bf00      	nop
 8004454:	3718      	adds	r7, #24
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	20000d90 	.word	0x20000d90

08004460 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004468:	f107 0308 	add.w	r3, r7, #8
 800446c:	4618      	mov	r0, r3
 800446e:	f000 f859 	bl	8004524 <prvGetNextExpireTime>
 8004472:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	4619      	mov	r1, r3
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f000 f805 	bl	8004488 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800447e:	f000 f8d7 	bl	8004630 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004482:	bf00      	nop
 8004484:	e7f0      	b.n	8004468 <prvTimerTask+0x8>
	...

08004488 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004492:	f7ff f919 	bl	80036c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004496:	f107 0308 	add.w	r3, r7, #8
 800449a:	4618      	mov	r0, r3
 800449c:	f000 f866 	bl	800456c <prvSampleTimeNow>
 80044a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d130      	bne.n	800450a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10a      	bne.n	80044c4 <prvProcessTimerOrBlockTask+0x3c>
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d806      	bhi.n	80044c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80044b6:	f7ff f915 	bl	80036e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80044ba:	68f9      	ldr	r1, [r7, #12]
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f7ff ff81 	bl	80043c4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80044c2:	e024      	b.n	800450e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d008      	beq.n	80044dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80044ca:	4b13      	ldr	r3, [pc, #76]	@ (8004518 <prvProcessTimerOrBlockTask+0x90>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d101      	bne.n	80044d8 <prvProcessTimerOrBlockTask+0x50>
 80044d4:	2301      	movs	r3, #1
 80044d6:	e000      	b.n	80044da <prvProcessTimerOrBlockTask+0x52>
 80044d8:	2300      	movs	r3, #0
 80044da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80044dc:	4b0f      	ldr	r3, [pc, #60]	@ (800451c <prvProcessTimerOrBlockTask+0x94>)
 80044de:	6818      	ldr	r0, [r3, #0]
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	4619      	mov	r1, r3
 80044ea:	f7fe fe55 	bl	8003198 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80044ee:	f7ff f8f9 	bl	80036e4 <xTaskResumeAll>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d10a      	bne.n	800450e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80044f8:	4b09      	ldr	r3, [pc, #36]	@ (8004520 <prvProcessTimerOrBlockTask+0x98>)
 80044fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044fe:	601a      	str	r2, [r3, #0]
 8004500:	f3bf 8f4f 	dsb	sy
 8004504:	f3bf 8f6f 	isb	sy
}
 8004508:	e001      	b.n	800450e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800450a:	f7ff f8eb 	bl	80036e4 <xTaskResumeAll>
}
 800450e:	bf00      	nop
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	20000d94 	.word	0x20000d94
 800451c:	20000d98 	.word	0x20000d98
 8004520:	e000ed04 	.word	0xe000ed04

08004524 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800452c:	4b0e      	ldr	r3, [pc, #56]	@ (8004568 <prvGetNextExpireTime+0x44>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <prvGetNextExpireTime+0x16>
 8004536:	2201      	movs	r2, #1
 8004538:	e000      	b.n	800453c <prvGetNextExpireTime+0x18>
 800453a:	2200      	movs	r2, #0
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d105      	bne.n	8004554 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004548:	4b07      	ldr	r3, [pc, #28]	@ (8004568 <prvGetNextExpireTime+0x44>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	60fb      	str	r3, [r7, #12]
 8004552:	e001      	b.n	8004558 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004554:	2300      	movs	r3, #0
 8004556:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004558:	68fb      	ldr	r3, [r7, #12]
}
 800455a:	4618      	mov	r0, r3
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	20000d90 	.word	0x20000d90

0800456c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004574:	f7ff f954 	bl	8003820 <xTaskGetTickCount>
 8004578:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800457a:	4b0b      	ldr	r3, [pc, #44]	@ (80045a8 <prvSampleTimeNow+0x3c>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	429a      	cmp	r2, r3
 8004582:	d205      	bcs.n	8004590 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004584:	f000 f93a 	bl	80047fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	e002      	b.n	8004596 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004596:	4a04      	ldr	r2, [pc, #16]	@ (80045a8 <prvSampleTimeNow+0x3c>)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800459c:	68fb      	ldr	r3, [r7, #12]
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	20000da0 	.word	0x20000da0

080045ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b086      	sub	sp, #24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
 80045b8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80045ba:	2300      	movs	r3, #0
 80045bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	68ba      	ldr	r2, [r7, #8]
 80045c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d812      	bhi.n	80045f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	1ad2      	subs	r2, r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d302      	bcc.n	80045e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80045e0:	2301      	movs	r3, #1
 80045e2:	617b      	str	r3, [r7, #20]
 80045e4:	e01b      	b.n	800461e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80045e6:	4b10      	ldr	r3, [pc, #64]	@ (8004628 <prvInsertTimerInActiveList+0x7c>)
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	3304      	adds	r3, #4
 80045ee:	4619      	mov	r1, r3
 80045f0:	4610      	mov	r0, r2
 80045f2:	f7fd fe8c 	bl	800230e <vListInsert>
 80045f6:	e012      	b.n	800461e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d206      	bcs.n	800460e <prvInsertTimerInActiveList+0x62>
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	429a      	cmp	r2, r3
 8004606:	d302      	bcc.n	800460e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004608:	2301      	movs	r3, #1
 800460a:	617b      	str	r3, [r7, #20]
 800460c:	e007      	b.n	800461e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800460e:	4b07      	ldr	r3, [pc, #28]	@ (800462c <prvInsertTimerInActiveList+0x80>)
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	3304      	adds	r3, #4
 8004616:	4619      	mov	r1, r3
 8004618:	4610      	mov	r0, r2
 800461a:	f7fd fe78 	bl	800230e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800461e:	697b      	ldr	r3, [r7, #20]
}
 8004620:	4618      	mov	r0, r3
 8004622:	3718      	adds	r7, #24
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	20000d94 	.word	0x20000d94
 800462c:	20000d90 	.word	0x20000d90

08004630 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b08e      	sub	sp, #56	@ 0x38
 8004634:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004636:	e0ce      	b.n	80047d6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	da19      	bge.n	8004672 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800463e:	1d3b      	adds	r3, r7, #4
 8004640:	3304      	adds	r3, #4
 8004642:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10b      	bne.n	8004662 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800464a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800464e:	f383 8811 	msr	BASEPRI, r3
 8004652:	f3bf 8f6f 	isb	sy
 8004656:	f3bf 8f4f 	dsb	sy
 800465a:	61fb      	str	r3, [r7, #28]
}
 800465c:	bf00      	nop
 800465e:	bf00      	nop
 8004660:	e7fd      	b.n	800465e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004668:	6850      	ldr	r0, [r2, #4]
 800466a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800466c:	6892      	ldr	r2, [r2, #8]
 800466e:	4611      	mov	r1, r2
 8004670:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2b00      	cmp	r3, #0
 8004676:	f2c0 80ae 	blt.w	80047d6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800467e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d004      	beq.n	8004690 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004688:	3304      	adds	r3, #4
 800468a:	4618      	mov	r0, r3
 800468c:	f7fd fe78 	bl	8002380 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004690:	463b      	mov	r3, r7
 8004692:	4618      	mov	r0, r3
 8004694:	f7ff ff6a 	bl	800456c <prvSampleTimeNow>
 8004698:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b09      	cmp	r3, #9
 800469e:	f200 8097 	bhi.w	80047d0 <prvProcessReceivedCommands+0x1a0>
 80046a2:	a201      	add	r2, pc, #4	@ (adr r2, 80046a8 <prvProcessReceivedCommands+0x78>)
 80046a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a8:	080046d1 	.word	0x080046d1
 80046ac:	080046d1 	.word	0x080046d1
 80046b0:	080046d1 	.word	0x080046d1
 80046b4:	08004747 	.word	0x08004747
 80046b8:	0800475b 	.word	0x0800475b
 80046bc:	080047a7 	.word	0x080047a7
 80046c0:	080046d1 	.word	0x080046d1
 80046c4:	080046d1 	.word	0x080046d1
 80046c8:	08004747 	.word	0x08004747
 80046cc:	0800475b 	.word	0x0800475b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80046d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80046d6:	f043 0301 	orr.w	r3, r3, #1
 80046da:	b2da      	uxtb	r2, r3
 80046dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80046e2:	68ba      	ldr	r2, [r7, #8]
 80046e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	18d1      	adds	r1, r2, r3
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80046f0:	f7ff ff5c 	bl	80045ac <prvInsertTimerInActiveList>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d06c      	beq.n	80047d4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80046fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004700:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004704:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004708:	f003 0304 	and.w	r3, r3, #4
 800470c:	2b00      	cmp	r3, #0
 800470e:	d061      	beq.n	80047d4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	441a      	add	r2, r3
 8004718:	2300      	movs	r3, #0
 800471a:	9300      	str	r3, [sp, #0]
 800471c:	2300      	movs	r3, #0
 800471e:	2100      	movs	r1, #0
 8004720:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004722:	f7ff fe01 	bl	8004328 <xTimerGenericCommand>
 8004726:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004728:	6a3b      	ldr	r3, [r7, #32]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d152      	bne.n	80047d4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800472e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004732:	f383 8811 	msr	BASEPRI, r3
 8004736:	f3bf 8f6f 	isb	sy
 800473a:	f3bf 8f4f 	dsb	sy
 800473e:	61bb      	str	r3, [r7, #24]
}
 8004740:	bf00      	nop
 8004742:	bf00      	nop
 8004744:	e7fd      	b.n	8004742 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004748:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800474c:	f023 0301 	bic.w	r3, r3, #1
 8004750:	b2da      	uxtb	r2, r3
 8004752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004754:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004758:	e03d      	b.n	80047d6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800475a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800475c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004760:	f043 0301 	orr.w	r3, r3, #1
 8004764:	b2da      	uxtb	r2, r3
 8004766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004768:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004770:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d10b      	bne.n	8004792 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800477a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800477e:	f383 8811 	msr	BASEPRI, r3
 8004782:	f3bf 8f6f 	isb	sy
 8004786:	f3bf 8f4f 	dsb	sy
 800478a:	617b      	str	r3, [r7, #20]
}
 800478c:	bf00      	nop
 800478e:	bf00      	nop
 8004790:	e7fd      	b.n	800478e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004794:	699a      	ldr	r2, [r3, #24]
 8004796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004798:	18d1      	adds	r1, r2, r3
 800479a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800479e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80047a0:	f7ff ff04 	bl	80045ac <prvInsertTimerInActiveList>
					break;
 80047a4:	e017      	b.n	80047d6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80047a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d103      	bne.n	80047bc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80047b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80047b6:	f000 fbe7 	bl	8004f88 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80047ba:	e00c      	b.n	80047d6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80047bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80047c2:	f023 0301 	bic.w	r3, r3, #1
 80047c6:	b2da      	uxtb	r2, r3
 80047c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80047ce:	e002      	b.n	80047d6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80047d0:	bf00      	nop
 80047d2:	e000      	b.n	80047d6 <prvProcessReceivedCommands+0x1a6>
					break;
 80047d4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80047d6:	4b08      	ldr	r3, [pc, #32]	@ (80047f8 <prvProcessReceivedCommands+0x1c8>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	1d39      	adds	r1, r7, #4
 80047dc:	2200      	movs	r2, #0
 80047de:	4618      	mov	r0, r3
 80047e0:	f7fe f996 	bl	8002b10 <xQueueReceive>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f47f af26 	bne.w	8004638 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80047ec:	bf00      	nop
 80047ee:	bf00      	nop
 80047f0:	3730      	adds	r7, #48	@ 0x30
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	20000d98 	.word	0x20000d98

080047fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b088      	sub	sp, #32
 8004800:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004802:	e049      	b.n	8004898 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004804:	4b2e      	ldr	r3, [pc, #184]	@ (80048c0 <prvSwitchTimerLists+0xc4>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800480e:	4b2c      	ldr	r3, [pc, #176]	@ (80048c0 <prvSwitchTimerLists+0xc4>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	3304      	adds	r3, #4
 800481c:	4618      	mov	r0, r3
 800481e:	f7fd fdaf 	bl	8002380 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004830:	f003 0304 	and.w	r3, r3, #4
 8004834:	2b00      	cmp	r3, #0
 8004836:	d02f      	beq.n	8004898 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	4413      	add	r3, r2
 8004840:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004842:	68ba      	ldr	r2, [r7, #8]
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	429a      	cmp	r2, r3
 8004848:	d90e      	bls.n	8004868 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	68ba      	ldr	r2, [r7, #8]
 800484e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004856:	4b1a      	ldr	r3, [pc, #104]	@ (80048c0 <prvSwitchTimerLists+0xc4>)
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	3304      	adds	r3, #4
 800485e:	4619      	mov	r1, r3
 8004860:	4610      	mov	r0, r2
 8004862:	f7fd fd54 	bl	800230e <vListInsert>
 8004866:	e017      	b.n	8004898 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004868:	2300      	movs	r3, #0
 800486a:	9300      	str	r3, [sp, #0]
 800486c:	2300      	movs	r3, #0
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	2100      	movs	r1, #0
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f7ff fd58 	bl	8004328 <xTimerGenericCommand>
 8004878:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10b      	bne.n	8004898 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004884:	f383 8811 	msr	BASEPRI, r3
 8004888:	f3bf 8f6f 	isb	sy
 800488c:	f3bf 8f4f 	dsb	sy
 8004890:	603b      	str	r3, [r7, #0]
}
 8004892:	bf00      	nop
 8004894:	bf00      	nop
 8004896:	e7fd      	b.n	8004894 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004898:	4b09      	ldr	r3, [pc, #36]	@ (80048c0 <prvSwitchTimerLists+0xc4>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1b0      	bne.n	8004804 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80048a2:	4b07      	ldr	r3, [pc, #28]	@ (80048c0 <prvSwitchTimerLists+0xc4>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80048a8:	4b06      	ldr	r3, [pc, #24]	@ (80048c4 <prvSwitchTimerLists+0xc8>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a04      	ldr	r2, [pc, #16]	@ (80048c0 <prvSwitchTimerLists+0xc4>)
 80048ae:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80048b0:	4a04      	ldr	r2, [pc, #16]	@ (80048c4 <prvSwitchTimerLists+0xc8>)
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	6013      	str	r3, [r2, #0]
}
 80048b6:	bf00      	nop
 80048b8:	3718      	adds	r7, #24
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	20000d90 	.word	0x20000d90
 80048c4:	20000d94 	.word	0x20000d94

080048c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80048ce:	f000 f96b 	bl	8004ba8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80048d2:	4b15      	ldr	r3, [pc, #84]	@ (8004928 <prvCheckForValidListAndQueue+0x60>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d120      	bne.n	800491c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80048da:	4814      	ldr	r0, [pc, #80]	@ (800492c <prvCheckForValidListAndQueue+0x64>)
 80048dc:	f7fd fcc6 	bl	800226c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80048e0:	4813      	ldr	r0, [pc, #76]	@ (8004930 <prvCheckForValidListAndQueue+0x68>)
 80048e2:	f7fd fcc3 	bl	800226c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80048e6:	4b13      	ldr	r3, [pc, #76]	@ (8004934 <prvCheckForValidListAndQueue+0x6c>)
 80048e8:	4a10      	ldr	r2, [pc, #64]	@ (800492c <prvCheckForValidListAndQueue+0x64>)
 80048ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80048ec:	4b12      	ldr	r3, [pc, #72]	@ (8004938 <prvCheckForValidListAndQueue+0x70>)
 80048ee:	4a10      	ldr	r2, [pc, #64]	@ (8004930 <prvCheckForValidListAndQueue+0x68>)
 80048f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80048f2:	2300      	movs	r3, #0
 80048f4:	9300      	str	r3, [sp, #0]
 80048f6:	4b11      	ldr	r3, [pc, #68]	@ (800493c <prvCheckForValidListAndQueue+0x74>)
 80048f8:	4a11      	ldr	r2, [pc, #68]	@ (8004940 <prvCheckForValidListAndQueue+0x78>)
 80048fa:	2110      	movs	r1, #16
 80048fc:	200a      	movs	r0, #10
 80048fe:	f7fd fdd3 	bl	80024a8 <xQueueGenericCreateStatic>
 8004902:	4603      	mov	r3, r0
 8004904:	4a08      	ldr	r2, [pc, #32]	@ (8004928 <prvCheckForValidListAndQueue+0x60>)
 8004906:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004908:	4b07      	ldr	r3, [pc, #28]	@ (8004928 <prvCheckForValidListAndQueue+0x60>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d005      	beq.n	800491c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004910:	4b05      	ldr	r3, [pc, #20]	@ (8004928 <prvCheckForValidListAndQueue+0x60>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	490b      	ldr	r1, [pc, #44]	@ (8004944 <prvCheckForValidListAndQueue+0x7c>)
 8004916:	4618      	mov	r0, r3
 8004918:	f7fe fc14 	bl	8003144 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800491c:	f000 f976 	bl	8004c0c <vPortExitCritical>
}
 8004920:	bf00      	nop
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	20000d98 	.word	0x20000d98
 800492c:	20000d68 	.word	0x20000d68
 8004930:	20000d7c 	.word	0x20000d7c
 8004934:	20000d90 	.word	0x20000d90
 8004938:	20000d94 	.word	0x20000d94
 800493c:	20000e44 	.word	0x20000e44
 8004940:	20000da4 	.word	0x20000da4
 8004944:	080053d8 	.word	0x080053d8

08004948 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	3b04      	subs	r3, #4
 8004958:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004960:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	3b04      	subs	r3, #4
 8004966:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	f023 0201 	bic.w	r2, r3, #1
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	3b04      	subs	r3, #4
 8004976:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004978:	4a0c      	ldr	r2, [pc, #48]	@ (80049ac <pxPortInitialiseStack+0x64>)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	3b14      	subs	r3, #20
 8004982:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	3b04      	subs	r3, #4
 800498e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f06f 0202 	mvn.w	r2, #2
 8004996:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	3b20      	subs	r3, #32
 800499c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800499e:	68fb      	ldr	r3, [r7, #12]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr
 80049ac:	080049b1 	.word	0x080049b1

080049b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80049b6:	2300      	movs	r3, #0
 80049b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80049ba:	4b13      	ldr	r3, [pc, #76]	@ (8004a08 <prvTaskExitError+0x58>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c2:	d00b      	beq.n	80049dc <prvTaskExitError+0x2c>
	__asm volatile
 80049c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049c8:	f383 8811 	msr	BASEPRI, r3
 80049cc:	f3bf 8f6f 	isb	sy
 80049d0:	f3bf 8f4f 	dsb	sy
 80049d4:	60fb      	str	r3, [r7, #12]
}
 80049d6:	bf00      	nop
 80049d8:	bf00      	nop
 80049da:	e7fd      	b.n	80049d8 <prvTaskExitError+0x28>
	__asm volatile
 80049dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049e0:	f383 8811 	msr	BASEPRI, r3
 80049e4:	f3bf 8f6f 	isb	sy
 80049e8:	f3bf 8f4f 	dsb	sy
 80049ec:	60bb      	str	r3, [r7, #8]
}
 80049ee:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80049f0:	bf00      	nop
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d0fc      	beq.n	80049f2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80049f8:	bf00      	nop
 80049fa:	bf00      	nop
 80049fc:	3714      	adds	r7, #20
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	2000000c 	.word	0x2000000c
 8004a0c:	00000000 	.word	0x00000000

08004a10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004a10:	4b07      	ldr	r3, [pc, #28]	@ (8004a30 <pxCurrentTCBConst2>)
 8004a12:	6819      	ldr	r1, [r3, #0]
 8004a14:	6808      	ldr	r0, [r1, #0]
 8004a16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a1a:	f380 8809 	msr	PSP, r0
 8004a1e:	f3bf 8f6f 	isb	sy
 8004a22:	f04f 0000 	mov.w	r0, #0
 8004a26:	f380 8811 	msr	BASEPRI, r0
 8004a2a:	4770      	bx	lr
 8004a2c:	f3af 8000 	nop.w

08004a30 <pxCurrentTCBConst2>:
 8004a30:	20000868 	.word	0x20000868
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004a34:	bf00      	nop
 8004a36:	bf00      	nop

08004a38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004a38:	4808      	ldr	r0, [pc, #32]	@ (8004a5c <prvPortStartFirstTask+0x24>)
 8004a3a:	6800      	ldr	r0, [r0, #0]
 8004a3c:	6800      	ldr	r0, [r0, #0]
 8004a3e:	f380 8808 	msr	MSP, r0
 8004a42:	f04f 0000 	mov.w	r0, #0
 8004a46:	f380 8814 	msr	CONTROL, r0
 8004a4a:	b662      	cpsie	i
 8004a4c:	b661      	cpsie	f
 8004a4e:	f3bf 8f4f 	dsb	sy
 8004a52:	f3bf 8f6f 	isb	sy
 8004a56:	df00      	svc	0
 8004a58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004a5a:	bf00      	nop
 8004a5c:	e000ed08 	.word	0xe000ed08

08004a60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004a66:	4b47      	ldr	r3, [pc, #284]	@ (8004b84 <xPortStartScheduler+0x124>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a47      	ldr	r2, [pc, #284]	@ (8004b88 <xPortStartScheduler+0x128>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d10b      	bne.n	8004a88 <xPortStartScheduler+0x28>
	__asm volatile
 8004a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a74:	f383 8811 	msr	BASEPRI, r3
 8004a78:	f3bf 8f6f 	isb	sy
 8004a7c:	f3bf 8f4f 	dsb	sy
 8004a80:	613b      	str	r3, [r7, #16]
}
 8004a82:	bf00      	nop
 8004a84:	bf00      	nop
 8004a86:	e7fd      	b.n	8004a84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004a88:	4b3e      	ldr	r3, [pc, #248]	@ (8004b84 <xPortStartScheduler+0x124>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a3f      	ldr	r2, [pc, #252]	@ (8004b8c <xPortStartScheduler+0x12c>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d10b      	bne.n	8004aaa <xPortStartScheduler+0x4a>
	__asm volatile
 8004a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a96:	f383 8811 	msr	BASEPRI, r3
 8004a9a:	f3bf 8f6f 	isb	sy
 8004a9e:	f3bf 8f4f 	dsb	sy
 8004aa2:	60fb      	str	r3, [r7, #12]
}
 8004aa4:	bf00      	nop
 8004aa6:	bf00      	nop
 8004aa8:	e7fd      	b.n	8004aa6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004aaa:	4b39      	ldr	r3, [pc, #228]	@ (8004b90 <xPortStartScheduler+0x130>)
 8004aac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	22ff      	movs	r2, #255	@ 0xff
 8004aba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ac4:	78fb      	ldrb	r3, [r7, #3]
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004acc:	b2da      	uxtb	r2, r3
 8004ace:	4b31      	ldr	r3, [pc, #196]	@ (8004b94 <xPortStartScheduler+0x134>)
 8004ad0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004ad2:	4b31      	ldr	r3, [pc, #196]	@ (8004b98 <xPortStartScheduler+0x138>)
 8004ad4:	2207      	movs	r2, #7
 8004ad6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ad8:	e009      	b.n	8004aee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004ada:	4b2f      	ldr	r3, [pc, #188]	@ (8004b98 <xPortStartScheduler+0x138>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	4a2d      	ldr	r2, [pc, #180]	@ (8004b98 <xPortStartScheduler+0x138>)
 8004ae2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ae4:	78fb      	ldrb	r3, [r7, #3]
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	005b      	lsls	r3, r3, #1
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004aee:	78fb      	ldrb	r3, [r7, #3]
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004af6:	2b80      	cmp	r3, #128	@ 0x80
 8004af8:	d0ef      	beq.n	8004ada <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004afa:	4b27      	ldr	r3, [pc, #156]	@ (8004b98 <xPortStartScheduler+0x138>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f1c3 0307 	rsb	r3, r3, #7
 8004b02:	2b04      	cmp	r3, #4
 8004b04:	d00b      	beq.n	8004b1e <xPortStartScheduler+0xbe>
	__asm volatile
 8004b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b0a:	f383 8811 	msr	BASEPRI, r3
 8004b0e:	f3bf 8f6f 	isb	sy
 8004b12:	f3bf 8f4f 	dsb	sy
 8004b16:	60bb      	str	r3, [r7, #8]
}
 8004b18:	bf00      	nop
 8004b1a:	bf00      	nop
 8004b1c:	e7fd      	b.n	8004b1a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8004b98 <xPortStartScheduler+0x138>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	021b      	lsls	r3, r3, #8
 8004b24:	4a1c      	ldr	r2, [pc, #112]	@ (8004b98 <xPortStartScheduler+0x138>)
 8004b26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b28:	4b1b      	ldr	r3, [pc, #108]	@ (8004b98 <xPortStartScheduler+0x138>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004b30:	4a19      	ldr	r2, [pc, #100]	@ (8004b98 <xPortStartScheduler+0x138>)
 8004b32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	b2da      	uxtb	r2, r3
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004b3c:	4b17      	ldr	r3, [pc, #92]	@ (8004b9c <xPortStartScheduler+0x13c>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a16      	ldr	r2, [pc, #88]	@ (8004b9c <xPortStartScheduler+0x13c>)
 8004b42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004b46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004b48:	4b14      	ldr	r3, [pc, #80]	@ (8004b9c <xPortStartScheduler+0x13c>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a13      	ldr	r2, [pc, #76]	@ (8004b9c <xPortStartScheduler+0x13c>)
 8004b4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004b52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004b54:	f000 f8da 	bl	8004d0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004b58:	4b11      	ldr	r3, [pc, #68]	@ (8004ba0 <xPortStartScheduler+0x140>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004b5e:	f000 f8f9 	bl	8004d54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004b62:	4b10      	ldr	r3, [pc, #64]	@ (8004ba4 <xPortStartScheduler+0x144>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a0f      	ldr	r2, [pc, #60]	@ (8004ba4 <xPortStartScheduler+0x144>)
 8004b68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004b6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004b6e:	f7ff ff63 	bl	8004a38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004b72:	f7fe ff1f 	bl	80039b4 <vTaskSwitchContext>
	prvTaskExitError();
 8004b76:	f7ff ff1b 	bl	80049b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3718      	adds	r7, #24
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	e000ed00 	.word	0xe000ed00
 8004b88:	410fc271 	.word	0x410fc271
 8004b8c:	410fc270 	.word	0x410fc270
 8004b90:	e000e400 	.word	0xe000e400
 8004b94:	20000e94 	.word	0x20000e94
 8004b98:	20000e98 	.word	0x20000e98
 8004b9c:	e000ed20 	.word	0xe000ed20
 8004ba0:	2000000c 	.word	0x2000000c
 8004ba4:	e000ef34 	.word	0xe000ef34

08004ba8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
	__asm volatile
 8004bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb2:	f383 8811 	msr	BASEPRI, r3
 8004bb6:	f3bf 8f6f 	isb	sy
 8004bba:	f3bf 8f4f 	dsb	sy
 8004bbe:	607b      	str	r3, [r7, #4]
}
 8004bc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004bc2:	4b10      	ldr	r3, [pc, #64]	@ (8004c04 <vPortEnterCritical+0x5c>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	4a0e      	ldr	r2, [pc, #56]	@ (8004c04 <vPortEnterCritical+0x5c>)
 8004bca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8004c04 <vPortEnterCritical+0x5c>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d110      	bne.n	8004bf6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8004c08 <vPortEnterCritical+0x60>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00b      	beq.n	8004bf6 <vPortEnterCritical+0x4e>
	__asm volatile
 8004bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004be2:	f383 8811 	msr	BASEPRI, r3
 8004be6:	f3bf 8f6f 	isb	sy
 8004bea:	f3bf 8f4f 	dsb	sy
 8004bee:	603b      	str	r3, [r7, #0]
}
 8004bf0:	bf00      	nop
 8004bf2:	bf00      	nop
 8004bf4:	e7fd      	b.n	8004bf2 <vPortEnterCritical+0x4a>
	}
}
 8004bf6:	bf00      	nop
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	2000000c 	.word	0x2000000c
 8004c08:	e000ed04 	.word	0xe000ed04

08004c0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004c12:	4b12      	ldr	r3, [pc, #72]	@ (8004c5c <vPortExitCritical+0x50>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d10b      	bne.n	8004c32 <vPortExitCritical+0x26>
	__asm volatile
 8004c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c1e:	f383 8811 	msr	BASEPRI, r3
 8004c22:	f3bf 8f6f 	isb	sy
 8004c26:	f3bf 8f4f 	dsb	sy
 8004c2a:	607b      	str	r3, [r7, #4]
}
 8004c2c:	bf00      	nop
 8004c2e:	bf00      	nop
 8004c30:	e7fd      	b.n	8004c2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004c32:	4b0a      	ldr	r3, [pc, #40]	@ (8004c5c <vPortExitCritical+0x50>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	3b01      	subs	r3, #1
 8004c38:	4a08      	ldr	r2, [pc, #32]	@ (8004c5c <vPortExitCritical+0x50>)
 8004c3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004c3c:	4b07      	ldr	r3, [pc, #28]	@ (8004c5c <vPortExitCritical+0x50>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d105      	bne.n	8004c50 <vPortExitCritical+0x44>
 8004c44:	2300      	movs	r3, #0
 8004c46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	f383 8811 	msr	BASEPRI, r3
}
 8004c4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004c50:	bf00      	nop
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr
 8004c5c:	2000000c 	.word	0x2000000c

08004c60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004c60:	f3ef 8009 	mrs	r0, PSP
 8004c64:	f3bf 8f6f 	isb	sy
 8004c68:	4b15      	ldr	r3, [pc, #84]	@ (8004cc0 <pxCurrentTCBConst>)
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	f01e 0f10 	tst.w	lr, #16
 8004c70:	bf08      	it	eq
 8004c72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004c76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c7a:	6010      	str	r0, [r2, #0]
 8004c7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004c80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004c84:	f380 8811 	msr	BASEPRI, r0
 8004c88:	f3bf 8f4f 	dsb	sy
 8004c8c:	f3bf 8f6f 	isb	sy
 8004c90:	f7fe fe90 	bl	80039b4 <vTaskSwitchContext>
 8004c94:	f04f 0000 	mov.w	r0, #0
 8004c98:	f380 8811 	msr	BASEPRI, r0
 8004c9c:	bc09      	pop	{r0, r3}
 8004c9e:	6819      	ldr	r1, [r3, #0]
 8004ca0:	6808      	ldr	r0, [r1, #0]
 8004ca2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ca6:	f01e 0f10 	tst.w	lr, #16
 8004caa:	bf08      	it	eq
 8004cac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004cb0:	f380 8809 	msr	PSP, r0
 8004cb4:	f3bf 8f6f 	isb	sy
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	f3af 8000 	nop.w

08004cc0 <pxCurrentTCBConst>:
 8004cc0:	20000868 	.word	0x20000868
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004cc4:	bf00      	nop
 8004cc6:	bf00      	nop

08004cc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
	__asm volatile
 8004cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cd2:	f383 8811 	msr	BASEPRI, r3
 8004cd6:	f3bf 8f6f 	isb	sy
 8004cda:	f3bf 8f4f 	dsb	sy
 8004cde:	607b      	str	r3, [r7, #4]
}
 8004ce0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ce2:	f7fe fdad 	bl	8003840 <xTaskIncrementTick>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d003      	beq.n	8004cf4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004cec:	4b06      	ldr	r3, [pc, #24]	@ (8004d08 <xPortSysTickHandler+0x40>)
 8004cee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cf2:	601a      	str	r2, [r3, #0]
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	f383 8811 	msr	BASEPRI, r3
}
 8004cfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004d00:	bf00      	nop
 8004d02:	3708      	adds	r7, #8
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	e000ed04 	.word	0xe000ed04

08004d0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004d10:	4b0b      	ldr	r3, [pc, #44]	@ (8004d40 <vPortSetupTimerInterrupt+0x34>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004d16:	4b0b      	ldr	r3, [pc, #44]	@ (8004d44 <vPortSetupTimerInterrupt+0x38>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8004d48 <vPortSetupTimerInterrupt+0x3c>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a0a      	ldr	r2, [pc, #40]	@ (8004d4c <vPortSetupTimerInterrupt+0x40>)
 8004d22:	fba2 2303 	umull	r2, r3, r2, r3
 8004d26:	099b      	lsrs	r3, r3, #6
 8004d28:	4a09      	ldr	r2, [pc, #36]	@ (8004d50 <vPortSetupTimerInterrupt+0x44>)
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004d2e:	4b04      	ldr	r3, [pc, #16]	@ (8004d40 <vPortSetupTimerInterrupt+0x34>)
 8004d30:	2207      	movs	r2, #7
 8004d32:	601a      	str	r2, [r3, #0]
}
 8004d34:	bf00      	nop
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	e000e010 	.word	0xe000e010
 8004d44:	e000e018 	.word	0xe000e018
 8004d48:	20000000 	.word	0x20000000
 8004d4c:	10624dd3 	.word	0x10624dd3
 8004d50:	e000e014 	.word	0xe000e014

08004d54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004d54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004d64 <vPortEnableVFP+0x10>
 8004d58:	6801      	ldr	r1, [r0, #0]
 8004d5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004d5e:	6001      	str	r1, [r0, #0]
 8004d60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004d62:	bf00      	nop
 8004d64:	e000ed88 	.word	0xe000ed88

08004d68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004d6e:	f3ef 8305 	mrs	r3, IPSR
 8004d72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2b0f      	cmp	r3, #15
 8004d78:	d915      	bls.n	8004da6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004d7a:	4a18      	ldr	r2, [pc, #96]	@ (8004ddc <vPortValidateInterruptPriority+0x74>)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	4413      	add	r3, r2
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004d84:	4b16      	ldr	r3, [pc, #88]	@ (8004de0 <vPortValidateInterruptPriority+0x78>)
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	7afa      	ldrb	r2, [r7, #11]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d20b      	bcs.n	8004da6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d92:	f383 8811 	msr	BASEPRI, r3
 8004d96:	f3bf 8f6f 	isb	sy
 8004d9a:	f3bf 8f4f 	dsb	sy
 8004d9e:	607b      	str	r3, [r7, #4]
}
 8004da0:	bf00      	nop
 8004da2:	bf00      	nop
 8004da4:	e7fd      	b.n	8004da2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004da6:	4b0f      	ldr	r3, [pc, #60]	@ (8004de4 <vPortValidateInterruptPriority+0x7c>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004dae:	4b0e      	ldr	r3, [pc, #56]	@ (8004de8 <vPortValidateInterruptPriority+0x80>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d90b      	bls.n	8004dce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dba:	f383 8811 	msr	BASEPRI, r3
 8004dbe:	f3bf 8f6f 	isb	sy
 8004dc2:	f3bf 8f4f 	dsb	sy
 8004dc6:	603b      	str	r3, [r7, #0]
}
 8004dc8:	bf00      	nop
 8004dca:	bf00      	nop
 8004dcc:	e7fd      	b.n	8004dca <vPortValidateInterruptPriority+0x62>
	}
 8004dce:	bf00      	nop
 8004dd0:	3714      	adds	r7, #20
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	e000e3f0 	.word	0xe000e3f0
 8004de0:	20000e94 	.word	0x20000e94
 8004de4:	e000ed0c 	.word	0xe000ed0c
 8004de8:	20000e98 	.word	0x20000e98

08004dec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b08a      	sub	sp, #40	@ 0x28
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004df4:	2300      	movs	r3, #0
 8004df6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004df8:	f7fe fc66 	bl	80036c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004dfc:	4b5c      	ldr	r3, [pc, #368]	@ (8004f70 <pvPortMalloc+0x184>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d101      	bne.n	8004e08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004e04:	f000 f924 	bl	8005050 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004e08:	4b5a      	ldr	r3, [pc, #360]	@ (8004f74 <pvPortMalloc+0x188>)
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4013      	ands	r3, r2
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	f040 8095 	bne.w	8004f40 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d01e      	beq.n	8004e5a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004e1c:	2208      	movs	r2, #8
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4413      	add	r3, r2
 8004e22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f003 0307 	and.w	r3, r3, #7
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d015      	beq.n	8004e5a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f023 0307 	bic.w	r3, r3, #7
 8004e34:	3308      	adds	r3, #8
 8004e36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f003 0307 	and.w	r3, r3, #7
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00b      	beq.n	8004e5a <pvPortMalloc+0x6e>
	__asm volatile
 8004e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e46:	f383 8811 	msr	BASEPRI, r3
 8004e4a:	f3bf 8f6f 	isb	sy
 8004e4e:	f3bf 8f4f 	dsb	sy
 8004e52:	617b      	str	r3, [r7, #20]
}
 8004e54:	bf00      	nop
 8004e56:	bf00      	nop
 8004e58:	e7fd      	b.n	8004e56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d06f      	beq.n	8004f40 <pvPortMalloc+0x154>
 8004e60:	4b45      	ldr	r3, [pc, #276]	@ (8004f78 <pvPortMalloc+0x18c>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d86a      	bhi.n	8004f40 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004e6a:	4b44      	ldr	r3, [pc, #272]	@ (8004f7c <pvPortMalloc+0x190>)
 8004e6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004e6e:	4b43      	ldr	r3, [pc, #268]	@ (8004f7c <pvPortMalloc+0x190>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e74:	e004      	b.n	8004e80 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d903      	bls.n	8004e92 <pvPortMalloc+0xa6>
 8004e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d1f1      	bne.n	8004e76 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004e92:	4b37      	ldr	r3, [pc, #220]	@ (8004f70 <pvPortMalloc+0x184>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d051      	beq.n	8004f40 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004e9c:	6a3b      	ldr	r3, [r7, #32]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2208      	movs	r2, #8
 8004ea2:	4413      	add	r3, r2
 8004ea4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	6a3b      	ldr	r3, [r7, #32]
 8004eac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb0:	685a      	ldr	r2, [r3, #4]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	1ad2      	subs	r2, r2, r3
 8004eb6:	2308      	movs	r3, #8
 8004eb8:	005b      	lsls	r3, r3, #1
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d920      	bls.n	8004f00 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004ebe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	f003 0307 	and.w	r3, r3, #7
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00b      	beq.n	8004ee8 <pvPortMalloc+0xfc>
	__asm volatile
 8004ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ed4:	f383 8811 	msr	BASEPRI, r3
 8004ed8:	f3bf 8f6f 	isb	sy
 8004edc:	f3bf 8f4f 	dsb	sy
 8004ee0:	613b      	str	r3, [r7, #16]
}
 8004ee2:	bf00      	nop
 8004ee4:	bf00      	nop
 8004ee6:	e7fd      	b.n	8004ee4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eea:	685a      	ldr	r2, [r3, #4]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	1ad2      	subs	r2, r2, r3
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004efa:	69b8      	ldr	r0, [r7, #24]
 8004efc:	f000 f90a 	bl	8005114 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004f00:	4b1d      	ldr	r3, [pc, #116]	@ (8004f78 <pvPortMalloc+0x18c>)
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	4a1b      	ldr	r2, [pc, #108]	@ (8004f78 <pvPortMalloc+0x18c>)
 8004f0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004f0e:	4b1a      	ldr	r3, [pc, #104]	@ (8004f78 <pvPortMalloc+0x18c>)
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	4b1b      	ldr	r3, [pc, #108]	@ (8004f80 <pvPortMalloc+0x194>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d203      	bcs.n	8004f22 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004f1a:	4b17      	ldr	r3, [pc, #92]	@ (8004f78 <pvPortMalloc+0x18c>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a18      	ldr	r2, [pc, #96]	@ (8004f80 <pvPortMalloc+0x194>)
 8004f20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f24:	685a      	ldr	r2, [r3, #4]
 8004f26:	4b13      	ldr	r3, [pc, #76]	@ (8004f74 <pvPortMalloc+0x188>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	431a      	orrs	r2, r3
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f32:	2200      	movs	r2, #0
 8004f34:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004f36:	4b13      	ldr	r3, [pc, #76]	@ (8004f84 <pvPortMalloc+0x198>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	4a11      	ldr	r2, [pc, #68]	@ (8004f84 <pvPortMalloc+0x198>)
 8004f3e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004f40:	f7fe fbd0 	bl	80036e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	f003 0307 	and.w	r3, r3, #7
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00b      	beq.n	8004f66 <pvPortMalloc+0x17a>
	__asm volatile
 8004f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f52:	f383 8811 	msr	BASEPRI, r3
 8004f56:	f3bf 8f6f 	isb	sy
 8004f5a:	f3bf 8f4f 	dsb	sy
 8004f5e:	60fb      	str	r3, [r7, #12]
}
 8004f60:	bf00      	nop
 8004f62:	bf00      	nop
 8004f64:	e7fd      	b.n	8004f62 <pvPortMalloc+0x176>
	return pvReturn;
 8004f66:	69fb      	ldr	r3, [r7, #28]
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3728      	adds	r7, #40	@ 0x28
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	20004aa4 	.word	0x20004aa4
 8004f74:	20004ab8 	.word	0x20004ab8
 8004f78:	20004aa8 	.word	0x20004aa8
 8004f7c:	20004a9c 	.word	0x20004a9c
 8004f80:	20004aac 	.word	0x20004aac
 8004f84:	20004ab0 	.word	0x20004ab0

08004f88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b086      	sub	sp, #24
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d04f      	beq.n	800503a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004f9a:	2308      	movs	r3, #8
 8004f9c:	425b      	negs	r3, r3
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	4b25      	ldr	r3, [pc, #148]	@ (8005044 <vPortFree+0xbc>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d10b      	bne.n	8004fce <vPortFree+0x46>
	__asm volatile
 8004fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fba:	f383 8811 	msr	BASEPRI, r3
 8004fbe:	f3bf 8f6f 	isb	sy
 8004fc2:	f3bf 8f4f 	dsb	sy
 8004fc6:	60fb      	str	r3, [r7, #12]
}
 8004fc8:	bf00      	nop
 8004fca:	bf00      	nop
 8004fcc:	e7fd      	b.n	8004fca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00b      	beq.n	8004fee <vPortFree+0x66>
	__asm volatile
 8004fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fda:	f383 8811 	msr	BASEPRI, r3
 8004fde:	f3bf 8f6f 	isb	sy
 8004fe2:	f3bf 8f4f 	dsb	sy
 8004fe6:	60bb      	str	r3, [r7, #8]
}
 8004fe8:	bf00      	nop
 8004fea:	bf00      	nop
 8004fec:	e7fd      	b.n	8004fea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	685a      	ldr	r2, [r3, #4]
 8004ff2:	4b14      	ldr	r3, [pc, #80]	@ (8005044 <vPortFree+0xbc>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d01e      	beq.n	800503a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d11a      	bne.n	800503a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	685a      	ldr	r2, [r3, #4]
 8005008:	4b0e      	ldr	r3, [pc, #56]	@ (8005044 <vPortFree+0xbc>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	43db      	mvns	r3, r3
 800500e:	401a      	ands	r2, r3
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005014:	f7fe fb58 	bl	80036c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	685a      	ldr	r2, [r3, #4]
 800501c:	4b0a      	ldr	r3, [pc, #40]	@ (8005048 <vPortFree+0xc0>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4413      	add	r3, r2
 8005022:	4a09      	ldr	r2, [pc, #36]	@ (8005048 <vPortFree+0xc0>)
 8005024:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005026:	6938      	ldr	r0, [r7, #16]
 8005028:	f000 f874 	bl	8005114 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800502c:	4b07      	ldr	r3, [pc, #28]	@ (800504c <vPortFree+0xc4>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	3301      	adds	r3, #1
 8005032:	4a06      	ldr	r2, [pc, #24]	@ (800504c <vPortFree+0xc4>)
 8005034:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005036:	f7fe fb55 	bl	80036e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800503a:	bf00      	nop
 800503c:	3718      	adds	r7, #24
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	20004ab8 	.word	0x20004ab8
 8005048:	20004aa8 	.word	0x20004aa8
 800504c:	20004ab4 	.word	0x20004ab4

08005050 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005056:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800505a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800505c:	4b27      	ldr	r3, [pc, #156]	@ (80050fc <prvHeapInit+0xac>)
 800505e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f003 0307 	and.w	r3, r3, #7
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00c      	beq.n	8005084 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	3307      	adds	r3, #7
 800506e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f023 0307 	bic.w	r3, r3, #7
 8005076:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	4a1f      	ldr	r2, [pc, #124]	@ (80050fc <prvHeapInit+0xac>)
 8005080:	4413      	add	r3, r2
 8005082:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005088:	4a1d      	ldr	r2, [pc, #116]	@ (8005100 <prvHeapInit+0xb0>)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800508e:	4b1c      	ldr	r3, [pc, #112]	@ (8005100 <prvHeapInit+0xb0>)
 8005090:	2200      	movs	r2, #0
 8005092:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	68ba      	ldr	r2, [r7, #8]
 8005098:	4413      	add	r3, r2
 800509a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800509c:	2208      	movs	r2, #8
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	1a9b      	subs	r3, r3, r2
 80050a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f023 0307 	bic.w	r3, r3, #7
 80050aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	4a15      	ldr	r2, [pc, #84]	@ (8005104 <prvHeapInit+0xb4>)
 80050b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80050b2:	4b14      	ldr	r3, [pc, #80]	@ (8005104 <prvHeapInit+0xb4>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2200      	movs	r2, #0
 80050b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80050ba:	4b12      	ldr	r3, [pc, #72]	@ (8005104 <prvHeapInit+0xb4>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2200      	movs	r2, #0
 80050c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	1ad2      	subs	r2, r2, r3
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80050d0:	4b0c      	ldr	r3, [pc, #48]	@ (8005104 <prvHeapInit+0xb4>)
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	4a0a      	ldr	r2, [pc, #40]	@ (8005108 <prvHeapInit+0xb8>)
 80050de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	4a09      	ldr	r2, [pc, #36]	@ (800510c <prvHeapInit+0xbc>)
 80050e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80050e8:	4b09      	ldr	r3, [pc, #36]	@ (8005110 <prvHeapInit+0xc0>)
 80050ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80050ee:	601a      	str	r2, [r3, #0]
}
 80050f0:	bf00      	nop
 80050f2:	3714      	adds	r7, #20
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr
 80050fc:	20000e9c 	.word	0x20000e9c
 8005100:	20004a9c 	.word	0x20004a9c
 8005104:	20004aa4 	.word	0x20004aa4
 8005108:	20004aac 	.word	0x20004aac
 800510c:	20004aa8 	.word	0x20004aa8
 8005110:	20004ab8 	.word	0x20004ab8

08005114 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800511c:	4b28      	ldr	r3, [pc, #160]	@ (80051c0 <prvInsertBlockIntoFreeList+0xac>)
 800511e:	60fb      	str	r3, [r7, #12]
 8005120:	e002      	b.n	8005128 <prvInsertBlockIntoFreeList+0x14>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	60fb      	str	r3, [r7, #12]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	429a      	cmp	r2, r3
 8005130:	d8f7      	bhi.n	8005122 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	68ba      	ldr	r2, [r7, #8]
 800513c:	4413      	add	r3, r2
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	429a      	cmp	r2, r3
 8005142:	d108      	bne.n	8005156 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	441a      	add	r2, r3
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	441a      	add	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	429a      	cmp	r2, r3
 8005168:	d118      	bne.n	800519c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	4b15      	ldr	r3, [pc, #84]	@ (80051c4 <prvInsertBlockIntoFreeList+0xb0>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	429a      	cmp	r2, r3
 8005174:	d00d      	beq.n	8005192 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685a      	ldr	r2, [r3, #4]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	441a      	add	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	601a      	str	r2, [r3, #0]
 8005190:	e008      	b.n	80051a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005192:	4b0c      	ldr	r3, [pc, #48]	@ (80051c4 <prvInsertBlockIntoFreeList+0xb0>)
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	601a      	str	r2, [r3, #0]
 800519a:	e003      	b.n	80051a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d002      	beq.n	80051b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051b2:	bf00      	nop
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	20004a9c 	.word	0x20004a9c
 80051c4:	20004aa4 	.word	0x20004aa4

080051c8 <memset>:
 80051c8:	4402      	add	r2, r0
 80051ca:	4603      	mov	r3, r0
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d100      	bne.n	80051d2 <memset+0xa>
 80051d0:	4770      	bx	lr
 80051d2:	f803 1b01 	strb.w	r1, [r3], #1
 80051d6:	e7f9      	b.n	80051cc <memset+0x4>

080051d8 <_reclaim_reent>:
 80051d8:	4b29      	ldr	r3, [pc, #164]	@ (8005280 <_reclaim_reent+0xa8>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4283      	cmp	r3, r0
 80051de:	b570      	push	{r4, r5, r6, lr}
 80051e0:	4604      	mov	r4, r0
 80051e2:	d04b      	beq.n	800527c <_reclaim_reent+0xa4>
 80051e4:	69c3      	ldr	r3, [r0, #28]
 80051e6:	b1ab      	cbz	r3, 8005214 <_reclaim_reent+0x3c>
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	b16b      	cbz	r3, 8005208 <_reclaim_reent+0x30>
 80051ec:	2500      	movs	r5, #0
 80051ee:	69e3      	ldr	r3, [r4, #28]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	5959      	ldr	r1, [r3, r5]
 80051f4:	2900      	cmp	r1, #0
 80051f6:	d13b      	bne.n	8005270 <_reclaim_reent+0x98>
 80051f8:	3504      	adds	r5, #4
 80051fa:	2d80      	cmp	r5, #128	@ 0x80
 80051fc:	d1f7      	bne.n	80051ee <_reclaim_reent+0x16>
 80051fe:	69e3      	ldr	r3, [r4, #28]
 8005200:	4620      	mov	r0, r4
 8005202:	68d9      	ldr	r1, [r3, #12]
 8005204:	f000 f872 	bl	80052ec <_free_r>
 8005208:	69e3      	ldr	r3, [r4, #28]
 800520a:	6819      	ldr	r1, [r3, #0]
 800520c:	b111      	cbz	r1, 8005214 <_reclaim_reent+0x3c>
 800520e:	4620      	mov	r0, r4
 8005210:	f000 f86c 	bl	80052ec <_free_r>
 8005214:	6961      	ldr	r1, [r4, #20]
 8005216:	b111      	cbz	r1, 800521e <_reclaim_reent+0x46>
 8005218:	4620      	mov	r0, r4
 800521a:	f000 f867 	bl	80052ec <_free_r>
 800521e:	69e1      	ldr	r1, [r4, #28]
 8005220:	b111      	cbz	r1, 8005228 <_reclaim_reent+0x50>
 8005222:	4620      	mov	r0, r4
 8005224:	f000 f862 	bl	80052ec <_free_r>
 8005228:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800522a:	b111      	cbz	r1, 8005232 <_reclaim_reent+0x5a>
 800522c:	4620      	mov	r0, r4
 800522e:	f000 f85d 	bl	80052ec <_free_r>
 8005232:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005234:	b111      	cbz	r1, 800523c <_reclaim_reent+0x64>
 8005236:	4620      	mov	r0, r4
 8005238:	f000 f858 	bl	80052ec <_free_r>
 800523c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800523e:	b111      	cbz	r1, 8005246 <_reclaim_reent+0x6e>
 8005240:	4620      	mov	r0, r4
 8005242:	f000 f853 	bl	80052ec <_free_r>
 8005246:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005248:	b111      	cbz	r1, 8005250 <_reclaim_reent+0x78>
 800524a:	4620      	mov	r0, r4
 800524c:	f000 f84e 	bl	80052ec <_free_r>
 8005250:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005252:	b111      	cbz	r1, 800525a <_reclaim_reent+0x82>
 8005254:	4620      	mov	r0, r4
 8005256:	f000 f849 	bl	80052ec <_free_r>
 800525a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800525c:	b111      	cbz	r1, 8005264 <_reclaim_reent+0x8c>
 800525e:	4620      	mov	r0, r4
 8005260:	f000 f844 	bl	80052ec <_free_r>
 8005264:	6a23      	ldr	r3, [r4, #32]
 8005266:	b14b      	cbz	r3, 800527c <_reclaim_reent+0xa4>
 8005268:	4620      	mov	r0, r4
 800526a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800526e:	4718      	bx	r3
 8005270:	680e      	ldr	r6, [r1, #0]
 8005272:	4620      	mov	r0, r4
 8005274:	f000 f83a 	bl	80052ec <_free_r>
 8005278:	4631      	mov	r1, r6
 800527a:	e7bb      	b.n	80051f4 <_reclaim_reent+0x1c>
 800527c:	bd70      	pop	{r4, r5, r6, pc}
 800527e:	bf00      	nop
 8005280:	20000010 	.word	0x20000010

08005284 <__libc_init_array>:
 8005284:	b570      	push	{r4, r5, r6, lr}
 8005286:	4d0d      	ldr	r5, [pc, #52]	@ (80052bc <__libc_init_array+0x38>)
 8005288:	4c0d      	ldr	r4, [pc, #52]	@ (80052c0 <__libc_init_array+0x3c>)
 800528a:	1b64      	subs	r4, r4, r5
 800528c:	10a4      	asrs	r4, r4, #2
 800528e:	2600      	movs	r6, #0
 8005290:	42a6      	cmp	r6, r4
 8005292:	d109      	bne.n	80052a8 <__libc_init_array+0x24>
 8005294:	4d0b      	ldr	r5, [pc, #44]	@ (80052c4 <__libc_init_array+0x40>)
 8005296:	4c0c      	ldr	r4, [pc, #48]	@ (80052c8 <__libc_init_array+0x44>)
 8005298:	f000 f87e 	bl	8005398 <_init>
 800529c:	1b64      	subs	r4, r4, r5
 800529e:	10a4      	asrs	r4, r4, #2
 80052a0:	2600      	movs	r6, #0
 80052a2:	42a6      	cmp	r6, r4
 80052a4:	d105      	bne.n	80052b2 <__libc_init_array+0x2e>
 80052a6:	bd70      	pop	{r4, r5, r6, pc}
 80052a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80052ac:	4798      	blx	r3
 80052ae:	3601      	adds	r6, #1
 80052b0:	e7ee      	b.n	8005290 <__libc_init_array+0xc>
 80052b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80052b6:	4798      	blx	r3
 80052b8:	3601      	adds	r6, #1
 80052ba:	e7f2      	b.n	80052a2 <__libc_init_array+0x1e>
 80052bc:	08005458 	.word	0x08005458
 80052c0:	08005458 	.word	0x08005458
 80052c4:	08005458 	.word	0x08005458
 80052c8:	0800545c 	.word	0x0800545c

080052cc <__retarget_lock_acquire_recursive>:
 80052cc:	4770      	bx	lr

080052ce <__retarget_lock_release_recursive>:
 80052ce:	4770      	bx	lr

080052d0 <memcpy>:
 80052d0:	440a      	add	r2, r1
 80052d2:	4291      	cmp	r1, r2
 80052d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80052d8:	d100      	bne.n	80052dc <memcpy+0xc>
 80052da:	4770      	bx	lr
 80052dc:	b510      	push	{r4, lr}
 80052de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052e6:	4291      	cmp	r1, r2
 80052e8:	d1f9      	bne.n	80052de <memcpy+0xe>
 80052ea:	bd10      	pop	{r4, pc}

080052ec <_free_r>:
 80052ec:	b538      	push	{r3, r4, r5, lr}
 80052ee:	4605      	mov	r5, r0
 80052f0:	2900      	cmp	r1, #0
 80052f2:	d041      	beq.n	8005378 <_free_r+0x8c>
 80052f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052f8:	1f0c      	subs	r4, r1, #4
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	bfb8      	it	lt
 80052fe:	18e4      	addlt	r4, r4, r3
 8005300:	f000 f83e 	bl	8005380 <__malloc_lock>
 8005304:	4a1d      	ldr	r2, [pc, #116]	@ (800537c <_free_r+0x90>)
 8005306:	6813      	ldr	r3, [r2, #0]
 8005308:	b933      	cbnz	r3, 8005318 <_free_r+0x2c>
 800530a:	6063      	str	r3, [r4, #4]
 800530c:	6014      	str	r4, [r2, #0]
 800530e:	4628      	mov	r0, r5
 8005310:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005314:	f000 b83a 	b.w	800538c <__malloc_unlock>
 8005318:	42a3      	cmp	r3, r4
 800531a:	d908      	bls.n	800532e <_free_r+0x42>
 800531c:	6820      	ldr	r0, [r4, #0]
 800531e:	1821      	adds	r1, r4, r0
 8005320:	428b      	cmp	r3, r1
 8005322:	bf01      	itttt	eq
 8005324:	6819      	ldreq	r1, [r3, #0]
 8005326:	685b      	ldreq	r3, [r3, #4]
 8005328:	1809      	addeq	r1, r1, r0
 800532a:	6021      	streq	r1, [r4, #0]
 800532c:	e7ed      	b.n	800530a <_free_r+0x1e>
 800532e:	461a      	mov	r2, r3
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	b10b      	cbz	r3, 8005338 <_free_r+0x4c>
 8005334:	42a3      	cmp	r3, r4
 8005336:	d9fa      	bls.n	800532e <_free_r+0x42>
 8005338:	6811      	ldr	r1, [r2, #0]
 800533a:	1850      	adds	r0, r2, r1
 800533c:	42a0      	cmp	r0, r4
 800533e:	d10b      	bne.n	8005358 <_free_r+0x6c>
 8005340:	6820      	ldr	r0, [r4, #0]
 8005342:	4401      	add	r1, r0
 8005344:	1850      	adds	r0, r2, r1
 8005346:	4283      	cmp	r3, r0
 8005348:	6011      	str	r1, [r2, #0]
 800534a:	d1e0      	bne.n	800530e <_free_r+0x22>
 800534c:	6818      	ldr	r0, [r3, #0]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	6053      	str	r3, [r2, #4]
 8005352:	4408      	add	r0, r1
 8005354:	6010      	str	r0, [r2, #0]
 8005356:	e7da      	b.n	800530e <_free_r+0x22>
 8005358:	d902      	bls.n	8005360 <_free_r+0x74>
 800535a:	230c      	movs	r3, #12
 800535c:	602b      	str	r3, [r5, #0]
 800535e:	e7d6      	b.n	800530e <_free_r+0x22>
 8005360:	6820      	ldr	r0, [r4, #0]
 8005362:	1821      	adds	r1, r4, r0
 8005364:	428b      	cmp	r3, r1
 8005366:	bf04      	itt	eq
 8005368:	6819      	ldreq	r1, [r3, #0]
 800536a:	685b      	ldreq	r3, [r3, #4]
 800536c:	6063      	str	r3, [r4, #4]
 800536e:	bf04      	itt	eq
 8005370:	1809      	addeq	r1, r1, r0
 8005372:	6021      	streq	r1, [r4, #0]
 8005374:	6054      	str	r4, [r2, #4]
 8005376:	e7ca      	b.n	800530e <_free_r+0x22>
 8005378:	bd38      	pop	{r3, r4, r5, pc}
 800537a:	bf00      	nop
 800537c:	20004bf8 	.word	0x20004bf8

08005380 <__malloc_lock>:
 8005380:	4801      	ldr	r0, [pc, #4]	@ (8005388 <__malloc_lock+0x8>)
 8005382:	f7ff bfa3 	b.w	80052cc <__retarget_lock_acquire_recursive>
 8005386:	bf00      	nop
 8005388:	20004bf4 	.word	0x20004bf4

0800538c <__malloc_unlock>:
 800538c:	4801      	ldr	r0, [pc, #4]	@ (8005394 <__malloc_unlock+0x8>)
 800538e:	f7ff bf9e 	b.w	80052ce <__retarget_lock_release_recursive>
 8005392:	bf00      	nop
 8005394:	20004bf4 	.word	0x20004bf4

08005398 <_init>:
 8005398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800539a:	bf00      	nop
 800539c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800539e:	bc08      	pop	{r3}
 80053a0:	469e      	mov	lr, r3
 80053a2:	4770      	bx	lr

080053a4 <_fini>:
 80053a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053a6:	bf00      	nop
 80053a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053aa:	bc08      	pop	{r3}
 80053ac:	469e      	mov	lr, r3
 80053ae:	4770      	bx	lr
