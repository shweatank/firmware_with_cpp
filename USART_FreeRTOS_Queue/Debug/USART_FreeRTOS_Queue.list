
USART_FreeRTOS_Queue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005234  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080053e4  080053e4  000063e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005468  08005468  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005468  08005468  00006468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005470  08005470  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005470  08005470  00006470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005474  08005474  00006474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005478  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000700c  2**0
                  CONTENTS
 10 .bss          00004a08  2000000c  2000000c  0000700c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004a14  20004a14  0000700c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016495  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003024  00000000  00000000  0001d4d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013b8  00000000  00000000  000204f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f5b  00000000  00000000  000218b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002db6  00000000  00000000  0002280b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015614  00000000  00000000  000255c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3eac  00000000  00000000  0003abd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011ea81  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005380  00000000  00000000  0011eac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00123e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000000c 	.word	0x2000000c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080053cc 	.word	0x080053cc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000010 	.word	0x20000010
 80001ec:	080053cc 	.word	0x080053cc

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b96a 	b.w	80004dc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	460c      	mov	r4, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14e      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022c:	4694      	mov	ip, r2
 800022e:	458c      	cmp	ip, r1
 8000230:	4686      	mov	lr, r0
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	d962      	bls.n	80002fe <__udivmoddi4+0xde>
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0320 	rsb	r3, r2, #32
 800023e:	4091      	lsls	r1, r2
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	fa0c fc02 	lsl.w	ip, ip, r2
 8000248:	4319      	orrs	r1, r3
 800024a:	fa00 fe02 	lsl.w	lr, r0, r2
 800024e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000252:	fa1f f68c 	uxth.w	r6, ip
 8000256:	fbb1 f4f7 	udiv	r4, r1, r7
 800025a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025e:	fb07 1114 	mls	r1, r7, r4, r1
 8000262:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000266:	fb04 f106 	mul.w	r1, r4, r6
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f104 30ff 	add.w	r0, r4, #4294967295
 8000276:	f080 8112 	bcs.w	800049e <__udivmoddi4+0x27e>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 810f 	bls.w	800049e <__udivmoddi4+0x27e>
 8000280:	3c02      	subs	r4, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a59      	subs	r1, r3, r1
 8000286:	fa1f f38e 	uxth.w	r3, lr
 800028a:	fbb1 f0f7 	udiv	r0, r1, r7
 800028e:	fb07 1110 	mls	r1, r7, r0, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb00 f606 	mul.w	r6, r0, r6
 800029a:	429e      	cmp	r6, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x94>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a6:	f080 80fc 	bcs.w	80004a2 <__udivmoddi4+0x282>
 80002aa:	429e      	cmp	r6, r3
 80002ac:	f240 80f9 	bls.w	80004a2 <__udivmoddi4+0x282>
 80002b0:	4463      	add	r3, ip
 80002b2:	3802      	subs	r0, #2
 80002b4:	1b9b      	subs	r3, r3, r6
 80002b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ba:	2100      	movs	r1, #0
 80002bc:	b11d      	cbz	r5, 80002c6 <__udivmoddi4+0xa6>
 80002be:	40d3      	lsrs	r3, r2
 80002c0:	2200      	movs	r2, #0
 80002c2:	e9c5 3200 	strd	r3, r2, [r5]
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d905      	bls.n	80002da <__udivmoddi4+0xba>
 80002ce:	b10d      	cbz	r5, 80002d4 <__udivmoddi4+0xb4>
 80002d0:	e9c5 0100 	strd	r0, r1, [r5]
 80002d4:	2100      	movs	r1, #0
 80002d6:	4608      	mov	r0, r1
 80002d8:	e7f5      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d146      	bne.n	8000370 <__udivmoddi4+0x150>
 80002e2:	42a3      	cmp	r3, r4
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xcc>
 80002e6:	4290      	cmp	r0, r2
 80002e8:	f0c0 80f0 	bcc.w	80004cc <__udivmoddi4+0x2ac>
 80002ec:	1a86      	subs	r6, r0, r2
 80002ee:	eb64 0303 	sbc.w	r3, r4, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	d0e6      	beq.n	80002c6 <__udivmoddi4+0xa6>
 80002f8:	e9c5 6300 	strd	r6, r3, [r5]
 80002fc:	e7e3      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x204>
 8000304:	eba1 040c 	sub.w	r4, r1, ip
 8000308:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800030c:	fa1f f78c 	uxth.w	r7, ip
 8000310:	2101      	movs	r1, #1
 8000312:	fbb4 f6f8 	udiv	r6, r4, r8
 8000316:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031a:	fb08 4416 	mls	r4, r8, r6, r4
 800031e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000322:	fb07 f006 	mul.w	r0, r7, r6
 8000326:	4298      	cmp	r0, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x11c>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x11a>
 8000334:	4298      	cmp	r0, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 800033a:	4626      	mov	r6, r4
 800033c:	1a1c      	subs	r4, r3, r0
 800033e:	fa1f f38e 	uxth.w	r3, lr
 8000342:	fbb4 f0f8 	udiv	r0, r4, r8
 8000346:	fb08 4410 	mls	r4, r8, r0, r4
 800034a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034e:	fb00 f707 	mul.w	r7, r0, r7
 8000352:	429f      	cmp	r7, r3
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x148>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f100 34ff 	add.w	r4, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x146>
 8000360:	429f      	cmp	r7, r3
 8000362:	f200 80b0 	bhi.w	80004c6 <__udivmoddi4+0x2a6>
 8000366:	4620      	mov	r0, r4
 8000368:	1bdb      	subs	r3, r3, r7
 800036a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0x9c>
 8000370:	f1c1 0620 	rsb	r6, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 f706 	lsr.w	r7, r2, r6
 800037a:	431f      	orrs	r7, r3
 800037c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000380:	fa04 f301 	lsl.w	r3, r4, r1
 8000384:	ea43 030c 	orr.w	r3, r3, ip
 8000388:	40f4      	lsrs	r4, r6
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	0c38      	lsrs	r0, r7, #16
 8000390:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000394:	fbb4 fef0 	udiv	lr, r4, r0
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	fb00 441e 	mls	r4, r0, lr, r4
 80003a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a4:	fb0e f90c 	mul.w	r9, lr, ip
 80003a8:	45a1      	cmp	r9, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90a      	bls.n	80003c6 <__udivmoddi4+0x1a6>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b6:	f080 8084 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80003ba:	45a1      	cmp	r9, r4
 80003bc:	f240 8081 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80003c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	eba4 0409 	sub.w	r4, r4, r9
 80003ca:	fa1f f983 	uxth.w	r9, r3
 80003ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d2:	fb00 4413 	mls	r4, r0, r3, r4
 80003d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003da:	fb03 fc0c 	mul.w	ip, r3, ip
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x1d2>
 80003e2:	193c      	adds	r4, r7, r4
 80003e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e8:	d267      	bcs.n	80004ba <__udivmoddi4+0x29a>
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d965      	bls.n	80004ba <__udivmoddi4+0x29a>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	443c      	add	r4, r7
 80003f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f6:	fba0 9302 	umull	r9, r3, r0, r2
 80003fa:	eba4 040c 	sub.w	r4, r4, ip
 80003fe:	429c      	cmp	r4, r3
 8000400:	46ce      	mov	lr, r9
 8000402:	469c      	mov	ip, r3
 8000404:	d351      	bcc.n	80004aa <__udivmoddi4+0x28a>
 8000406:	d04e      	beq.n	80004a6 <__udivmoddi4+0x286>
 8000408:	b155      	cbz	r5, 8000420 <__udivmoddi4+0x200>
 800040a:	ebb8 030e 	subs.w	r3, r8, lr
 800040e:	eb64 040c 	sbc.w	r4, r4, ip
 8000412:	fa04 f606 	lsl.w	r6, r4, r6
 8000416:	40cb      	lsrs	r3, r1
 8000418:	431e      	orrs	r6, r3
 800041a:	40cc      	lsrs	r4, r1
 800041c:	e9c5 6400 	strd	r6, r4, [r5]
 8000420:	2100      	movs	r1, #0
 8000422:	e750      	b.n	80002c6 <__udivmoddi4+0xa6>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f103 	lsr.w	r1, r0, r3
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	fa24 f303 	lsr.w	r3, r4, r3
 8000434:	4094      	lsls	r4, r2
 8000436:	430c      	orrs	r4, r1
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000440:	fa1f f78c 	uxth.w	r7, ip
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3110 	mls	r1, r8, r0, r3
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000452:	fb00 f107 	mul.w	r1, r0, r7
 8000456:	4299      	cmp	r1, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x24c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000462:	d22c      	bcs.n	80004be <__udivmoddi4+0x29e>
 8000464:	4299      	cmp	r1, r3
 8000466:	d92a      	bls.n	80004be <__udivmoddi4+0x29e>
 8000468:	3802      	subs	r0, #2
 800046a:	4463      	add	r3, ip
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb3 f1f8 	udiv	r1, r3, r8
 8000474:	fb08 3311 	mls	r3, r8, r1, r3
 8000478:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800047c:	fb01 f307 	mul.w	r3, r1, r7
 8000480:	42a3      	cmp	r3, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x276>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f101 36ff 	add.w	r6, r1, #4294967295
 800048c:	d213      	bcs.n	80004b6 <__udivmoddi4+0x296>
 800048e:	42a3      	cmp	r3, r4
 8000490:	d911      	bls.n	80004b6 <__udivmoddi4+0x296>
 8000492:	3902      	subs	r1, #2
 8000494:	4464      	add	r4, ip
 8000496:	1ae4      	subs	r4, r4, r3
 8000498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800049c:	e739      	b.n	8000312 <__udivmoddi4+0xf2>
 800049e:	4604      	mov	r4, r0
 80004a0:	e6f0      	b.n	8000284 <__udivmoddi4+0x64>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e706      	b.n	80002b4 <__udivmoddi4+0x94>
 80004a6:	45c8      	cmp	r8, r9
 80004a8:	d2ae      	bcs.n	8000408 <__udivmoddi4+0x1e8>
 80004aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7a8      	b.n	8000408 <__udivmoddi4+0x1e8>
 80004b6:	4631      	mov	r1, r6
 80004b8:	e7ed      	b.n	8000496 <__udivmoddi4+0x276>
 80004ba:	4603      	mov	r3, r0
 80004bc:	e799      	b.n	80003f2 <__udivmoddi4+0x1d2>
 80004be:	4630      	mov	r0, r6
 80004c0:	e7d4      	b.n	800046c <__udivmoddi4+0x24c>
 80004c2:	46d6      	mov	lr, sl
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1a6>
 80004c6:	4463      	add	r3, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e74d      	b.n	8000368 <__udivmoddi4+0x148>
 80004cc:	4606      	mov	r6, r0
 80004ce:	4623      	mov	r3, r4
 80004d0:	4608      	mov	r0, r1
 80004d2:	e70f      	b.n	80002f4 <__udivmoddi4+0xd4>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	e730      	b.n	800033c <__udivmoddi4+0x11c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e4:	f000 fa9e 	bl	8000a24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e8:	f000 f824 	bl	8000534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ec:	f000 f8b6 	bl	800065c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004f0:	f000 f880 	bl	80005f4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f4:	f001 ffc4 	bl	8002480 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Blin_kled */
  BlinkledHandle = osMessageQueueNew(16, sizeof(uint8_t), &Blinkled_attributes);
 80004f8:	4a09      	ldr	r2, [pc, #36]	@ (8000520 <main+0x40>)
 80004fa:	2101      	movs	r1, #1
 80004fc:	2010      	movs	r0, #16
 80004fe:	f002 f8b6 	bl	800266e <osMessageQueueNew>
 8000502:	4603      	mov	r3, r0
 8000504:	4a07      	ldr	r2, [pc, #28]	@ (8000524 <main+0x44>)
 8000506:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink_led */
  blinkledHandle = osThreadNew(StartDefaultTask, NULL, &blinkled_attributes);
 8000508:	4a07      	ldr	r2, [pc, #28]	@ (8000528 <main+0x48>)
 800050a:	2100      	movs	r1, #0
 800050c:	4807      	ldr	r0, [pc, #28]	@ (800052c <main+0x4c>)
 800050e:	f002 f801 	bl	8002514 <osThreadNew>
 8000512:	4603      	mov	r3, r0
 8000514:	4a06      	ldr	r2, [pc, #24]	@ (8000530 <main+0x50>)
 8000516:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000518:	f001 ffd6 	bl	80024c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800051c:	bf00      	nop
 800051e:	e7fd      	b.n	800051c <main+0x3c>
 8000520:	08005438 	.word	0x08005438
 8000524:	20000074 	.word	0x20000074
 8000528:	08005414 	.word	0x08005414
 800052c:	0800073d 	.word	0x0800073d
 8000530:	20000070 	.word	0x20000070

08000534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b094      	sub	sp, #80	@ 0x50
 8000538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	f107 0320 	add.w	r3, r7, #32
 800053e:	2230      	movs	r2, #48	@ 0x30
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f004 ff08 	bl	8005358 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000548:	f107 030c 	add.w	r3, r7, #12
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000558:	2300      	movs	r3, #0
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	4b23      	ldr	r3, [pc, #140]	@ (80005ec <SystemClock_Config+0xb8>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000560:	4a22      	ldr	r2, [pc, #136]	@ (80005ec <SystemClock_Config+0xb8>)
 8000562:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000566:	6413      	str	r3, [r2, #64]	@ 0x40
 8000568:	4b20      	ldr	r3, [pc, #128]	@ (80005ec <SystemClock_Config+0xb8>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800056c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000570:	60bb      	str	r3, [r7, #8]
 8000572:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000574:	2300      	movs	r3, #0
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	4b1d      	ldr	r3, [pc, #116]	@ (80005f0 <SystemClock_Config+0xbc>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000580:	4a1b      	ldr	r2, [pc, #108]	@ (80005f0 <SystemClock_Config+0xbc>)
 8000582:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000586:	6013      	str	r3, [r2, #0]
 8000588:	4b19      	ldr	r3, [pc, #100]	@ (80005f0 <SystemClock_Config+0xbc>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000594:	2302      	movs	r3, #2
 8000596:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000598:	2301      	movs	r3, #1
 800059a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800059c:	2310      	movs	r3, #16
 800059e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005a0:	2300      	movs	r3, #0
 80005a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a4:	f107 0320 	add.w	r3, r7, #32
 80005a8:	4618      	mov	r0, r3
 80005aa:	f000 fd2b 	bl	8001004 <HAL_RCC_OscConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005b4:	f000 f8e0 	bl	8000778 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b8:	230f      	movs	r3, #15
 80005ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005bc:	2300      	movs	r3, #0
 80005be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 ff8e 	bl	80014f4 <HAL_RCC_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005de:	f000 f8cb 	bl	8000778 <Error_Handler>
  }
}
 80005e2:	bf00      	nop
 80005e4:	3750      	adds	r7, #80	@ 0x50
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40007000 	.word	0x40007000

080005f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 80005f8:	4b16      	ldr	r3, [pc, #88]	@ (8000654 <MX_USART1_UART_Init+0x60>)
 80005fa:	4a17      	ldr	r2, [pc, #92]	@ (8000658 <MX_USART1_UART_Init+0x64>)
 80005fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005fe:	4b15      	ldr	r3, [pc, #84]	@ (8000654 <MX_USART1_UART_Init+0x60>)
 8000600:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000604:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000606:	4b13      	ldr	r3, [pc, #76]	@ (8000654 <MX_USART1_UART_Init+0x60>)
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800060c:	4b11      	ldr	r3, [pc, #68]	@ (8000654 <MX_USART1_UART_Init+0x60>)
 800060e:	2200      	movs	r2, #0
 8000610:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000612:	4b10      	ldr	r3, [pc, #64]	@ (8000654 <MX_USART1_UART_Init+0x60>)
 8000614:	2200      	movs	r2, #0
 8000616:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000618:	4b0e      	ldr	r3, [pc, #56]	@ (8000654 <MX_USART1_UART_Init+0x60>)
 800061a:	220c      	movs	r2, #12
 800061c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800061e:	4b0d      	ldr	r3, [pc, #52]	@ (8000654 <MX_USART1_UART_Init+0x60>)
 8000620:	2200      	movs	r2, #0
 8000622:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000624:	4b0b      	ldr	r3, [pc, #44]	@ (8000654 <MX_USART1_UART_Init+0x60>)
 8000626:	2200      	movs	r2, #0
 8000628:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800062a:	480a      	ldr	r0, [pc, #40]	@ (8000654 <MX_USART1_UART_Init+0x60>)
 800062c:	f001 fc20 	bl	8001e70 <HAL_UART_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000636:	f000 f89f 	bl	8000778 <Error_Handler>
  }

  // Enable USART1 interrupt in NVIC
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800063a:	2025      	movs	r0, #37	@ 0x25
 800063c:	f000 faf4 	bl	8000c28 <HAL_NVIC_EnableIRQ>
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);  // Enable RXNE interrupt
 8000640:	4b04      	ldr	r3, [pc, #16]	@ (8000654 <MX_USART1_UART_Init+0x60>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	68da      	ldr	r2, [r3, #12]
 8000646:	4b03      	ldr	r3, [pc, #12]	@ (8000654 <MX_USART1_UART_Init+0x60>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f042 0220 	orr.w	r2, r2, #32
 800064e:	60da      	str	r2, [r3, #12]
}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000028 	.word	0x20000028
 8000658:	40011000 	.word	0x40011000

0800065c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b088      	sub	sp, #32
 8000660:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000662:	f107 030c 	add.w	r3, r7, #12
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
 8000670:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	4b20      	ldr	r3, [pc, #128]	@ (80006f8 <MX_GPIO_Init+0x9c>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067a:	4a1f      	ldr	r2, [pc, #124]	@ (80006f8 <MX_GPIO_Init+0x9c>)
 800067c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000680:	6313      	str	r3, [r2, #48]	@ 0x30
 8000682:	4b1d      	ldr	r3, [pc, #116]	@ (80006f8 <MX_GPIO_Init+0x9c>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000686:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	4b19      	ldr	r3, [pc, #100]	@ (80006f8 <MX_GPIO_Init+0x9c>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	4a18      	ldr	r2, [pc, #96]	@ (80006f8 <MX_GPIO_Init+0x9c>)
 8000698:	f043 0301 	orr.w	r3, r3, #1
 800069c:	6313      	str	r3, [r2, #48]	@ 0x30
 800069e:	4b16      	ldr	r3, [pc, #88]	@ (80006f8 <MX_GPIO_Init+0x9c>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	603b      	str	r3, [r7, #0]
 80006ae:	4b12      	ldr	r3, [pc, #72]	@ (80006f8 <MX_GPIO_Init+0x9c>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	4a11      	ldr	r2, [pc, #68]	@ (80006f8 <MX_GPIO_Init+0x9c>)
 80006b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ba:	4b0f      	ldr	r3, [pc, #60]	@ (80006f8 <MX_GPIO_Init+0x9c>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	683b      	ldr	r3, [r7, #0]

  /* Configure GPIO pin : PG13 (LED Pin) */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80006cc:	480b      	ldr	r0, [pc, #44]	@ (80006fc <MX_GPIO_Init+0xa0>)
 80006ce:	f000 fc65 	bl	8000f9c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80006d2:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80006d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d8:	2301      	movs	r3, #1
 80006da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	4619      	mov	r1, r3
 80006ea:	4804      	ldr	r0, [pc, #16]	@ (80006fc <MX_GPIO_Init+0xa0>)
 80006ec:	f000 faaa 	bl	8000c44 <HAL_GPIO_Init>
}
 80006f0:	bf00      	nop
 80006f2:	3720      	adds	r7, #32
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40021800 	.word	0x40021800

08000700 <USART1_IRQHandler>:
  * @brief  USART1 IRQ handler
  * @param  None
  * @retval None
  */
void USART1_IRQHandler(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
    uint8_t received_data;

    // Check if the RXNE flag is set (data is received)
    if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE))
 8000706:	4b0b      	ldr	r3, [pc, #44]	@ (8000734 <USART1_IRQHandler+0x34>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f003 0320 	and.w	r3, r3, #32
 8000710:	2b20      	cmp	r3, #32
 8000712:	d10b      	bne.n	800072c <USART1_IRQHandler+0x2c>
    {
        // Read the received data
    	received_data = (uint8_t)(huart1.Instance->DR);  // Reading DR clears the RXNE flag
 8000714:	4b07      	ldr	r3, [pc, #28]	@ (8000734 <USART1_IRQHandler+0x34>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	685b      	ldr	r3, [r3, #4]
 800071a:	b2db      	uxtb	r3, r3
 800071c:	71fb      	strb	r3, [r7, #7]
 // Reading RDR clears the RXNE flag

        // Put the received data into the message queue
        if (osMessageQueuePut(BlinkledHandle, &received_data, 0, 0) != osOK)
 800071e:	4b06      	ldr	r3, [pc, #24]	@ (8000738 <USART1_IRQHandler+0x38>)
 8000720:	6818      	ldr	r0, [r3, #0]
 8000722:	1df9      	adds	r1, r7, #7
 8000724:	2300      	movs	r3, #0
 8000726:	2200      	movs	r2, #0
 8000728:	f002 f814 	bl	8002754 <osMessageQueuePut>
        {
            // Handle error if message queue is full
        }
    }
}
 800072c:	bf00      	nop
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000028 	.word	0x20000028
 8000738:	20000074 	.word	0x20000074

0800073c <StartDefaultTask>:
  * @brief  Function implementing the blinkl_ed thread.
  * @param  argument: Not used
  * @retval None
  */
void StartDefaultTask(void *argument)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
    // Wait for a message from the USART interrupt handler
    if (osMessageQueueGet(BlinkledHandle, &received_char, NULL, osWaitForever) == osOK)
 8000744:	4b0a      	ldr	r3, [pc, #40]	@ (8000770 <StartDefaultTask+0x34>)
 8000746:	6818      	ldr	r0, [r3, #0]
 8000748:	f107 010f 	add.w	r1, r7, #15
 800074c:	f04f 33ff 	mov.w	r3, #4294967295
 8000750:	2200      	movs	r2, #0
 8000752:	f002 f85f 	bl	8002814 <osMessageQueueGet>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d1f3      	bne.n	8000744 <StartDefaultTask+0x8>
    {
      // Blink LED on PG13 based on received data (example behavior)
      HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14);  // Toggle LED
 800075c:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000760:	4804      	ldr	r0, [pc, #16]	@ (8000774 <StartDefaultTask+0x38>)
 8000762:	f000 fc34 	bl	8000fce <HAL_GPIO_TogglePin>
      osDelay(500);  // Delay for half a second
 8000766:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800076a:	f001 ff65 	bl	8002638 <osDelay>
    if (osMessageQueueGet(BlinkledHandle, &received_char, NULL, osWaitForever) == osOK)
 800076e:	e7e9      	b.n	8000744 <StartDefaultTask+0x8>
 8000770:	20000074 	.word	0x20000074
 8000774:	40021800 	.word	0x40021800

08000778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800077c:	b672      	cpsid	i
}
 800077e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  while (1)
 8000780:	bf00      	nop
 8000782:	e7fd      	b.n	8000780 <Error_Handler+0x8>

08000784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	4b12      	ldr	r3, [pc, #72]	@ (80007d8 <HAL_MspInit+0x54>)
 8000790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000792:	4a11      	ldr	r2, [pc, #68]	@ (80007d8 <HAL_MspInit+0x54>)
 8000794:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000798:	6453      	str	r3, [r2, #68]	@ 0x44
 800079a:	4b0f      	ldr	r3, [pc, #60]	@ (80007d8 <HAL_MspInit+0x54>)
 800079c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800079e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	603b      	str	r3, [r7, #0]
 80007aa:	4b0b      	ldr	r3, [pc, #44]	@ (80007d8 <HAL_MspInit+0x54>)
 80007ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ae:	4a0a      	ldr	r2, [pc, #40]	@ (80007d8 <HAL_MspInit+0x54>)
 80007b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80007b6:	4b08      	ldr	r3, [pc, #32]	@ (80007d8 <HAL_MspInit+0x54>)
 80007b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007be:	603b      	str	r3, [r7, #0]
 80007c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	210f      	movs	r1, #15
 80007c6:	f06f 0001 	mvn.w	r0, #1
 80007ca:	f000 fa11 	bl	8000bf0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40023800 	.word	0x40023800

080007dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08a      	sub	sp, #40	@ 0x28
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a1d      	ldr	r2, [pc, #116]	@ (8000870 <HAL_UART_MspInit+0x94>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d134      	bne.n	8000868 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	4b1c      	ldr	r3, [pc, #112]	@ (8000874 <HAL_UART_MspInit+0x98>)
 8000804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000806:	4a1b      	ldr	r2, [pc, #108]	@ (8000874 <HAL_UART_MspInit+0x98>)
 8000808:	f043 0310 	orr.w	r3, r3, #16
 800080c:	6453      	str	r3, [r2, #68]	@ 0x44
 800080e:	4b19      	ldr	r3, [pc, #100]	@ (8000874 <HAL_UART_MspInit+0x98>)
 8000810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000812:	f003 0310 	and.w	r3, r3, #16
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	4b15      	ldr	r3, [pc, #84]	@ (8000874 <HAL_UART_MspInit+0x98>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	4a14      	ldr	r2, [pc, #80]	@ (8000874 <HAL_UART_MspInit+0x98>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	6313      	str	r3, [r2, #48]	@ 0x30
 800082a:	4b12      	ldr	r3, [pc, #72]	@ (8000874 <HAL_UART_MspInit+0x98>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000836:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800083a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083c:	2302      	movs	r3, #2
 800083e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000844:	2303      	movs	r3, #3
 8000846:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000848:	2307      	movs	r3, #7
 800084a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	4619      	mov	r1, r3
 8000852:	4809      	ldr	r0, [pc, #36]	@ (8000878 <HAL_UART_MspInit+0x9c>)
 8000854:	f000 f9f6 	bl	8000c44 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000858:	2200      	movs	r2, #0
 800085a:	2105      	movs	r1, #5
 800085c:	2025      	movs	r0, #37	@ 0x25
 800085e:	f000 f9c7 	bl	8000bf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000862:	2025      	movs	r0, #37	@ 0x25
 8000864:	f000 f9e0 	bl	8000c28 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000868:	bf00      	nop
 800086a:	3728      	adds	r7, #40	@ 0x28
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40011000 	.word	0x40011000
 8000874:	40023800 	.word	0x40023800
 8000878:	40020000 	.word	0x40020000

0800087c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08c      	sub	sp, #48	@ 0x30
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000884:	2300      	movs	r3, #0
 8000886:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000888:	2300      	movs	r3, #0
 800088a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800088c:	2300      	movs	r3, #0
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	4b2e      	ldr	r3, [pc, #184]	@ (800094c <HAL_InitTick+0xd0>)
 8000892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000894:	4a2d      	ldr	r2, [pc, #180]	@ (800094c <HAL_InitTick+0xd0>)
 8000896:	f043 0301 	orr.w	r3, r3, #1
 800089a:	6453      	str	r3, [r2, #68]	@ 0x44
 800089c:	4b2b      	ldr	r3, [pc, #172]	@ (800094c <HAL_InitTick+0xd0>)
 800089e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008a0:	f003 0301 	and.w	r3, r3, #1
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008a8:	f107 020c 	add.w	r2, r7, #12
 80008ac:	f107 0310 	add.w	r3, r7, #16
 80008b0:	4611      	mov	r1, r2
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 fffe 	bl	80018b4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80008b8:	f000 ffe8 	bl	800188c <HAL_RCC_GetPCLK2Freq>
 80008bc:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008c0:	4a23      	ldr	r2, [pc, #140]	@ (8000950 <HAL_InitTick+0xd4>)
 80008c2:	fba2 2303 	umull	r2, r3, r2, r3
 80008c6:	0c9b      	lsrs	r3, r3, #18
 80008c8:	3b01      	subs	r3, #1
 80008ca:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80008cc:	4b21      	ldr	r3, [pc, #132]	@ (8000954 <HAL_InitTick+0xd8>)
 80008ce:	4a22      	ldr	r2, [pc, #136]	@ (8000958 <HAL_InitTick+0xdc>)
 80008d0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80008d2:	4b20      	ldr	r3, [pc, #128]	@ (8000954 <HAL_InitTick+0xd8>)
 80008d4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008d8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80008da:	4a1e      	ldr	r2, [pc, #120]	@ (8000954 <HAL_InitTick+0xd8>)
 80008dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008de:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80008e0:	4b1c      	ldr	r3, [pc, #112]	@ (8000954 <HAL_InitTick+0xd8>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000954 <HAL_InitTick+0xd8>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ec:	4b19      	ldr	r3, [pc, #100]	@ (8000954 <HAL_InitTick+0xd8>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80008f2:	4818      	ldr	r0, [pc, #96]	@ (8000954 <HAL_InitTick+0xd8>)
 80008f4:	f001 f810 	bl	8001918 <HAL_TIM_Base_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80008fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000902:	2b00      	cmp	r3, #0
 8000904:	d11b      	bne.n	800093e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000906:	4813      	ldr	r0, [pc, #76]	@ (8000954 <HAL_InitTick+0xd8>)
 8000908:	f001 f860 	bl	80019cc <HAL_TIM_Base_Start_IT>
 800090c:	4603      	mov	r3, r0
 800090e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000912:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000916:	2b00      	cmp	r3, #0
 8000918:	d111      	bne.n	800093e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800091a:	2019      	movs	r0, #25
 800091c:	f000 f984 	bl	8000c28 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2b0f      	cmp	r3, #15
 8000924:	d808      	bhi.n	8000938 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000926:	2200      	movs	r2, #0
 8000928:	6879      	ldr	r1, [r7, #4]
 800092a:	2019      	movs	r0, #25
 800092c:	f000 f960 	bl	8000bf0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000930:	4a0a      	ldr	r2, [pc, #40]	@ (800095c <HAL_InitTick+0xe0>)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	6013      	str	r3, [r2, #0]
 8000936:	e002      	b.n	800093e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000938:	2301      	movs	r3, #1
 800093a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800093e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000942:	4618      	mov	r0, r3
 8000944:	3730      	adds	r7, #48	@ 0x30
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40023800 	.word	0x40023800
 8000950:	431bde83 	.word	0x431bde83
 8000954:	20000078 	.word	0x20000078
 8000958:	40010000 	.word	0x40010000
 800095c:	20000004 	.word	0x20000004

08000960 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <NMI_Handler+0x4>

08000968 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <HardFault_Handler+0x4>

08000970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <MemManage_Handler+0x4>

08000978 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <BusFault_Handler+0x4>

08000980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <UsageFault_Handler+0x4>

08000988 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
	...

08000998 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800099c:	4802      	ldr	r0, [pc, #8]	@ (80009a8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800099e:	f001 f885 	bl	8001aac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000078 	.word	0x20000078

080009ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009b0:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <SystemInit+0x20>)
 80009b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009b6:	4a05      	ldr	r2, [pc, #20]	@ (80009cc <SystemInit+0x20>)
 80009b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80009d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a08 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009d4:	f7ff ffea 	bl	80009ac <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009d8:	480c      	ldr	r0, [pc, #48]	@ (8000a0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009da:	490d      	ldr	r1, [pc, #52]	@ (8000a10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000a14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009e0:	e002      	b.n	80009e8 <LoopCopyDataInit>

080009e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009e6:	3304      	adds	r3, #4

080009e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009ec:	d3f9      	bcc.n	80009e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000a18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009f0:	4c0a      	ldr	r4, [pc, #40]	@ (8000a1c <LoopFillZerobss+0x22>)
  movs r3, #0
 80009f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f4:	e001      	b.n	80009fa <LoopFillZerobss>

080009f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f8:	3204      	adds	r2, #4

080009fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009fc:	d3fb      	bcc.n	80009f6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80009fe:	f004 fcb3 	bl	8005368 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a02:	f7ff fd6d 	bl	80004e0 <main>
  bx  lr    
 8000a06:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000a08:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000a0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a10:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a14:	08005478 	.word	0x08005478
  ldr r2, =_sbss
 8000a18:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a1c:	20004a14 	.word	0x20004a14

08000a20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a20:	e7fe      	b.n	8000a20 <ADC_IRQHandler>
	...

08000a24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a28:	4b0e      	ldr	r3, [pc, #56]	@ (8000a64 <HAL_Init+0x40>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a64 <HAL_Init+0x40>)
 8000a2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a34:	4b0b      	ldr	r3, [pc, #44]	@ (8000a64 <HAL_Init+0x40>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a0a      	ldr	r2, [pc, #40]	@ (8000a64 <HAL_Init+0x40>)
 8000a3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a40:	4b08      	ldr	r3, [pc, #32]	@ (8000a64 <HAL_Init+0x40>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a07      	ldr	r2, [pc, #28]	@ (8000a64 <HAL_Init+0x40>)
 8000a46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a4c:	2003      	movs	r0, #3
 8000a4e:	f000 f8c4 	bl	8000bda <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a52:	200f      	movs	r0, #15
 8000a54:	f7ff ff12 	bl	800087c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a58:	f7ff fe94 	bl	8000784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40023c00 	.word	0x40023c00

08000a68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a6c:	4b03      	ldr	r3, [pc, #12]	@ (8000a7c <HAL_GetTick+0x14>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	200000c0 	.word	0x200000c0

08000a80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f003 0307 	and.w	r3, r3, #7
 8000a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a90:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a96:	68ba      	ldr	r2, [r7, #8]
 8000a98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aa8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000aac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ab2:	4a04      	ldr	r2, [pc, #16]	@ (8000ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	60d3      	str	r3, [r2, #12]
}
 8000ab8:	bf00      	nop
 8000aba:	3714      	adds	r7, #20
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000acc:	4b04      	ldr	r3, [pc, #16]	@ (8000ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	0a1b      	lsrs	r3, r3, #8
 8000ad2:	f003 0307 	and.w	r3, r3, #7
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	db0b      	blt.n	8000b0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	f003 021f 	and.w	r2, r3, #31
 8000afc:	4907      	ldr	r1, [pc, #28]	@ (8000b1c <__NVIC_EnableIRQ+0x38>)
 8000afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b02:	095b      	lsrs	r3, r3, #5
 8000b04:	2001      	movs	r0, #1
 8000b06:	fa00 f202 	lsl.w	r2, r0, r2
 8000b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b0e:	bf00      	nop
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	e000e100 	.word	0xe000e100

08000b20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	6039      	str	r1, [r7, #0]
 8000b2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	db0a      	blt.n	8000b4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	490c      	ldr	r1, [pc, #48]	@ (8000b6c <__NVIC_SetPriority+0x4c>)
 8000b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3e:	0112      	lsls	r2, r2, #4
 8000b40:	b2d2      	uxtb	r2, r2
 8000b42:	440b      	add	r3, r1
 8000b44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b48:	e00a      	b.n	8000b60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	b2da      	uxtb	r2, r3
 8000b4e:	4908      	ldr	r1, [pc, #32]	@ (8000b70 <__NVIC_SetPriority+0x50>)
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	f003 030f 	and.w	r3, r3, #15
 8000b56:	3b04      	subs	r3, #4
 8000b58:	0112      	lsls	r2, r2, #4
 8000b5a:	b2d2      	uxtb	r2, r2
 8000b5c:	440b      	add	r3, r1
 8000b5e:	761a      	strb	r2, [r3, #24]
}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	e000e100 	.word	0xe000e100
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b089      	sub	sp, #36	@ 0x24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b88:	69fb      	ldr	r3, [r7, #28]
 8000b8a:	f1c3 0307 	rsb	r3, r3, #7
 8000b8e:	2b04      	cmp	r3, #4
 8000b90:	bf28      	it	cs
 8000b92:	2304      	movcs	r3, #4
 8000b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	3304      	adds	r3, #4
 8000b9a:	2b06      	cmp	r3, #6
 8000b9c:	d902      	bls.n	8000ba4 <NVIC_EncodePriority+0x30>
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	3b03      	subs	r3, #3
 8000ba2:	e000      	b.n	8000ba6 <NVIC_EncodePriority+0x32>
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	43da      	mvns	r2, r3
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	401a      	ands	r2, r3
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc6:	43d9      	mvns	r1, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bcc:	4313      	orrs	r3, r2
         );
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3724      	adds	r7, #36	@ 0x24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b082      	sub	sp, #8
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f7ff ff4c 	bl	8000a80 <__NVIC_SetPriorityGrouping>
}
 8000be8:	bf00      	nop
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
 8000bfc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c02:	f7ff ff61 	bl	8000ac8 <__NVIC_GetPriorityGrouping>
 8000c06:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c08:	687a      	ldr	r2, [r7, #4]
 8000c0a:	68b9      	ldr	r1, [r7, #8]
 8000c0c:	6978      	ldr	r0, [r7, #20]
 8000c0e:	f7ff ffb1 	bl	8000b74 <NVIC_EncodePriority>
 8000c12:	4602      	mov	r2, r0
 8000c14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c18:	4611      	mov	r1, r2
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff ff80 	bl	8000b20 <__NVIC_SetPriority>
}
 8000c20:	bf00      	nop
 8000c22:	3718      	adds	r7, #24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff ff54 	bl	8000ae4 <__NVIC_EnableIRQ>
}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b089      	sub	sp, #36	@ 0x24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61fb      	str	r3, [r7, #28]
 8000c5e:	e177      	b.n	8000f50 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c60:	2201      	movs	r2, #1
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	697a      	ldr	r2, [r7, #20]
 8000c70:	4013      	ands	r3, r2
 8000c72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c74:	693a      	ldr	r2, [r7, #16]
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	f040 8166 	bne.w	8000f4a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f003 0303 	and.w	r3, r3, #3
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d005      	beq.n	8000c96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c92:	2b02      	cmp	r3, #2
 8000c94:	d130      	bne.n	8000cf8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	2203      	movs	r2, #3
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	43db      	mvns	r3, r3
 8000ca8:	69ba      	ldr	r2, [r7, #24]
 8000caa:	4013      	ands	r3, r2
 8000cac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	68da      	ldr	r2, [r3, #12]
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	69ba      	ldr	r2, [r7, #24]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	69ba      	ldr	r2, [r7, #24]
 8000cc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ccc:	2201      	movs	r2, #1
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	091b      	lsrs	r3, r3, #4
 8000ce2:	f003 0201 	and.w	r2, r3, #1
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f003 0303 	and.w	r3, r3, #3
 8000d00:	2b03      	cmp	r3, #3
 8000d02:	d017      	beq.n	8000d34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	2203      	movs	r2, #3
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	43db      	mvns	r3, r3
 8000d16:	69ba      	ldr	r2, [r7, #24]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	689a      	ldr	r2, [r3, #8]
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f003 0303 	and.w	r3, r3, #3
 8000d3c:	2b02      	cmp	r3, #2
 8000d3e:	d123      	bne.n	8000d88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	08da      	lsrs	r2, r3, #3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3208      	adds	r2, #8
 8000d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	f003 0307 	and.w	r3, r3, #7
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	220f      	movs	r2, #15
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	69ba      	ldr	r2, [r7, #24]
 8000d60:	4013      	ands	r3, r2
 8000d62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	691a      	ldr	r2, [r3, #16]
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	08da      	lsrs	r2, r3, #3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	3208      	adds	r2, #8
 8000d82:	69b9      	ldr	r1, [r7, #24]
 8000d84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	2203      	movs	r2, #3
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f003 0203 	and.w	r2, r3, #3
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	f000 80c0 	beq.w	8000f4a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	4b66      	ldr	r3, [pc, #408]	@ (8000f68 <HAL_GPIO_Init+0x324>)
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dd2:	4a65      	ldr	r2, [pc, #404]	@ (8000f68 <HAL_GPIO_Init+0x324>)
 8000dd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dda:	4b63      	ldr	r3, [pc, #396]	@ (8000f68 <HAL_GPIO_Init+0x324>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000de6:	4a61      	ldr	r2, [pc, #388]	@ (8000f6c <HAL_GPIO_Init+0x328>)
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	089b      	lsrs	r3, r3, #2
 8000dec:	3302      	adds	r3, #2
 8000dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	f003 0303 	and.w	r3, r3, #3
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	220f      	movs	r2, #15
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43db      	mvns	r3, r3
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	4013      	ands	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a58      	ldr	r2, [pc, #352]	@ (8000f70 <HAL_GPIO_Init+0x32c>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d037      	beq.n	8000e82 <HAL_GPIO_Init+0x23e>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a57      	ldr	r2, [pc, #348]	@ (8000f74 <HAL_GPIO_Init+0x330>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d031      	beq.n	8000e7e <HAL_GPIO_Init+0x23a>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a56      	ldr	r2, [pc, #344]	@ (8000f78 <HAL_GPIO_Init+0x334>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d02b      	beq.n	8000e7a <HAL_GPIO_Init+0x236>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a55      	ldr	r2, [pc, #340]	@ (8000f7c <HAL_GPIO_Init+0x338>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d025      	beq.n	8000e76 <HAL_GPIO_Init+0x232>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a54      	ldr	r2, [pc, #336]	@ (8000f80 <HAL_GPIO_Init+0x33c>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d01f      	beq.n	8000e72 <HAL_GPIO_Init+0x22e>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a53      	ldr	r2, [pc, #332]	@ (8000f84 <HAL_GPIO_Init+0x340>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d019      	beq.n	8000e6e <HAL_GPIO_Init+0x22a>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a52      	ldr	r2, [pc, #328]	@ (8000f88 <HAL_GPIO_Init+0x344>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d013      	beq.n	8000e6a <HAL_GPIO_Init+0x226>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a51      	ldr	r2, [pc, #324]	@ (8000f8c <HAL_GPIO_Init+0x348>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d00d      	beq.n	8000e66 <HAL_GPIO_Init+0x222>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a50      	ldr	r2, [pc, #320]	@ (8000f90 <HAL_GPIO_Init+0x34c>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d007      	beq.n	8000e62 <HAL_GPIO_Init+0x21e>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a4f      	ldr	r2, [pc, #316]	@ (8000f94 <HAL_GPIO_Init+0x350>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d101      	bne.n	8000e5e <HAL_GPIO_Init+0x21a>
 8000e5a:	2309      	movs	r3, #9
 8000e5c:	e012      	b.n	8000e84 <HAL_GPIO_Init+0x240>
 8000e5e:	230a      	movs	r3, #10
 8000e60:	e010      	b.n	8000e84 <HAL_GPIO_Init+0x240>
 8000e62:	2308      	movs	r3, #8
 8000e64:	e00e      	b.n	8000e84 <HAL_GPIO_Init+0x240>
 8000e66:	2307      	movs	r3, #7
 8000e68:	e00c      	b.n	8000e84 <HAL_GPIO_Init+0x240>
 8000e6a:	2306      	movs	r3, #6
 8000e6c:	e00a      	b.n	8000e84 <HAL_GPIO_Init+0x240>
 8000e6e:	2305      	movs	r3, #5
 8000e70:	e008      	b.n	8000e84 <HAL_GPIO_Init+0x240>
 8000e72:	2304      	movs	r3, #4
 8000e74:	e006      	b.n	8000e84 <HAL_GPIO_Init+0x240>
 8000e76:	2303      	movs	r3, #3
 8000e78:	e004      	b.n	8000e84 <HAL_GPIO_Init+0x240>
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	e002      	b.n	8000e84 <HAL_GPIO_Init+0x240>
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e000      	b.n	8000e84 <HAL_GPIO_Init+0x240>
 8000e82:	2300      	movs	r3, #0
 8000e84:	69fa      	ldr	r2, [r7, #28]
 8000e86:	f002 0203 	and.w	r2, r2, #3
 8000e8a:	0092      	lsls	r2, r2, #2
 8000e8c:	4093      	lsls	r3, r2
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e94:	4935      	ldr	r1, [pc, #212]	@ (8000f6c <HAL_GPIO_Init+0x328>)
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	089b      	lsrs	r3, r3, #2
 8000e9a:	3302      	adds	r3, #2
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ea2:	4b3d      	ldr	r3, [pc, #244]	@ (8000f98 <HAL_GPIO_Init+0x354>)
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d003      	beq.n	8000ec6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ec6:	4a34      	ldr	r2, [pc, #208]	@ (8000f98 <HAL_GPIO_Init+0x354>)
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ecc:	4b32      	ldr	r3, [pc, #200]	@ (8000f98 <HAL_GPIO_Init+0x354>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d003      	beq.n	8000ef0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ef0:	4a29      	ldr	r2, [pc, #164]	@ (8000f98 <HAL_GPIO_Init+0x354>)
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ef6:	4b28      	ldr	r3, [pc, #160]	@ (8000f98 <HAL_GPIO_Init+0x354>)
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	43db      	mvns	r3, r3
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	4013      	ands	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d003      	beq.n	8000f1a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f1a:	4a1f      	ldr	r2, [pc, #124]	@ (8000f98 <HAL_GPIO_Init+0x354>)
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f20:	4b1d      	ldr	r3, [pc, #116]	@ (8000f98 <HAL_GPIO_Init+0x354>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d003      	beq.n	8000f44 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f44:	4a14      	ldr	r2, [pc, #80]	@ (8000f98 <HAL_GPIO_Init+0x354>)
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	61fb      	str	r3, [r7, #28]
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	2b0f      	cmp	r3, #15
 8000f54:	f67f ae84 	bls.w	8000c60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f58:	bf00      	nop
 8000f5a:	bf00      	nop
 8000f5c:	3724      	adds	r7, #36	@ 0x24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40013800 	.word	0x40013800
 8000f70:	40020000 	.word	0x40020000
 8000f74:	40020400 	.word	0x40020400
 8000f78:	40020800 	.word	0x40020800
 8000f7c:	40020c00 	.word	0x40020c00
 8000f80:	40021000 	.word	0x40021000
 8000f84:	40021400 	.word	0x40021400
 8000f88:	40021800 	.word	0x40021800
 8000f8c:	40021c00 	.word	0x40021c00
 8000f90:	40022000 	.word	0x40022000
 8000f94:	40022400 	.word	0x40022400
 8000f98:	40013c00 	.word	0x40013c00

08000f9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	807b      	strh	r3, [r7, #2]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fac:	787b      	ldrb	r3, [r7, #1]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d003      	beq.n	8000fba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fb2:	887a      	ldrh	r2, [r7, #2]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fb8:	e003      	b.n	8000fc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fba:	887b      	ldrh	r3, [r7, #2]
 8000fbc:	041a      	lsls	r2, r3, #16
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	619a      	str	r2, [r3, #24]
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	b085      	sub	sp, #20
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fe0:	887a      	ldrh	r2, [r7, #2]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	041a      	lsls	r2, r3, #16
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	43d9      	mvns	r1, r3
 8000fec:	887b      	ldrh	r3, [r7, #2]
 8000fee:	400b      	ands	r3, r1
 8000ff0:	431a      	orrs	r2, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	619a      	str	r2, [r3, #24]
}
 8000ff6:	bf00      	nop
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
	...

08001004 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d101      	bne.n	8001016 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e267      	b.n	80014e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	2b00      	cmp	r3, #0
 8001020:	d075      	beq.n	800110e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001022:	4b88      	ldr	r3, [pc, #544]	@ (8001244 <HAL_RCC_OscConfig+0x240>)
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	f003 030c 	and.w	r3, r3, #12
 800102a:	2b04      	cmp	r3, #4
 800102c:	d00c      	beq.n	8001048 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800102e:	4b85      	ldr	r3, [pc, #532]	@ (8001244 <HAL_RCC_OscConfig+0x240>)
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001036:	2b08      	cmp	r3, #8
 8001038:	d112      	bne.n	8001060 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800103a:	4b82      	ldr	r3, [pc, #520]	@ (8001244 <HAL_RCC_OscConfig+0x240>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001042:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001046:	d10b      	bne.n	8001060 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001048:	4b7e      	ldr	r3, [pc, #504]	@ (8001244 <HAL_RCC_OscConfig+0x240>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d05b      	beq.n	800110c <HAL_RCC_OscConfig+0x108>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d157      	bne.n	800110c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800105c:	2301      	movs	r3, #1
 800105e:	e242      	b.n	80014e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001068:	d106      	bne.n	8001078 <HAL_RCC_OscConfig+0x74>
 800106a:	4b76      	ldr	r3, [pc, #472]	@ (8001244 <HAL_RCC_OscConfig+0x240>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a75      	ldr	r2, [pc, #468]	@ (8001244 <HAL_RCC_OscConfig+0x240>)
 8001070:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001074:	6013      	str	r3, [r2, #0]
 8001076:	e01d      	b.n	80010b4 <HAL_RCC_OscConfig+0xb0>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001080:	d10c      	bne.n	800109c <HAL_RCC_OscConfig+0x98>
 8001082:	4b70      	ldr	r3, [pc, #448]	@ (8001244 <HAL_RCC_OscConfig+0x240>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a6f      	ldr	r2, [pc, #444]	@ (8001244 <HAL_RCC_OscConfig+0x240>)
 8001088:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800108c:	6013      	str	r3, [r2, #0]
 800108e:	4b6d      	ldr	r3, [pc, #436]	@ (8001244 <HAL_RCC_OscConfig+0x240>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a6c      	ldr	r2, [pc, #432]	@ (8001244 <HAL_RCC_OscConfig+0x240>)
 8001094:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001098:	6013      	str	r3, [r2, #0]
 800109a:	e00b      	b.n	80010b4 <HAL_RCC_OscConfig+0xb0>
 800109c:	4b69      	ldr	r3, [pc, #420]	@ (8001244 <HAL_RCC_OscConfig+0x240>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a68      	ldr	r2, [pc, #416]	@ (8001244 <HAL_RCC_OscConfig+0x240>)
 80010a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010a6:	6013      	str	r3, [r2, #0]
 80010a8:	4b66      	ldr	r3, [pc, #408]	@ (8001244 <HAL_RCC_OscConfig+0x240>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a65      	ldr	r2, [pc, #404]	@ (8001244 <HAL_RCC_OscConfig+0x240>)
 80010ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d013      	beq.n	80010e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010bc:	f7ff fcd4 	bl	8000a68 <HAL_GetTick>
 80010c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010c2:	e008      	b.n	80010d6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010c4:	f7ff fcd0 	bl	8000a68 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	2b64      	cmp	r3, #100	@ 0x64
 80010d0:	d901      	bls.n	80010d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	e207      	b.n	80014e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010d6:	4b5b      	ldr	r3, [pc, #364]	@ (8001244 <HAL_RCC_OscConfig+0x240>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d0f0      	beq.n	80010c4 <HAL_RCC_OscConfig+0xc0>
 80010e2:	e014      	b.n	800110e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e4:	f7ff fcc0 	bl	8000a68 <HAL_GetTick>
 80010e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ea:	e008      	b.n	80010fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010ec:	f7ff fcbc 	bl	8000a68 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b64      	cmp	r3, #100	@ 0x64
 80010f8:	d901      	bls.n	80010fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e1f3      	b.n	80014e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010fe:	4b51      	ldr	r3, [pc, #324]	@ (8001244 <HAL_RCC_OscConfig+0x240>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d1f0      	bne.n	80010ec <HAL_RCC_OscConfig+0xe8>
 800110a:	e000      	b.n	800110e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800110c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	2b00      	cmp	r3, #0
 8001118:	d063      	beq.n	80011e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800111a:	4b4a      	ldr	r3, [pc, #296]	@ (8001244 <HAL_RCC_OscConfig+0x240>)
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	f003 030c 	and.w	r3, r3, #12
 8001122:	2b00      	cmp	r3, #0
 8001124:	d00b      	beq.n	800113e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001126:	4b47      	ldr	r3, [pc, #284]	@ (8001244 <HAL_RCC_OscConfig+0x240>)
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800112e:	2b08      	cmp	r3, #8
 8001130:	d11c      	bne.n	800116c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001132:	4b44      	ldr	r3, [pc, #272]	@ (8001244 <HAL_RCC_OscConfig+0x240>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d116      	bne.n	800116c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800113e:	4b41      	ldr	r3, [pc, #260]	@ (8001244 <HAL_RCC_OscConfig+0x240>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	2b00      	cmp	r3, #0
 8001148:	d005      	beq.n	8001156 <HAL_RCC_OscConfig+0x152>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d001      	beq.n	8001156 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e1c7      	b.n	80014e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001156:	4b3b      	ldr	r3, [pc, #236]	@ (8001244 <HAL_RCC_OscConfig+0x240>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	691b      	ldr	r3, [r3, #16]
 8001162:	00db      	lsls	r3, r3, #3
 8001164:	4937      	ldr	r1, [pc, #220]	@ (8001244 <HAL_RCC_OscConfig+0x240>)
 8001166:	4313      	orrs	r3, r2
 8001168:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800116a:	e03a      	b.n	80011e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d020      	beq.n	80011b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001174:	4b34      	ldr	r3, [pc, #208]	@ (8001248 <HAL_RCC_OscConfig+0x244>)
 8001176:	2201      	movs	r2, #1
 8001178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800117a:	f7ff fc75 	bl	8000a68 <HAL_GetTick>
 800117e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001180:	e008      	b.n	8001194 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001182:	f7ff fc71 	bl	8000a68 <HAL_GetTick>
 8001186:	4602      	mov	r2, r0
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	2b02      	cmp	r3, #2
 800118e:	d901      	bls.n	8001194 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001190:	2303      	movs	r3, #3
 8001192:	e1a8      	b.n	80014e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001194:	4b2b      	ldr	r3, [pc, #172]	@ (8001244 <HAL_RCC_OscConfig+0x240>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0302 	and.w	r3, r3, #2
 800119c:	2b00      	cmp	r3, #0
 800119e:	d0f0      	beq.n	8001182 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a0:	4b28      	ldr	r3, [pc, #160]	@ (8001244 <HAL_RCC_OscConfig+0x240>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	691b      	ldr	r3, [r3, #16]
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	4925      	ldr	r1, [pc, #148]	@ (8001244 <HAL_RCC_OscConfig+0x240>)
 80011b0:	4313      	orrs	r3, r2
 80011b2:	600b      	str	r3, [r1, #0]
 80011b4:	e015      	b.n	80011e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011b6:	4b24      	ldr	r3, [pc, #144]	@ (8001248 <HAL_RCC_OscConfig+0x244>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011bc:	f7ff fc54 	bl	8000a68 <HAL_GetTick>
 80011c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011c2:	e008      	b.n	80011d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011c4:	f7ff fc50 	bl	8000a68 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d901      	bls.n	80011d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80011d2:	2303      	movs	r3, #3
 80011d4:	e187      	b.n	80014e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001244 <HAL_RCC_OscConfig+0x240>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d1f0      	bne.n	80011c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0308 	and.w	r3, r3, #8
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d036      	beq.n	800125c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d016      	beq.n	8001224 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011f6:	4b15      	ldr	r3, [pc, #84]	@ (800124c <HAL_RCC_OscConfig+0x248>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011fc:	f7ff fc34 	bl	8000a68 <HAL_GetTick>
 8001200:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001202:	e008      	b.n	8001216 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001204:	f7ff fc30 	bl	8000a68 <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b02      	cmp	r3, #2
 8001210:	d901      	bls.n	8001216 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e167      	b.n	80014e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001216:	4b0b      	ldr	r3, [pc, #44]	@ (8001244 <HAL_RCC_OscConfig+0x240>)
 8001218:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	2b00      	cmp	r3, #0
 8001220:	d0f0      	beq.n	8001204 <HAL_RCC_OscConfig+0x200>
 8001222:	e01b      	b.n	800125c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001224:	4b09      	ldr	r3, [pc, #36]	@ (800124c <HAL_RCC_OscConfig+0x248>)
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800122a:	f7ff fc1d 	bl	8000a68 <HAL_GetTick>
 800122e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001230:	e00e      	b.n	8001250 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001232:	f7ff fc19 	bl	8000a68 <HAL_GetTick>
 8001236:	4602      	mov	r2, r0
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	2b02      	cmp	r3, #2
 800123e:	d907      	bls.n	8001250 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001240:	2303      	movs	r3, #3
 8001242:	e150      	b.n	80014e6 <HAL_RCC_OscConfig+0x4e2>
 8001244:	40023800 	.word	0x40023800
 8001248:	42470000 	.word	0x42470000
 800124c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001250:	4b88      	ldr	r3, [pc, #544]	@ (8001474 <HAL_RCC_OscConfig+0x470>)
 8001252:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001254:	f003 0302 	and.w	r3, r3, #2
 8001258:	2b00      	cmp	r3, #0
 800125a:	d1ea      	bne.n	8001232 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0304 	and.w	r3, r3, #4
 8001264:	2b00      	cmp	r3, #0
 8001266:	f000 8097 	beq.w	8001398 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800126a:	2300      	movs	r3, #0
 800126c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800126e:	4b81      	ldr	r3, [pc, #516]	@ (8001474 <HAL_RCC_OscConfig+0x470>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001272:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d10f      	bne.n	800129a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	4b7d      	ldr	r3, [pc, #500]	@ (8001474 <HAL_RCC_OscConfig+0x470>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001282:	4a7c      	ldr	r2, [pc, #496]	@ (8001474 <HAL_RCC_OscConfig+0x470>)
 8001284:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001288:	6413      	str	r3, [r2, #64]	@ 0x40
 800128a:	4b7a      	ldr	r3, [pc, #488]	@ (8001474 <HAL_RCC_OscConfig+0x470>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001296:	2301      	movs	r3, #1
 8001298:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800129a:	4b77      	ldr	r3, [pc, #476]	@ (8001478 <HAL_RCC_OscConfig+0x474>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d118      	bne.n	80012d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012a6:	4b74      	ldr	r3, [pc, #464]	@ (8001478 <HAL_RCC_OscConfig+0x474>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a73      	ldr	r2, [pc, #460]	@ (8001478 <HAL_RCC_OscConfig+0x474>)
 80012ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012b2:	f7ff fbd9 	bl	8000a68 <HAL_GetTick>
 80012b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012b8:	e008      	b.n	80012cc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012ba:	f7ff fbd5 	bl	8000a68 <HAL_GetTick>
 80012be:	4602      	mov	r2, r0
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d901      	bls.n	80012cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80012c8:	2303      	movs	r3, #3
 80012ca:	e10c      	b.n	80014e6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012cc:	4b6a      	ldr	r3, [pc, #424]	@ (8001478 <HAL_RCC_OscConfig+0x474>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d0f0      	beq.n	80012ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d106      	bne.n	80012ee <HAL_RCC_OscConfig+0x2ea>
 80012e0:	4b64      	ldr	r3, [pc, #400]	@ (8001474 <HAL_RCC_OscConfig+0x470>)
 80012e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012e4:	4a63      	ldr	r2, [pc, #396]	@ (8001474 <HAL_RCC_OscConfig+0x470>)
 80012e6:	f043 0301 	orr.w	r3, r3, #1
 80012ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80012ec:	e01c      	b.n	8001328 <HAL_RCC_OscConfig+0x324>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	2b05      	cmp	r3, #5
 80012f4:	d10c      	bne.n	8001310 <HAL_RCC_OscConfig+0x30c>
 80012f6:	4b5f      	ldr	r3, [pc, #380]	@ (8001474 <HAL_RCC_OscConfig+0x470>)
 80012f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012fa:	4a5e      	ldr	r2, [pc, #376]	@ (8001474 <HAL_RCC_OscConfig+0x470>)
 80012fc:	f043 0304 	orr.w	r3, r3, #4
 8001300:	6713      	str	r3, [r2, #112]	@ 0x70
 8001302:	4b5c      	ldr	r3, [pc, #368]	@ (8001474 <HAL_RCC_OscConfig+0x470>)
 8001304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001306:	4a5b      	ldr	r2, [pc, #364]	@ (8001474 <HAL_RCC_OscConfig+0x470>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	6713      	str	r3, [r2, #112]	@ 0x70
 800130e:	e00b      	b.n	8001328 <HAL_RCC_OscConfig+0x324>
 8001310:	4b58      	ldr	r3, [pc, #352]	@ (8001474 <HAL_RCC_OscConfig+0x470>)
 8001312:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001314:	4a57      	ldr	r2, [pc, #348]	@ (8001474 <HAL_RCC_OscConfig+0x470>)
 8001316:	f023 0301 	bic.w	r3, r3, #1
 800131a:	6713      	str	r3, [r2, #112]	@ 0x70
 800131c:	4b55      	ldr	r3, [pc, #340]	@ (8001474 <HAL_RCC_OscConfig+0x470>)
 800131e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001320:	4a54      	ldr	r2, [pc, #336]	@ (8001474 <HAL_RCC_OscConfig+0x470>)
 8001322:	f023 0304 	bic.w	r3, r3, #4
 8001326:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d015      	beq.n	800135c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001330:	f7ff fb9a 	bl	8000a68 <HAL_GetTick>
 8001334:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001336:	e00a      	b.n	800134e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001338:	f7ff fb96 	bl	8000a68 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001346:	4293      	cmp	r3, r2
 8001348:	d901      	bls.n	800134e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e0cb      	b.n	80014e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800134e:	4b49      	ldr	r3, [pc, #292]	@ (8001474 <HAL_RCC_OscConfig+0x470>)
 8001350:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d0ee      	beq.n	8001338 <HAL_RCC_OscConfig+0x334>
 800135a:	e014      	b.n	8001386 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800135c:	f7ff fb84 	bl	8000a68 <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001362:	e00a      	b.n	800137a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001364:	f7ff fb80 	bl	8000a68 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001372:	4293      	cmp	r3, r2
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e0b5      	b.n	80014e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800137a:	4b3e      	ldr	r3, [pc, #248]	@ (8001474 <HAL_RCC_OscConfig+0x470>)
 800137c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1ee      	bne.n	8001364 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001386:	7dfb      	ldrb	r3, [r7, #23]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d105      	bne.n	8001398 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800138c:	4b39      	ldr	r3, [pc, #228]	@ (8001474 <HAL_RCC_OscConfig+0x470>)
 800138e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001390:	4a38      	ldr	r2, [pc, #224]	@ (8001474 <HAL_RCC_OscConfig+0x470>)
 8001392:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001396:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	2b00      	cmp	r3, #0
 800139e:	f000 80a1 	beq.w	80014e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013a2:	4b34      	ldr	r3, [pc, #208]	@ (8001474 <HAL_RCC_OscConfig+0x470>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f003 030c 	and.w	r3, r3, #12
 80013aa:	2b08      	cmp	r3, #8
 80013ac:	d05c      	beq.n	8001468 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d141      	bne.n	800143a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013b6:	4b31      	ldr	r3, [pc, #196]	@ (800147c <HAL_RCC_OscConfig+0x478>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013bc:	f7ff fb54 	bl	8000a68 <HAL_GetTick>
 80013c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013c4:	f7ff fb50 	bl	8000a68 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e087      	b.n	80014e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013d6:	4b27      	ldr	r3, [pc, #156]	@ (8001474 <HAL_RCC_OscConfig+0x470>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1f0      	bne.n	80013c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	69da      	ldr	r2, [r3, #28]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a1b      	ldr	r3, [r3, #32]
 80013ea:	431a      	orrs	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013f0:	019b      	lsls	r3, r3, #6
 80013f2:	431a      	orrs	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013f8:	085b      	lsrs	r3, r3, #1
 80013fa:	3b01      	subs	r3, #1
 80013fc:	041b      	lsls	r3, r3, #16
 80013fe:	431a      	orrs	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001404:	061b      	lsls	r3, r3, #24
 8001406:	491b      	ldr	r1, [pc, #108]	@ (8001474 <HAL_RCC_OscConfig+0x470>)
 8001408:	4313      	orrs	r3, r2
 800140a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800140c:	4b1b      	ldr	r3, [pc, #108]	@ (800147c <HAL_RCC_OscConfig+0x478>)
 800140e:	2201      	movs	r2, #1
 8001410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001412:	f7ff fb29 	bl	8000a68 <HAL_GetTick>
 8001416:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001418:	e008      	b.n	800142c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800141a:	f7ff fb25 	bl	8000a68 <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d901      	bls.n	800142c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e05c      	b.n	80014e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800142c:	4b11      	ldr	r3, [pc, #68]	@ (8001474 <HAL_RCC_OscConfig+0x470>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d0f0      	beq.n	800141a <HAL_RCC_OscConfig+0x416>
 8001438:	e054      	b.n	80014e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800143a:	4b10      	ldr	r3, [pc, #64]	@ (800147c <HAL_RCC_OscConfig+0x478>)
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001440:	f7ff fb12 	bl	8000a68 <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001448:	f7ff fb0e 	bl	8000a68 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e045      	b.n	80014e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800145a:	4b06      	ldr	r3, [pc, #24]	@ (8001474 <HAL_RCC_OscConfig+0x470>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1f0      	bne.n	8001448 <HAL_RCC_OscConfig+0x444>
 8001466:	e03d      	b.n	80014e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d107      	bne.n	8001480 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e038      	b.n	80014e6 <HAL_RCC_OscConfig+0x4e2>
 8001474:	40023800 	.word	0x40023800
 8001478:	40007000 	.word	0x40007000
 800147c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001480:	4b1b      	ldr	r3, [pc, #108]	@ (80014f0 <HAL_RCC_OscConfig+0x4ec>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d028      	beq.n	80014e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001498:	429a      	cmp	r2, r3
 800149a:	d121      	bne.n	80014e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d11a      	bne.n	80014e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80014b0:	4013      	ands	r3, r2
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80014b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d111      	bne.n	80014e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014c6:	085b      	lsrs	r3, r3, #1
 80014c8:	3b01      	subs	r3, #1
 80014ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d107      	bne.n	80014e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014dc:	429a      	cmp	r2, r3
 80014de:	d001      	beq.n	80014e4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e000      	b.n	80014e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3718      	adds	r7, #24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40023800 	.word	0x40023800

080014f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d101      	bne.n	8001508 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e0cc      	b.n	80016a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001508:	4b68      	ldr	r3, [pc, #416]	@ (80016ac <HAL_RCC_ClockConfig+0x1b8>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 030f 	and.w	r3, r3, #15
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	429a      	cmp	r2, r3
 8001514:	d90c      	bls.n	8001530 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001516:	4b65      	ldr	r3, [pc, #404]	@ (80016ac <HAL_RCC_ClockConfig+0x1b8>)
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	b2d2      	uxtb	r2, r2
 800151c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800151e:	4b63      	ldr	r3, [pc, #396]	@ (80016ac <HAL_RCC_ClockConfig+0x1b8>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 030f 	and.w	r3, r3, #15
 8001526:	683a      	ldr	r2, [r7, #0]
 8001528:	429a      	cmp	r2, r3
 800152a:	d001      	beq.n	8001530 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e0b8      	b.n	80016a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	2b00      	cmp	r3, #0
 800153a:	d020      	beq.n	800157e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0304 	and.w	r3, r3, #4
 8001544:	2b00      	cmp	r3, #0
 8001546:	d005      	beq.n	8001554 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001548:	4b59      	ldr	r3, [pc, #356]	@ (80016b0 <HAL_RCC_ClockConfig+0x1bc>)
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	4a58      	ldr	r2, [pc, #352]	@ (80016b0 <HAL_RCC_ClockConfig+0x1bc>)
 800154e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001552:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0308 	and.w	r3, r3, #8
 800155c:	2b00      	cmp	r3, #0
 800155e:	d005      	beq.n	800156c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001560:	4b53      	ldr	r3, [pc, #332]	@ (80016b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	4a52      	ldr	r2, [pc, #328]	@ (80016b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001566:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800156a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800156c:	4b50      	ldr	r3, [pc, #320]	@ (80016b0 <HAL_RCC_ClockConfig+0x1bc>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	494d      	ldr	r1, [pc, #308]	@ (80016b0 <HAL_RCC_ClockConfig+0x1bc>)
 800157a:	4313      	orrs	r3, r2
 800157c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	2b00      	cmp	r3, #0
 8001588:	d044      	beq.n	8001614 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d107      	bne.n	80015a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001592:	4b47      	ldr	r3, [pc, #284]	@ (80016b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d119      	bne.n	80015d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e07f      	b.n	80016a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d003      	beq.n	80015b2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015ae:	2b03      	cmp	r3, #3
 80015b0:	d107      	bne.n	80015c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015b2:	4b3f      	ldr	r3, [pc, #252]	@ (80016b0 <HAL_RCC_ClockConfig+0x1bc>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d109      	bne.n	80015d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e06f      	b.n	80016a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c2:	4b3b      	ldr	r3, [pc, #236]	@ (80016b0 <HAL_RCC_ClockConfig+0x1bc>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e067      	b.n	80016a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015d2:	4b37      	ldr	r3, [pc, #220]	@ (80016b0 <HAL_RCC_ClockConfig+0x1bc>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f023 0203 	bic.w	r2, r3, #3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	4934      	ldr	r1, [pc, #208]	@ (80016b0 <HAL_RCC_ClockConfig+0x1bc>)
 80015e0:	4313      	orrs	r3, r2
 80015e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015e4:	f7ff fa40 	bl	8000a68 <HAL_GetTick>
 80015e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ea:	e00a      	b.n	8001602 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015ec:	f7ff fa3c 	bl	8000a68 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e04f      	b.n	80016a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001602:	4b2b      	ldr	r3, [pc, #172]	@ (80016b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f003 020c 	and.w	r2, r3, #12
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	429a      	cmp	r2, r3
 8001612:	d1eb      	bne.n	80015ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001614:	4b25      	ldr	r3, [pc, #148]	@ (80016ac <HAL_RCC_ClockConfig+0x1b8>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 030f 	and.w	r3, r3, #15
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	429a      	cmp	r2, r3
 8001620:	d20c      	bcs.n	800163c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001622:	4b22      	ldr	r3, [pc, #136]	@ (80016ac <HAL_RCC_ClockConfig+0x1b8>)
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	b2d2      	uxtb	r2, r2
 8001628:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800162a:	4b20      	ldr	r3, [pc, #128]	@ (80016ac <HAL_RCC_ClockConfig+0x1b8>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 030f 	and.w	r3, r3, #15
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	429a      	cmp	r2, r3
 8001636:	d001      	beq.n	800163c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e032      	b.n	80016a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0304 	and.w	r3, r3, #4
 8001644:	2b00      	cmp	r3, #0
 8001646:	d008      	beq.n	800165a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001648:	4b19      	ldr	r3, [pc, #100]	@ (80016b0 <HAL_RCC_ClockConfig+0x1bc>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	4916      	ldr	r1, [pc, #88]	@ (80016b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001656:	4313      	orrs	r3, r2
 8001658:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0308 	and.w	r3, r3, #8
 8001662:	2b00      	cmp	r3, #0
 8001664:	d009      	beq.n	800167a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001666:	4b12      	ldr	r3, [pc, #72]	@ (80016b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	490e      	ldr	r1, [pc, #56]	@ (80016b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001676:	4313      	orrs	r3, r2
 8001678:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800167a:	f000 f821 	bl	80016c0 <HAL_RCC_GetSysClockFreq>
 800167e:	4602      	mov	r2, r0
 8001680:	4b0b      	ldr	r3, [pc, #44]	@ (80016b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	091b      	lsrs	r3, r3, #4
 8001686:	f003 030f 	and.w	r3, r3, #15
 800168a:	490a      	ldr	r1, [pc, #40]	@ (80016b4 <HAL_RCC_ClockConfig+0x1c0>)
 800168c:	5ccb      	ldrb	r3, [r1, r3]
 800168e:	fa22 f303 	lsr.w	r3, r2, r3
 8001692:	4a09      	ldr	r2, [pc, #36]	@ (80016b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001694:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001696:	4b09      	ldr	r3, [pc, #36]	@ (80016bc <HAL_RCC_ClockConfig+0x1c8>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff f8ee 	bl	800087c <HAL_InitTick>

  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40023c00 	.word	0x40023c00
 80016b0:	40023800 	.word	0x40023800
 80016b4:	08005450 	.word	0x08005450
 80016b8:	20000000 	.word	0x20000000
 80016bc:	20000004 	.word	0x20000004

080016c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016c4:	b090      	sub	sp, #64	@ 0x40
 80016c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80016c8:	2300      	movs	r3, #0
 80016ca:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80016cc:	2300      	movs	r3, #0
 80016ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80016d0:	2300      	movs	r3, #0
 80016d2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80016d4:	2300      	movs	r3, #0
 80016d6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016d8:	4b59      	ldr	r3, [pc, #356]	@ (8001840 <HAL_RCC_GetSysClockFreq+0x180>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f003 030c 	and.w	r3, r3, #12
 80016e0:	2b08      	cmp	r3, #8
 80016e2:	d00d      	beq.n	8001700 <HAL_RCC_GetSysClockFreq+0x40>
 80016e4:	2b08      	cmp	r3, #8
 80016e6:	f200 80a1 	bhi.w	800182c <HAL_RCC_GetSysClockFreq+0x16c>
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d002      	beq.n	80016f4 <HAL_RCC_GetSysClockFreq+0x34>
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	d003      	beq.n	80016fa <HAL_RCC_GetSysClockFreq+0x3a>
 80016f2:	e09b      	b.n	800182c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016f4:	4b53      	ldr	r3, [pc, #332]	@ (8001844 <HAL_RCC_GetSysClockFreq+0x184>)
 80016f6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80016f8:	e09b      	b.n	8001832 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016fa:	4b53      	ldr	r3, [pc, #332]	@ (8001848 <HAL_RCC_GetSysClockFreq+0x188>)
 80016fc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80016fe:	e098      	b.n	8001832 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001700:	4b4f      	ldr	r3, [pc, #316]	@ (8001840 <HAL_RCC_GetSysClockFreq+0x180>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001708:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800170a:	4b4d      	ldr	r3, [pc, #308]	@ (8001840 <HAL_RCC_GetSysClockFreq+0x180>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d028      	beq.n	8001768 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001716:	4b4a      	ldr	r3, [pc, #296]	@ (8001840 <HAL_RCC_GetSysClockFreq+0x180>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	099b      	lsrs	r3, r3, #6
 800171c:	2200      	movs	r2, #0
 800171e:	623b      	str	r3, [r7, #32]
 8001720:	627a      	str	r2, [r7, #36]	@ 0x24
 8001722:	6a3b      	ldr	r3, [r7, #32]
 8001724:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001728:	2100      	movs	r1, #0
 800172a:	4b47      	ldr	r3, [pc, #284]	@ (8001848 <HAL_RCC_GetSysClockFreq+0x188>)
 800172c:	fb03 f201 	mul.w	r2, r3, r1
 8001730:	2300      	movs	r3, #0
 8001732:	fb00 f303 	mul.w	r3, r0, r3
 8001736:	4413      	add	r3, r2
 8001738:	4a43      	ldr	r2, [pc, #268]	@ (8001848 <HAL_RCC_GetSysClockFreq+0x188>)
 800173a:	fba0 1202 	umull	r1, r2, r0, r2
 800173e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001740:	460a      	mov	r2, r1
 8001742:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001744:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001746:	4413      	add	r3, r2
 8001748:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800174a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800174c:	2200      	movs	r2, #0
 800174e:	61bb      	str	r3, [r7, #24]
 8001750:	61fa      	str	r2, [r7, #28]
 8001752:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001756:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800175a:	f7fe fd49 	bl	80001f0 <__aeabi_uldivmod>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	4613      	mov	r3, r2
 8001764:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001766:	e053      	b.n	8001810 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001768:	4b35      	ldr	r3, [pc, #212]	@ (8001840 <HAL_RCC_GetSysClockFreq+0x180>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	099b      	lsrs	r3, r3, #6
 800176e:	2200      	movs	r2, #0
 8001770:	613b      	str	r3, [r7, #16]
 8001772:	617a      	str	r2, [r7, #20]
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800177a:	f04f 0b00 	mov.w	fp, #0
 800177e:	4652      	mov	r2, sl
 8001780:	465b      	mov	r3, fp
 8001782:	f04f 0000 	mov.w	r0, #0
 8001786:	f04f 0100 	mov.w	r1, #0
 800178a:	0159      	lsls	r1, r3, #5
 800178c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001790:	0150      	lsls	r0, r2, #5
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	ebb2 080a 	subs.w	r8, r2, sl
 800179a:	eb63 090b 	sbc.w	r9, r3, fp
 800179e:	f04f 0200 	mov.w	r2, #0
 80017a2:	f04f 0300 	mov.w	r3, #0
 80017a6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80017aa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80017ae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80017b2:	ebb2 0408 	subs.w	r4, r2, r8
 80017b6:	eb63 0509 	sbc.w	r5, r3, r9
 80017ba:	f04f 0200 	mov.w	r2, #0
 80017be:	f04f 0300 	mov.w	r3, #0
 80017c2:	00eb      	lsls	r3, r5, #3
 80017c4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017c8:	00e2      	lsls	r2, r4, #3
 80017ca:	4614      	mov	r4, r2
 80017cc:	461d      	mov	r5, r3
 80017ce:	eb14 030a 	adds.w	r3, r4, sl
 80017d2:	603b      	str	r3, [r7, #0]
 80017d4:	eb45 030b 	adc.w	r3, r5, fp
 80017d8:	607b      	str	r3, [r7, #4]
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	f04f 0300 	mov.w	r3, #0
 80017e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017e6:	4629      	mov	r1, r5
 80017e8:	028b      	lsls	r3, r1, #10
 80017ea:	4621      	mov	r1, r4
 80017ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017f0:	4621      	mov	r1, r4
 80017f2:	028a      	lsls	r2, r1, #10
 80017f4:	4610      	mov	r0, r2
 80017f6:	4619      	mov	r1, r3
 80017f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017fa:	2200      	movs	r2, #0
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	60fa      	str	r2, [r7, #12]
 8001800:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001804:	f7fe fcf4 	bl	80001f0 <__aeabi_uldivmod>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4613      	mov	r3, r2
 800180e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001810:	4b0b      	ldr	r3, [pc, #44]	@ (8001840 <HAL_RCC_GetSysClockFreq+0x180>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	0c1b      	lsrs	r3, r3, #16
 8001816:	f003 0303 	and.w	r3, r3, #3
 800181a:	3301      	adds	r3, #1
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001820:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001824:	fbb2 f3f3 	udiv	r3, r2, r3
 8001828:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800182a:	e002      	b.n	8001832 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800182c:	4b05      	ldr	r3, [pc, #20]	@ (8001844 <HAL_RCC_GetSysClockFreq+0x184>)
 800182e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001830:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001834:	4618      	mov	r0, r3
 8001836:	3740      	adds	r7, #64	@ 0x40
 8001838:	46bd      	mov	sp, r7
 800183a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800183e:	bf00      	nop
 8001840:	40023800 	.word	0x40023800
 8001844:	00f42400 	.word	0x00f42400
 8001848:	017d7840 	.word	0x017d7840

0800184c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001850:	4b03      	ldr	r3, [pc, #12]	@ (8001860 <HAL_RCC_GetHCLKFreq+0x14>)
 8001852:	681b      	ldr	r3, [r3, #0]
}
 8001854:	4618      	mov	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	20000000 	.word	0x20000000

08001864 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001868:	f7ff fff0 	bl	800184c <HAL_RCC_GetHCLKFreq>
 800186c:	4602      	mov	r2, r0
 800186e:	4b05      	ldr	r3, [pc, #20]	@ (8001884 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	0a9b      	lsrs	r3, r3, #10
 8001874:	f003 0307 	and.w	r3, r3, #7
 8001878:	4903      	ldr	r1, [pc, #12]	@ (8001888 <HAL_RCC_GetPCLK1Freq+0x24>)
 800187a:	5ccb      	ldrb	r3, [r1, r3]
 800187c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001880:	4618      	mov	r0, r3
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40023800 	.word	0x40023800
 8001888:	08005460 	.word	0x08005460

0800188c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001890:	f7ff ffdc 	bl	800184c <HAL_RCC_GetHCLKFreq>
 8001894:	4602      	mov	r2, r0
 8001896:	4b05      	ldr	r3, [pc, #20]	@ (80018ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	0b5b      	lsrs	r3, r3, #13
 800189c:	f003 0307 	and.w	r3, r3, #7
 80018a0:	4903      	ldr	r1, [pc, #12]	@ (80018b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80018a2:	5ccb      	ldrb	r3, [r1, r3]
 80018a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40023800 	.word	0x40023800
 80018b0:	08005460 	.word	0x08005460

080018b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	220f      	movs	r2, #15
 80018c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80018c4:	4b12      	ldr	r3, [pc, #72]	@ (8001910 <HAL_RCC_GetClockConfig+0x5c>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f003 0203 	and.w	r2, r3, #3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80018d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001910 <HAL_RCC_GetClockConfig+0x5c>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80018dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001910 <HAL_RCC_GetClockConfig+0x5c>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80018e8:	4b09      	ldr	r3, [pc, #36]	@ (8001910 <HAL_RCC_GetClockConfig+0x5c>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	08db      	lsrs	r3, r3, #3
 80018ee:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80018f6:	4b07      	ldr	r3, [pc, #28]	@ (8001914 <HAL_RCC_GetClockConfig+0x60>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 020f 	and.w	r2, r3, #15
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	601a      	str	r2, [r3, #0]
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	40023800 	.word	0x40023800
 8001914:	40023c00 	.word	0x40023c00

08001918 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e041      	b.n	80019ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	d106      	bne.n	8001944 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f000 f839 	bl	80019b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2202      	movs	r2, #2
 8001948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3304      	adds	r3, #4
 8001954:	4619      	mov	r1, r3
 8001956:	4610      	mov	r0, r2
 8001958:	f000 f9ca 	bl	8001cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2201      	movs	r2, #1
 8001968:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2201      	movs	r2, #1
 8001980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2201      	movs	r2, #1
 80019a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
	...

080019cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d001      	beq.n	80019e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e04e      	b.n	8001a82 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2202      	movs	r2, #2
 80019e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	68da      	ldr	r2, [r3, #12]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f042 0201 	orr.w	r2, r2, #1
 80019fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a23      	ldr	r2, [pc, #140]	@ (8001a90 <HAL_TIM_Base_Start_IT+0xc4>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d022      	beq.n	8001a4c <HAL_TIM_Base_Start_IT+0x80>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a0e:	d01d      	beq.n	8001a4c <HAL_TIM_Base_Start_IT+0x80>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a1f      	ldr	r2, [pc, #124]	@ (8001a94 <HAL_TIM_Base_Start_IT+0xc8>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d018      	beq.n	8001a4c <HAL_TIM_Base_Start_IT+0x80>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a1e      	ldr	r2, [pc, #120]	@ (8001a98 <HAL_TIM_Base_Start_IT+0xcc>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d013      	beq.n	8001a4c <HAL_TIM_Base_Start_IT+0x80>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a1c      	ldr	r2, [pc, #112]	@ (8001a9c <HAL_TIM_Base_Start_IT+0xd0>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d00e      	beq.n	8001a4c <HAL_TIM_Base_Start_IT+0x80>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a1b      	ldr	r2, [pc, #108]	@ (8001aa0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d009      	beq.n	8001a4c <HAL_TIM_Base_Start_IT+0x80>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a19      	ldr	r2, [pc, #100]	@ (8001aa4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d004      	beq.n	8001a4c <HAL_TIM_Base_Start_IT+0x80>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a18      	ldr	r2, [pc, #96]	@ (8001aa8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d111      	bne.n	8001a70 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2b06      	cmp	r3, #6
 8001a5c:	d010      	beq.n	8001a80 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f042 0201 	orr.w	r2, r2, #1
 8001a6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a6e:	e007      	b.n	8001a80 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f042 0201 	orr.w	r2, r2, #1
 8001a7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3714      	adds	r7, #20
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	40010000 	.word	0x40010000
 8001a94:	40000400 	.word	0x40000400
 8001a98:	40000800 	.word	0x40000800
 8001a9c:	40000c00 	.word	0x40000c00
 8001aa0:	40010400 	.word	0x40010400
 8001aa4:	40014000 	.word	0x40014000
 8001aa8:	40001800 	.word	0x40001800

08001aac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d020      	beq.n	8001b10 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f003 0302 	and.w	r3, r3, #2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d01b      	beq.n	8001b10 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f06f 0202 	mvn.w	r2, #2
 8001ae0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	f003 0303 	and.w	r3, r3, #3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f000 f8dc 	bl	8001cb4 <HAL_TIM_IC_CaptureCallback>
 8001afc:	e005      	b.n	8001b0a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 f8ce 	bl	8001ca0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f000 f8df 	bl	8001cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	f003 0304 	and.w	r3, r3, #4
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d020      	beq.n	8001b5c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d01b      	beq.n	8001b5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f06f 0204 	mvn.w	r2, #4
 8001b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2202      	movs	r2, #2
 8001b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d003      	beq.n	8001b4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 f8b6 	bl	8001cb4 <HAL_TIM_IC_CaptureCallback>
 8001b48:	e005      	b.n	8001b56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 f8a8 	bl	8001ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 f8b9 	bl	8001cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	f003 0308 	and.w	r3, r3, #8
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d020      	beq.n	8001ba8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f003 0308 	and.w	r3, r3, #8
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d01b      	beq.n	8001ba8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f06f 0208 	mvn.w	r2, #8
 8001b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2204      	movs	r2, #4
 8001b7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	f003 0303 	and.w	r3, r3, #3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d003      	beq.n	8001b96 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 f890 	bl	8001cb4 <HAL_TIM_IC_CaptureCallback>
 8001b94:	e005      	b.n	8001ba2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f000 f882 	bl	8001ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 f893 	bl	8001cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	f003 0310 	and.w	r3, r3, #16
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d020      	beq.n	8001bf4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f003 0310 	and.w	r3, r3, #16
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d01b      	beq.n	8001bf4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f06f 0210 	mvn.w	r2, #16
 8001bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2208      	movs	r2, #8
 8001bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	69db      	ldr	r3, [r3, #28]
 8001bd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f000 f86a 	bl	8001cb4 <HAL_TIM_IC_CaptureCallback>
 8001be0:	e005      	b.n	8001bee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f85c 	bl	8001ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 f86d 	bl	8001cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d00c      	beq.n	8001c18 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d007      	beq.n	8001c18 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f06f 0201 	mvn.w	r2, #1
 8001c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 f83a 	bl	8001c8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d00c      	beq.n	8001c3c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d007      	beq.n	8001c3c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f910 	bl	8001e5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d00c      	beq.n	8001c60 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d007      	beq.n	8001c60 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f83e 	bl	8001cdc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	f003 0320 	and.w	r3, r3, #32
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d00c      	beq.n	8001c84 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f003 0320 	and.w	r3, r3, #32
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d007      	beq.n	8001c84 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f06f 0220 	mvn.w	r2, #32
 8001c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f8e2 	bl	8001e48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c84:	bf00      	nop
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a46      	ldr	r2, [pc, #280]	@ (8001e1c <TIM_Base_SetConfig+0x12c>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d013      	beq.n	8001d30 <TIM_Base_SetConfig+0x40>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d0e:	d00f      	beq.n	8001d30 <TIM_Base_SetConfig+0x40>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a43      	ldr	r2, [pc, #268]	@ (8001e20 <TIM_Base_SetConfig+0x130>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d00b      	beq.n	8001d30 <TIM_Base_SetConfig+0x40>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a42      	ldr	r2, [pc, #264]	@ (8001e24 <TIM_Base_SetConfig+0x134>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d007      	beq.n	8001d30 <TIM_Base_SetConfig+0x40>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4a41      	ldr	r2, [pc, #260]	@ (8001e28 <TIM_Base_SetConfig+0x138>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d003      	beq.n	8001d30 <TIM_Base_SetConfig+0x40>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a40      	ldr	r2, [pc, #256]	@ (8001e2c <TIM_Base_SetConfig+0x13c>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d108      	bne.n	8001d42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	68fa      	ldr	r2, [r7, #12]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a35      	ldr	r2, [pc, #212]	@ (8001e1c <TIM_Base_SetConfig+0x12c>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d02b      	beq.n	8001da2 <TIM_Base_SetConfig+0xb2>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d50:	d027      	beq.n	8001da2 <TIM_Base_SetConfig+0xb2>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a32      	ldr	r2, [pc, #200]	@ (8001e20 <TIM_Base_SetConfig+0x130>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d023      	beq.n	8001da2 <TIM_Base_SetConfig+0xb2>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a31      	ldr	r2, [pc, #196]	@ (8001e24 <TIM_Base_SetConfig+0x134>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d01f      	beq.n	8001da2 <TIM_Base_SetConfig+0xb2>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a30      	ldr	r2, [pc, #192]	@ (8001e28 <TIM_Base_SetConfig+0x138>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d01b      	beq.n	8001da2 <TIM_Base_SetConfig+0xb2>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a2f      	ldr	r2, [pc, #188]	@ (8001e2c <TIM_Base_SetConfig+0x13c>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d017      	beq.n	8001da2 <TIM_Base_SetConfig+0xb2>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a2e      	ldr	r2, [pc, #184]	@ (8001e30 <TIM_Base_SetConfig+0x140>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d013      	beq.n	8001da2 <TIM_Base_SetConfig+0xb2>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a2d      	ldr	r2, [pc, #180]	@ (8001e34 <TIM_Base_SetConfig+0x144>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d00f      	beq.n	8001da2 <TIM_Base_SetConfig+0xb2>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a2c      	ldr	r2, [pc, #176]	@ (8001e38 <TIM_Base_SetConfig+0x148>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d00b      	beq.n	8001da2 <TIM_Base_SetConfig+0xb2>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a2b      	ldr	r2, [pc, #172]	@ (8001e3c <TIM_Base_SetConfig+0x14c>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d007      	beq.n	8001da2 <TIM_Base_SetConfig+0xb2>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a2a      	ldr	r2, [pc, #168]	@ (8001e40 <TIM_Base_SetConfig+0x150>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d003      	beq.n	8001da2 <TIM_Base_SetConfig+0xb2>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a29      	ldr	r2, [pc, #164]	@ (8001e44 <TIM_Base_SetConfig+0x154>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d108      	bne.n	8001db4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001da8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68fa      	ldr	r2, [r7, #12]
 8001dc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a10      	ldr	r2, [pc, #64]	@ (8001e1c <TIM_Base_SetConfig+0x12c>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d003      	beq.n	8001de8 <TIM_Base_SetConfig+0xf8>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a12      	ldr	r2, [pc, #72]	@ (8001e2c <TIM_Base_SetConfig+0x13c>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d103      	bne.n	8001df0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	691a      	ldr	r2, [r3, #16]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d105      	bne.n	8001e0e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	f023 0201 	bic.w	r2, r3, #1
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	611a      	str	r2, [r3, #16]
  }
}
 8001e0e:	bf00      	nop
 8001e10:	3714      	adds	r7, #20
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	40010000 	.word	0x40010000
 8001e20:	40000400 	.word	0x40000400
 8001e24:	40000800 	.word	0x40000800
 8001e28:	40000c00 	.word	0x40000c00
 8001e2c:	40010400 	.word	0x40010400
 8001e30:	40014000 	.word	0x40014000
 8001e34:	40014400 	.word	0x40014400
 8001e38:	40014800 	.word	0x40014800
 8001e3c:	40001800 	.word	0x40001800
 8001e40:	40001c00 	.word	0x40001c00
 8001e44:	40002000 	.word	0x40002000

08001e48 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e042      	b.n	8001f08 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d106      	bne.n	8001e9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7fe fca0 	bl	80007dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2224      	movs	r2, #36	@ 0x24
 8001ea0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68da      	ldr	r2, [r3, #12]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001eb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 f82b 	bl	8001f10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	691a      	ldr	r2, [r3, #16]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001ec8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	695a      	ldr	r2, [r3, #20]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001ed8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68da      	ldr	r2, [r3, #12]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001ee8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2220      	movs	r2, #32
 8001ef4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2220      	movs	r2, #32
 8001efc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f14:	b0c0      	sub	sp, #256	@ 0x100
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	691b      	ldr	r3, [r3, #16]
 8001f24:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f2c:	68d9      	ldr	r1, [r3, #12]
 8001f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	ea40 0301 	orr.w	r3, r0, r1
 8001f38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	431a      	orrs	r2, r3
 8001f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001f68:	f021 010c 	bic.w	r1, r1, #12
 8001f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001f76:	430b      	orrs	r3, r1
 8001f78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f8a:	6999      	ldr	r1, [r3, #24]
 8001f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	ea40 0301 	orr.w	r3, r0, r1
 8001f96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	4b8f      	ldr	r3, [pc, #572]	@ (80021dc <UART_SetConfig+0x2cc>)
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d005      	beq.n	8001fb0 <UART_SetConfig+0xa0>
 8001fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	4b8d      	ldr	r3, [pc, #564]	@ (80021e0 <UART_SetConfig+0x2d0>)
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d104      	bne.n	8001fba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001fb0:	f7ff fc6c 	bl	800188c <HAL_RCC_GetPCLK2Freq>
 8001fb4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001fb8:	e003      	b.n	8001fc2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001fba:	f7ff fc53 	bl	8001864 <HAL_RCC_GetPCLK1Freq>
 8001fbe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001fcc:	f040 810c 	bne.w	80021e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001fd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001fda:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001fde:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001fe2:	4622      	mov	r2, r4
 8001fe4:	462b      	mov	r3, r5
 8001fe6:	1891      	adds	r1, r2, r2
 8001fe8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001fea:	415b      	adcs	r3, r3
 8001fec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001fee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001ff2:	4621      	mov	r1, r4
 8001ff4:	eb12 0801 	adds.w	r8, r2, r1
 8001ff8:	4629      	mov	r1, r5
 8001ffa:	eb43 0901 	adc.w	r9, r3, r1
 8001ffe:	f04f 0200 	mov.w	r2, #0
 8002002:	f04f 0300 	mov.w	r3, #0
 8002006:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800200a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800200e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002012:	4690      	mov	r8, r2
 8002014:	4699      	mov	r9, r3
 8002016:	4623      	mov	r3, r4
 8002018:	eb18 0303 	adds.w	r3, r8, r3
 800201c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002020:	462b      	mov	r3, r5
 8002022:	eb49 0303 	adc.w	r3, r9, r3
 8002026:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800202a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002036:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800203a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800203e:	460b      	mov	r3, r1
 8002040:	18db      	adds	r3, r3, r3
 8002042:	653b      	str	r3, [r7, #80]	@ 0x50
 8002044:	4613      	mov	r3, r2
 8002046:	eb42 0303 	adc.w	r3, r2, r3
 800204a:	657b      	str	r3, [r7, #84]	@ 0x54
 800204c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002050:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002054:	f7fe f8cc 	bl	80001f0 <__aeabi_uldivmod>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	4b61      	ldr	r3, [pc, #388]	@ (80021e4 <UART_SetConfig+0x2d4>)
 800205e:	fba3 2302 	umull	r2, r3, r3, r2
 8002062:	095b      	lsrs	r3, r3, #5
 8002064:	011c      	lsls	r4, r3, #4
 8002066:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800206a:	2200      	movs	r2, #0
 800206c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002070:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002074:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002078:	4642      	mov	r2, r8
 800207a:	464b      	mov	r3, r9
 800207c:	1891      	adds	r1, r2, r2
 800207e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002080:	415b      	adcs	r3, r3
 8002082:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002084:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002088:	4641      	mov	r1, r8
 800208a:	eb12 0a01 	adds.w	sl, r2, r1
 800208e:	4649      	mov	r1, r9
 8002090:	eb43 0b01 	adc.w	fp, r3, r1
 8002094:	f04f 0200 	mov.w	r2, #0
 8002098:	f04f 0300 	mov.w	r3, #0
 800209c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80020a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80020a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020a8:	4692      	mov	sl, r2
 80020aa:	469b      	mov	fp, r3
 80020ac:	4643      	mov	r3, r8
 80020ae:	eb1a 0303 	adds.w	r3, sl, r3
 80020b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80020b6:	464b      	mov	r3, r9
 80020b8:	eb4b 0303 	adc.w	r3, fp, r3
 80020bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80020c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80020cc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80020d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80020d4:	460b      	mov	r3, r1
 80020d6:	18db      	adds	r3, r3, r3
 80020d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80020da:	4613      	mov	r3, r2
 80020dc:	eb42 0303 	adc.w	r3, r2, r3
 80020e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80020e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80020e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80020ea:	f7fe f881 	bl	80001f0 <__aeabi_uldivmod>
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	4611      	mov	r1, r2
 80020f4:	4b3b      	ldr	r3, [pc, #236]	@ (80021e4 <UART_SetConfig+0x2d4>)
 80020f6:	fba3 2301 	umull	r2, r3, r3, r1
 80020fa:	095b      	lsrs	r3, r3, #5
 80020fc:	2264      	movs	r2, #100	@ 0x64
 80020fe:	fb02 f303 	mul.w	r3, r2, r3
 8002102:	1acb      	subs	r3, r1, r3
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800210a:	4b36      	ldr	r3, [pc, #216]	@ (80021e4 <UART_SetConfig+0x2d4>)
 800210c:	fba3 2302 	umull	r2, r3, r3, r2
 8002110:	095b      	lsrs	r3, r3, #5
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002118:	441c      	add	r4, r3
 800211a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800211e:	2200      	movs	r2, #0
 8002120:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002124:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002128:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800212c:	4642      	mov	r2, r8
 800212e:	464b      	mov	r3, r9
 8002130:	1891      	adds	r1, r2, r2
 8002132:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002134:	415b      	adcs	r3, r3
 8002136:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002138:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800213c:	4641      	mov	r1, r8
 800213e:	1851      	adds	r1, r2, r1
 8002140:	6339      	str	r1, [r7, #48]	@ 0x30
 8002142:	4649      	mov	r1, r9
 8002144:	414b      	adcs	r3, r1
 8002146:	637b      	str	r3, [r7, #52]	@ 0x34
 8002148:	f04f 0200 	mov.w	r2, #0
 800214c:	f04f 0300 	mov.w	r3, #0
 8002150:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002154:	4659      	mov	r1, fp
 8002156:	00cb      	lsls	r3, r1, #3
 8002158:	4651      	mov	r1, sl
 800215a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800215e:	4651      	mov	r1, sl
 8002160:	00ca      	lsls	r2, r1, #3
 8002162:	4610      	mov	r0, r2
 8002164:	4619      	mov	r1, r3
 8002166:	4603      	mov	r3, r0
 8002168:	4642      	mov	r2, r8
 800216a:	189b      	adds	r3, r3, r2
 800216c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002170:	464b      	mov	r3, r9
 8002172:	460a      	mov	r2, r1
 8002174:	eb42 0303 	adc.w	r3, r2, r3
 8002178:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800217c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002188:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800218c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002190:	460b      	mov	r3, r1
 8002192:	18db      	adds	r3, r3, r3
 8002194:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002196:	4613      	mov	r3, r2
 8002198:	eb42 0303 	adc.w	r3, r2, r3
 800219c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800219e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80021a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80021a6:	f7fe f823 	bl	80001f0 <__aeabi_uldivmod>
 80021aa:	4602      	mov	r2, r0
 80021ac:	460b      	mov	r3, r1
 80021ae:	4b0d      	ldr	r3, [pc, #52]	@ (80021e4 <UART_SetConfig+0x2d4>)
 80021b0:	fba3 1302 	umull	r1, r3, r3, r2
 80021b4:	095b      	lsrs	r3, r3, #5
 80021b6:	2164      	movs	r1, #100	@ 0x64
 80021b8:	fb01 f303 	mul.w	r3, r1, r3
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	3332      	adds	r3, #50	@ 0x32
 80021c2:	4a08      	ldr	r2, [pc, #32]	@ (80021e4 <UART_SetConfig+0x2d4>)
 80021c4:	fba2 2303 	umull	r2, r3, r2, r3
 80021c8:	095b      	lsrs	r3, r3, #5
 80021ca:	f003 0207 	and.w	r2, r3, #7
 80021ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4422      	add	r2, r4
 80021d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80021d8:	e106      	b.n	80023e8 <UART_SetConfig+0x4d8>
 80021da:	bf00      	nop
 80021dc:	40011000 	.word	0x40011000
 80021e0:	40011400 	.word	0x40011400
 80021e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80021ec:	2200      	movs	r2, #0
 80021ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80021f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80021f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80021fa:	4642      	mov	r2, r8
 80021fc:	464b      	mov	r3, r9
 80021fe:	1891      	adds	r1, r2, r2
 8002200:	6239      	str	r1, [r7, #32]
 8002202:	415b      	adcs	r3, r3
 8002204:	627b      	str	r3, [r7, #36]	@ 0x24
 8002206:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800220a:	4641      	mov	r1, r8
 800220c:	1854      	adds	r4, r2, r1
 800220e:	4649      	mov	r1, r9
 8002210:	eb43 0501 	adc.w	r5, r3, r1
 8002214:	f04f 0200 	mov.w	r2, #0
 8002218:	f04f 0300 	mov.w	r3, #0
 800221c:	00eb      	lsls	r3, r5, #3
 800221e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002222:	00e2      	lsls	r2, r4, #3
 8002224:	4614      	mov	r4, r2
 8002226:	461d      	mov	r5, r3
 8002228:	4643      	mov	r3, r8
 800222a:	18e3      	adds	r3, r4, r3
 800222c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002230:	464b      	mov	r3, r9
 8002232:	eb45 0303 	adc.w	r3, r5, r3
 8002236:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800223a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002246:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800224a:	f04f 0200 	mov.w	r2, #0
 800224e:	f04f 0300 	mov.w	r3, #0
 8002252:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002256:	4629      	mov	r1, r5
 8002258:	008b      	lsls	r3, r1, #2
 800225a:	4621      	mov	r1, r4
 800225c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002260:	4621      	mov	r1, r4
 8002262:	008a      	lsls	r2, r1, #2
 8002264:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002268:	f7fd ffc2 	bl	80001f0 <__aeabi_uldivmod>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	4b60      	ldr	r3, [pc, #384]	@ (80023f4 <UART_SetConfig+0x4e4>)
 8002272:	fba3 2302 	umull	r2, r3, r3, r2
 8002276:	095b      	lsrs	r3, r3, #5
 8002278:	011c      	lsls	r4, r3, #4
 800227a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800227e:	2200      	movs	r2, #0
 8002280:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002284:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002288:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800228c:	4642      	mov	r2, r8
 800228e:	464b      	mov	r3, r9
 8002290:	1891      	adds	r1, r2, r2
 8002292:	61b9      	str	r1, [r7, #24]
 8002294:	415b      	adcs	r3, r3
 8002296:	61fb      	str	r3, [r7, #28]
 8002298:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800229c:	4641      	mov	r1, r8
 800229e:	1851      	adds	r1, r2, r1
 80022a0:	6139      	str	r1, [r7, #16]
 80022a2:	4649      	mov	r1, r9
 80022a4:	414b      	adcs	r3, r1
 80022a6:	617b      	str	r3, [r7, #20]
 80022a8:	f04f 0200 	mov.w	r2, #0
 80022ac:	f04f 0300 	mov.w	r3, #0
 80022b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022b4:	4659      	mov	r1, fp
 80022b6:	00cb      	lsls	r3, r1, #3
 80022b8:	4651      	mov	r1, sl
 80022ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022be:	4651      	mov	r1, sl
 80022c0:	00ca      	lsls	r2, r1, #3
 80022c2:	4610      	mov	r0, r2
 80022c4:	4619      	mov	r1, r3
 80022c6:	4603      	mov	r3, r0
 80022c8:	4642      	mov	r2, r8
 80022ca:	189b      	adds	r3, r3, r2
 80022cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80022d0:	464b      	mov	r3, r9
 80022d2:	460a      	mov	r2, r1
 80022d4:	eb42 0303 	adc.w	r3, r2, r3
 80022d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80022dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80022e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80022e8:	f04f 0200 	mov.w	r2, #0
 80022ec:	f04f 0300 	mov.w	r3, #0
 80022f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80022f4:	4649      	mov	r1, r9
 80022f6:	008b      	lsls	r3, r1, #2
 80022f8:	4641      	mov	r1, r8
 80022fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022fe:	4641      	mov	r1, r8
 8002300:	008a      	lsls	r2, r1, #2
 8002302:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002306:	f7fd ff73 	bl	80001f0 <__aeabi_uldivmod>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	4611      	mov	r1, r2
 8002310:	4b38      	ldr	r3, [pc, #224]	@ (80023f4 <UART_SetConfig+0x4e4>)
 8002312:	fba3 2301 	umull	r2, r3, r3, r1
 8002316:	095b      	lsrs	r3, r3, #5
 8002318:	2264      	movs	r2, #100	@ 0x64
 800231a:	fb02 f303 	mul.w	r3, r2, r3
 800231e:	1acb      	subs	r3, r1, r3
 8002320:	011b      	lsls	r3, r3, #4
 8002322:	3332      	adds	r3, #50	@ 0x32
 8002324:	4a33      	ldr	r2, [pc, #204]	@ (80023f4 <UART_SetConfig+0x4e4>)
 8002326:	fba2 2303 	umull	r2, r3, r2, r3
 800232a:	095b      	lsrs	r3, r3, #5
 800232c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002330:	441c      	add	r4, r3
 8002332:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002336:	2200      	movs	r2, #0
 8002338:	673b      	str	r3, [r7, #112]	@ 0x70
 800233a:	677a      	str	r2, [r7, #116]	@ 0x74
 800233c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002340:	4642      	mov	r2, r8
 8002342:	464b      	mov	r3, r9
 8002344:	1891      	adds	r1, r2, r2
 8002346:	60b9      	str	r1, [r7, #8]
 8002348:	415b      	adcs	r3, r3
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002350:	4641      	mov	r1, r8
 8002352:	1851      	adds	r1, r2, r1
 8002354:	6039      	str	r1, [r7, #0]
 8002356:	4649      	mov	r1, r9
 8002358:	414b      	adcs	r3, r1
 800235a:	607b      	str	r3, [r7, #4]
 800235c:	f04f 0200 	mov.w	r2, #0
 8002360:	f04f 0300 	mov.w	r3, #0
 8002364:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002368:	4659      	mov	r1, fp
 800236a:	00cb      	lsls	r3, r1, #3
 800236c:	4651      	mov	r1, sl
 800236e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002372:	4651      	mov	r1, sl
 8002374:	00ca      	lsls	r2, r1, #3
 8002376:	4610      	mov	r0, r2
 8002378:	4619      	mov	r1, r3
 800237a:	4603      	mov	r3, r0
 800237c:	4642      	mov	r2, r8
 800237e:	189b      	adds	r3, r3, r2
 8002380:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002382:	464b      	mov	r3, r9
 8002384:	460a      	mov	r2, r1
 8002386:	eb42 0303 	adc.w	r3, r2, r3
 800238a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800238c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	663b      	str	r3, [r7, #96]	@ 0x60
 8002396:	667a      	str	r2, [r7, #100]	@ 0x64
 8002398:	f04f 0200 	mov.w	r2, #0
 800239c:	f04f 0300 	mov.w	r3, #0
 80023a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80023a4:	4649      	mov	r1, r9
 80023a6:	008b      	lsls	r3, r1, #2
 80023a8:	4641      	mov	r1, r8
 80023aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023ae:	4641      	mov	r1, r8
 80023b0:	008a      	lsls	r2, r1, #2
 80023b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80023b6:	f7fd ff1b 	bl	80001f0 <__aeabi_uldivmod>
 80023ba:	4602      	mov	r2, r0
 80023bc:	460b      	mov	r3, r1
 80023be:	4b0d      	ldr	r3, [pc, #52]	@ (80023f4 <UART_SetConfig+0x4e4>)
 80023c0:	fba3 1302 	umull	r1, r3, r3, r2
 80023c4:	095b      	lsrs	r3, r3, #5
 80023c6:	2164      	movs	r1, #100	@ 0x64
 80023c8:	fb01 f303 	mul.w	r3, r1, r3
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	011b      	lsls	r3, r3, #4
 80023d0:	3332      	adds	r3, #50	@ 0x32
 80023d2:	4a08      	ldr	r2, [pc, #32]	@ (80023f4 <UART_SetConfig+0x4e4>)
 80023d4:	fba2 2303 	umull	r2, r3, r2, r3
 80023d8:	095b      	lsrs	r3, r3, #5
 80023da:	f003 020f 	and.w	r2, r3, #15
 80023de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4422      	add	r2, r4
 80023e6:	609a      	str	r2, [r3, #8]
}
 80023e8:	bf00      	nop
 80023ea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80023ee:	46bd      	mov	sp, r7
 80023f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023f4:	51eb851f 	.word	0x51eb851f

080023f8 <__NVIC_SetPriority>:
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4603      	mov	r3, r0
 8002400:	6039      	str	r1, [r7, #0]
 8002402:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002408:	2b00      	cmp	r3, #0
 800240a:	db0a      	blt.n	8002422 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	b2da      	uxtb	r2, r3
 8002410:	490c      	ldr	r1, [pc, #48]	@ (8002444 <__NVIC_SetPriority+0x4c>)
 8002412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002416:	0112      	lsls	r2, r2, #4
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	440b      	add	r3, r1
 800241c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002420:	e00a      	b.n	8002438 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	b2da      	uxtb	r2, r3
 8002426:	4908      	ldr	r1, [pc, #32]	@ (8002448 <__NVIC_SetPriority+0x50>)
 8002428:	79fb      	ldrb	r3, [r7, #7]
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	3b04      	subs	r3, #4
 8002430:	0112      	lsls	r2, r2, #4
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	440b      	add	r3, r1
 8002436:	761a      	strb	r2, [r3, #24]
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	e000e100 	.word	0xe000e100
 8002448:	e000ed00 	.word	0xe000ed00

0800244c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002450:	4b05      	ldr	r3, [pc, #20]	@ (8002468 <SysTick_Handler+0x1c>)
 8002452:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002454:	f001 ff06 	bl	8004264 <xTaskGetSchedulerState>
 8002458:	4603      	mov	r3, r0
 800245a:	2b01      	cmp	r3, #1
 800245c:	d001      	beq.n	8002462 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800245e:	f002 fcfb 	bl	8004e58 <xPortSysTickHandler>
  }
}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	e000e010 	.word	0xe000e010

0800246c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002470:	2100      	movs	r1, #0
 8002472:	f06f 0004 	mvn.w	r0, #4
 8002476:	f7ff ffbf 	bl	80023f8 <__NVIC_SetPriority>
#endif
}
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}
	...

08002480 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002486:	f3ef 8305 	mrs	r3, IPSR
 800248a:	603b      	str	r3, [r7, #0]
  return(result);
 800248c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800248e:	2b00      	cmp	r3, #0
 8002490:	d003      	beq.n	800249a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002492:	f06f 0305 	mvn.w	r3, #5
 8002496:	607b      	str	r3, [r7, #4]
 8002498:	e00c      	b.n	80024b4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800249a:	4b0a      	ldr	r3, [pc, #40]	@ (80024c4 <osKernelInitialize+0x44>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d105      	bne.n	80024ae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80024a2:	4b08      	ldr	r3, [pc, #32]	@ (80024c4 <osKernelInitialize+0x44>)
 80024a4:	2201      	movs	r2, #1
 80024a6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80024a8:	2300      	movs	r3, #0
 80024aa:	607b      	str	r3, [r7, #4]
 80024ac:	e002      	b.n	80024b4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80024ae:	f04f 33ff 	mov.w	r3, #4294967295
 80024b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80024b4:	687b      	ldr	r3, [r7, #4]
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	200000c4 	.word	0x200000c4

080024c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024ce:	f3ef 8305 	mrs	r3, IPSR
 80024d2:	603b      	str	r3, [r7, #0]
  return(result);
 80024d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80024da:	f06f 0305 	mvn.w	r3, #5
 80024de:	607b      	str	r3, [r7, #4]
 80024e0:	e010      	b.n	8002504 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80024e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002510 <osKernelStart+0x48>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d109      	bne.n	80024fe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80024ea:	f7ff ffbf 	bl	800246c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80024ee:	4b08      	ldr	r3, [pc, #32]	@ (8002510 <osKernelStart+0x48>)
 80024f0:	2202      	movs	r2, #2
 80024f2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80024f4:	f001 fa68 	bl	80039c8 <vTaskStartScheduler>
      stat = osOK;
 80024f8:	2300      	movs	r3, #0
 80024fa:	607b      	str	r3, [r7, #4]
 80024fc:	e002      	b.n	8002504 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80024fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002502:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002504:	687b      	ldr	r3, [r7, #4]
}
 8002506:	4618      	mov	r0, r3
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	200000c4 	.word	0x200000c4

08002514 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002514:	b580      	push	{r7, lr}
 8002516:	b08e      	sub	sp, #56	@ 0x38
 8002518:	af04      	add	r7, sp, #16
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002520:	2300      	movs	r3, #0
 8002522:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002524:	f3ef 8305 	mrs	r3, IPSR
 8002528:	617b      	str	r3, [r7, #20]
  return(result);
 800252a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800252c:	2b00      	cmp	r3, #0
 800252e:	d17e      	bne.n	800262e <osThreadNew+0x11a>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d07b      	beq.n	800262e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002536:	2380      	movs	r3, #128	@ 0x80
 8002538:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800253a:	2318      	movs	r3, #24
 800253c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800253e:	2300      	movs	r3, #0
 8002540:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002542:	f04f 33ff 	mov.w	r3, #4294967295
 8002546:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d045      	beq.n	80025da <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d002      	beq.n	800255c <osThreadNew+0x48>
        name = attr->name;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d002      	beq.n	800256a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d008      	beq.n	8002582 <osThreadNew+0x6e>
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	2b38      	cmp	r3, #56	@ 0x38
 8002574:	d805      	bhi.n	8002582 <osThreadNew+0x6e>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <osThreadNew+0x72>
        return (NULL);
 8002582:	2300      	movs	r3, #0
 8002584:	e054      	b.n	8002630 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d003      	beq.n	8002596 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	089b      	lsrs	r3, r3, #2
 8002594:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00e      	beq.n	80025bc <osThreadNew+0xa8>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	2b5b      	cmp	r3, #91	@ 0x5b
 80025a4:	d90a      	bls.n	80025bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d006      	beq.n	80025bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d002      	beq.n	80025bc <osThreadNew+0xa8>
        mem = 1;
 80025b6:	2301      	movs	r3, #1
 80025b8:	61bb      	str	r3, [r7, #24]
 80025ba:	e010      	b.n	80025de <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d10c      	bne.n	80025de <osThreadNew+0xca>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d108      	bne.n	80025de <osThreadNew+0xca>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d104      	bne.n	80025de <osThreadNew+0xca>
          mem = 0;
 80025d4:	2300      	movs	r3, #0
 80025d6:	61bb      	str	r3, [r7, #24]
 80025d8:	e001      	b.n	80025de <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80025da:	2300      	movs	r3, #0
 80025dc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d110      	bne.n	8002606 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80025ec:	9202      	str	r2, [sp, #8]
 80025ee:	9301      	str	r3, [sp, #4]
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	6a3a      	ldr	r2, [r7, #32]
 80025f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f001 f808 	bl	8003610 <xTaskCreateStatic>
 8002600:	4603      	mov	r3, r0
 8002602:	613b      	str	r3, [r7, #16]
 8002604:	e013      	b.n	800262e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d110      	bne.n	800262e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800260c:	6a3b      	ldr	r3, [r7, #32]
 800260e:	b29a      	uxth	r2, r3
 8002610:	f107 0310 	add.w	r3, r7, #16
 8002614:	9301      	str	r3, [sp, #4]
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f001 f856 	bl	80036d0 <xTaskCreate>
 8002624:	4603      	mov	r3, r0
 8002626:	2b01      	cmp	r3, #1
 8002628:	d001      	beq.n	800262e <osThreadNew+0x11a>
            hTask = NULL;
 800262a:	2300      	movs	r3, #0
 800262c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800262e:	693b      	ldr	r3, [r7, #16]
}
 8002630:	4618      	mov	r0, r3
 8002632:	3728      	adds	r7, #40	@ 0x28
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002640:	f3ef 8305 	mrs	r3, IPSR
 8002644:	60bb      	str	r3, [r7, #8]
  return(result);
 8002646:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <osDelay+0x1c>
    stat = osErrorISR;
 800264c:	f06f 0305 	mvn.w	r3, #5
 8002650:	60fb      	str	r3, [r7, #12]
 8002652:	e007      	b.n	8002664 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002654:	2300      	movs	r3, #0
 8002656:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d002      	beq.n	8002664 <osDelay+0x2c>
      vTaskDelay(ticks);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f001 f97c 	bl	800395c <vTaskDelay>
    }
  }

  return (stat);
 8002664:	68fb      	ldr	r3, [r7, #12]
}
 8002666:	4618      	mov	r0, r3
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800266e:	b580      	push	{r7, lr}
 8002670:	b08a      	sub	sp, #40	@ 0x28
 8002672:	af02      	add	r7, sp, #8
 8002674:	60f8      	str	r0, [r7, #12]
 8002676:	60b9      	str	r1, [r7, #8]
 8002678:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800267a:	2300      	movs	r3, #0
 800267c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800267e:	f3ef 8305 	mrs	r3, IPSR
 8002682:	613b      	str	r3, [r7, #16]
  return(result);
 8002684:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8002686:	2b00      	cmp	r3, #0
 8002688:	d15f      	bne.n	800274a <osMessageQueueNew+0xdc>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d05c      	beq.n	800274a <osMessageQueueNew+0xdc>
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d059      	beq.n	800274a <osMessageQueueNew+0xdc>
    mem = -1;
 8002696:	f04f 33ff 	mov.w	r3, #4294967295
 800269a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d029      	beq.n	80026f6 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d012      	beq.n	80026d0 <osMessageQueueNew+0x62>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	2b4f      	cmp	r3, #79	@ 0x4f
 80026b0:	d90e      	bls.n	80026d0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00a      	beq.n	80026d0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	695a      	ldr	r2, [r3, #20]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	68b9      	ldr	r1, [r7, #8]
 80026c2:	fb01 f303 	mul.w	r3, r1, r3
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d302      	bcc.n	80026d0 <osMessageQueueNew+0x62>
        mem = 1;
 80026ca:	2301      	movs	r3, #1
 80026cc:	61bb      	str	r3, [r7, #24]
 80026ce:	e014      	b.n	80026fa <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d110      	bne.n	80026fa <osMessageQueueNew+0x8c>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10c      	bne.n	80026fa <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d108      	bne.n	80026fa <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d104      	bne.n	80026fa <osMessageQueueNew+0x8c>
          mem = 0;
 80026f0:	2300      	movs	r3, #0
 80026f2:	61bb      	str	r3, [r7, #24]
 80026f4:	e001      	b.n	80026fa <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80026f6:	2300      	movs	r3, #0
 80026f8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d10b      	bne.n	8002718 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	691a      	ldr	r2, [r3, #16]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	2100      	movs	r1, #0
 800270a:	9100      	str	r1, [sp, #0]
 800270c:	68b9      	ldr	r1, [r7, #8]
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f000 fa30 	bl	8002b74 <xQueueGenericCreateStatic>
 8002714:	61f8      	str	r0, [r7, #28]
 8002716:	e008      	b.n	800272a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d105      	bne.n	800272a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800271e:	2200      	movs	r2, #0
 8002720:	68b9      	ldr	r1, [r7, #8]
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 faa3 	bl	8002c6e <xQueueGenericCreate>
 8002728:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00c      	beq.n	800274a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d003      	beq.n	800273e <osMessageQueueNew+0xd0>
        name = attr->name;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	617b      	str	r3, [r7, #20]
 800273c:	e001      	b.n	8002742 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800273e:	2300      	movs	r3, #0
 8002740:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8002742:	6979      	ldr	r1, [r7, #20]
 8002744:	69f8      	ldr	r0, [r7, #28]
 8002746:	f000 ff05 	bl	8003554 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800274a:	69fb      	ldr	r3, [r7, #28]
}
 800274c:	4618      	mov	r0, r3
 800274e:	3720      	adds	r7, #32
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8002754:	b580      	push	{r7, lr}
 8002756:	b088      	sub	sp, #32
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	603b      	str	r3, [r7, #0]
 8002760:	4613      	mov	r3, r2
 8002762:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002768:	2300      	movs	r3, #0
 800276a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800276c:	f3ef 8305 	mrs	r3, IPSR
 8002770:	617b      	str	r3, [r7, #20]
  return(result);
 8002772:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8002774:	2b00      	cmp	r3, #0
 8002776:	d028      	beq.n	80027ca <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d005      	beq.n	800278a <osMessageQueuePut+0x36>
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d002      	beq.n	800278a <osMessageQueuePut+0x36>
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d003      	beq.n	8002792 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800278a:	f06f 0303 	mvn.w	r3, #3
 800278e:	61fb      	str	r3, [r7, #28]
 8002790:	e038      	b.n	8002804 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8002792:	2300      	movs	r3, #0
 8002794:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8002796:	f107 0210 	add.w	r2, r7, #16
 800279a:	2300      	movs	r3, #0
 800279c:	68b9      	ldr	r1, [r7, #8]
 800279e:	69b8      	ldr	r0, [r7, #24]
 80027a0:	f000 fbc6 	bl	8002f30 <xQueueGenericSendFromISR>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d003      	beq.n	80027b2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80027aa:	f06f 0302 	mvn.w	r3, #2
 80027ae:	61fb      	str	r3, [r7, #28]
 80027b0:	e028      	b.n	8002804 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d025      	beq.n	8002804 <osMessageQueuePut+0xb0>
 80027b8:	4b15      	ldr	r3, [pc, #84]	@ (8002810 <osMessageQueuePut+0xbc>)
 80027ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	f3bf 8f4f 	dsb	sy
 80027c4:	f3bf 8f6f 	isb	sy
 80027c8:	e01c      	b.n	8002804 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d002      	beq.n	80027d6 <osMessageQueuePut+0x82>
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d103      	bne.n	80027de <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80027d6:	f06f 0303 	mvn.w	r3, #3
 80027da:	61fb      	str	r3, [r7, #28]
 80027dc:	e012      	b.n	8002804 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80027de:	2300      	movs	r3, #0
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	68b9      	ldr	r1, [r7, #8]
 80027e4:	69b8      	ldr	r0, [r7, #24]
 80027e6:	f000 faa1 	bl	8002d2c <xQueueGenericSend>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d009      	beq.n	8002804 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80027f6:	f06f 0301 	mvn.w	r3, #1
 80027fa:	61fb      	str	r3, [r7, #28]
 80027fc:	e002      	b.n	8002804 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80027fe:	f06f 0302 	mvn.w	r3, #2
 8002802:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8002804:	69fb      	ldr	r3, [r7, #28]
}
 8002806:	4618      	mov	r0, r3
 8002808:	3720      	adds	r7, #32
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	e000ed04 	.word	0xe000ed04

08002814 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8002814:	b580      	push	{r7, lr}
 8002816:	b088      	sub	sp, #32
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
 8002820:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002826:	2300      	movs	r3, #0
 8002828:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800282a:	f3ef 8305 	mrs	r3, IPSR
 800282e:	617b      	str	r3, [r7, #20]
  return(result);
 8002830:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8002832:	2b00      	cmp	r3, #0
 8002834:	d028      	beq.n	8002888 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d005      	beq.n	8002848 <osMessageQueueGet+0x34>
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d002      	beq.n	8002848 <osMessageQueueGet+0x34>
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d003      	beq.n	8002850 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8002848:	f06f 0303 	mvn.w	r3, #3
 800284c:	61fb      	str	r3, [r7, #28]
 800284e:	e037      	b.n	80028c0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8002850:	2300      	movs	r3, #0
 8002852:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8002854:	f107 0310 	add.w	r3, r7, #16
 8002858:	461a      	mov	r2, r3
 800285a:	68b9      	ldr	r1, [r7, #8]
 800285c:	69b8      	ldr	r0, [r7, #24]
 800285e:	f000 fce7 	bl	8003230 <xQueueReceiveFromISR>
 8002862:	4603      	mov	r3, r0
 8002864:	2b01      	cmp	r3, #1
 8002866:	d003      	beq.n	8002870 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8002868:	f06f 0302 	mvn.w	r3, #2
 800286c:	61fb      	str	r3, [r7, #28]
 800286e:	e027      	b.n	80028c0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d024      	beq.n	80028c0 <osMessageQueueGet+0xac>
 8002876:	4b15      	ldr	r3, [pc, #84]	@ (80028cc <osMessageQueueGet+0xb8>)
 8002878:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	f3bf 8f4f 	dsb	sy
 8002882:	f3bf 8f6f 	isb	sy
 8002886:	e01b      	b.n	80028c0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d002      	beq.n	8002894 <osMessageQueueGet+0x80>
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d103      	bne.n	800289c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8002894:	f06f 0303 	mvn.w	r3, #3
 8002898:	61fb      	str	r3, [r7, #28]
 800289a:	e011      	b.n	80028c0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	68b9      	ldr	r1, [r7, #8]
 80028a0:	69b8      	ldr	r0, [r7, #24]
 80028a2:	f000 fbe3 	bl	800306c <xQueueReceive>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d009      	beq.n	80028c0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80028b2:	f06f 0301 	mvn.w	r3, #1
 80028b6:	61fb      	str	r3, [r7, #28]
 80028b8:	e002      	b.n	80028c0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80028ba:	f06f 0302 	mvn.w	r3, #2
 80028be:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80028c0:	69fb      	ldr	r3, [r7, #28]
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3720      	adds	r7, #32
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	e000ed04 	.word	0xe000ed04

080028d0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	4a07      	ldr	r2, [pc, #28]	@ (80028fc <vApplicationGetIdleTaskMemory+0x2c>)
 80028e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	4a06      	ldr	r2, [pc, #24]	@ (8002900 <vApplicationGetIdleTaskMemory+0x30>)
 80028e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2280      	movs	r2, #128	@ 0x80
 80028ec:	601a      	str	r2, [r3, #0]
}
 80028ee:	bf00      	nop
 80028f0:	3714      	adds	r7, #20
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	200000c8 	.word	0x200000c8
 8002900:	20000124 	.word	0x20000124

08002904 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	4a07      	ldr	r2, [pc, #28]	@ (8002930 <vApplicationGetTimerTaskMemory+0x2c>)
 8002914:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	4a06      	ldr	r2, [pc, #24]	@ (8002934 <vApplicationGetTimerTaskMemory+0x30>)
 800291a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002922:	601a      	str	r2, [r3, #0]
}
 8002924:	bf00      	nop
 8002926:	3714      	adds	r7, #20
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	20000324 	.word	0x20000324
 8002934:	20000380 	.word	0x20000380

08002938 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f103 0208 	add.w	r2, r3, #8
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f04f 32ff 	mov.w	r2, #4294967295
 8002950:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f103 0208 	add.w	r2, r3, #8
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f103 0208 	add.w	r2, r3, #8
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr

08002992 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002992:	b480      	push	{r7}
 8002994:	b085      	sub	sp, #20
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
 800299a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	1c5a      	adds	r2, r3, #1
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	601a      	str	r2, [r3, #0]
}
 80029ce:	bf00      	nop
 80029d0:	3714      	adds	r7, #20
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr

080029da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80029da:	b480      	push	{r7}
 80029dc:	b085      	sub	sp, #20
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
 80029e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f0:	d103      	bne.n	80029fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	e00c      	b.n	8002a14 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	3308      	adds	r3, #8
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	e002      	b.n	8002a08 <vListInsert+0x2e>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68ba      	ldr	r2, [r7, #8]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d2f6      	bcs.n	8002a02 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	685a      	ldr	r2, [r3, #4]
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	1c5a      	adds	r2, r3, #1
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	601a      	str	r2, [r3, #0]
}
 8002a40:	bf00      	nop
 8002a42:	3714      	adds	r7, #20
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	6892      	ldr	r2, [r2, #8]
 8002a62:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6852      	ldr	r2, [r2, #4]
 8002a6c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d103      	bne.n	8002a80 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	1e5a      	subs	r2, r3, #1
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10b      	bne.n	8002acc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ab8:	f383 8811 	msr	BASEPRI, r3
 8002abc:	f3bf 8f6f 	isb	sy
 8002ac0:	f3bf 8f4f 	dsb	sy
 8002ac4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002ac6:	bf00      	nop
 8002ac8:	bf00      	nop
 8002aca:	e7fd      	b.n	8002ac8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002acc:	f002 f934 	bl	8004d38 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ad8:	68f9      	ldr	r1, [r7, #12]
 8002ada:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002adc:	fb01 f303 	mul.w	r3, r1, r3
 8002ae0:	441a      	add	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002afc:	3b01      	subs	r3, #1
 8002afe:	68f9      	ldr	r1, [r7, #12]
 8002b00:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002b02:	fb01 f303 	mul.w	r3, r1, r3
 8002b06:	441a      	add	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	22ff      	movs	r2, #255	@ 0xff
 8002b10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	22ff      	movs	r2, #255	@ 0xff
 8002b18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d114      	bne.n	8002b4c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d01a      	beq.n	8002b60 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	3310      	adds	r3, #16
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f001 f9d8 	bl	8003ee4 <xTaskRemoveFromEventList>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d012      	beq.n	8002b60 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b70 <xQueueGenericReset+0xd0>)
 8002b3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	f3bf 8f4f 	dsb	sy
 8002b46:	f3bf 8f6f 	isb	sy
 8002b4a:	e009      	b.n	8002b60 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	3310      	adds	r3, #16
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff fef1 	bl	8002938 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	3324      	adds	r3, #36	@ 0x24
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff feec 	bl	8002938 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002b60:	f002 f91c 	bl	8004d9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002b64:	2301      	movs	r3, #1
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	e000ed04 	.word	0xe000ed04

08002b74 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b08e      	sub	sp, #56	@ 0x38
 8002b78:	af02      	add	r7, sp, #8
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
 8002b80:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10b      	bne.n	8002ba0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b8c:	f383 8811 	msr	BASEPRI, r3
 8002b90:	f3bf 8f6f 	isb	sy
 8002b94:	f3bf 8f4f 	dsb	sy
 8002b98:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002b9a:	bf00      	nop
 8002b9c:	bf00      	nop
 8002b9e:	e7fd      	b.n	8002b9c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10b      	bne.n	8002bbe <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002baa:	f383 8811 	msr	BASEPRI, r3
 8002bae:	f3bf 8f6f 	isb	sy
 8002bb2:	f3bf 8f4f 	dsb	sy
 8002bb6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002bb8:	bf00      	nop
 8002bba:	bf00      	nop
 8002bbc:	e7fd      	b.n	8002bba <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d002      	beq.n	8002bca <xQueueGenericCreateStatic+0x56>
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <xQueueGenericCreateStatic+0x5a>
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e000      	b.n	8002bd0 <xQueueGenericCreateStatic+0x5c>
 8002bce:	2300      	movs	r3, #0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10b      	bne.n	8002bec <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bd8:	f383 8811 	msr	BASEPRI, r3
 8002bdc:	f3bf 8f6f 	isb	sy
 8002be0:	f3bf 8f4f 	dsb	sy
 8002be4:	623b      	str	r3, [r7, #32]
}
 8002be6:	bf00      	nop
 8002be8:	bf00      	nop
 8002bea:	e7fd      	b.n	8002be8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d102      	bne.n	8002bf8 <xQueueGenericCreateStatic+0x84>
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <xQueueGenericCreateStatic+0x88>
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e000      	b.n	8002bfe <xQueueGenericCreateStatic+0x8a>
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10b      	bne.n	8002c1a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c06:	f383 8811 	msr	BASEPRI, r3
 8002c0a:	f3bf 8f6f 	isb	sy
 8002c0e:	f3bf 8f4f 	dsb	sy
 8002c12:	61fb      	str	r3, [r7, #28]
}
 8002c14:	bf00      	nop
 8002c16:	bf00      	nop
 8002c18:	e7fd      	b.n	8002c16 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002c1a:	2350      	movs	r3, #80	@ 0x50
 8002c1c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	2b50      	cmp	r3, #80	@ 0x50
 8002c22:	d00b      	beq.n	8002c3c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c28:	f383 8811 	msr	BASEPRI, r3
 8002c2c:	f3bf 8f6f 	isb	sy
 8002c30:	f3bf 8f4f 	dsb	sy
 8002c34:	61bb      	str	r3, [r7, #24]
}
 8002c36:	bf00      	nop
 8002c38:	bf00      	nop
 8002c3a:	e7fd      	b.n	8002c38 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002c3c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00d      	beq.n	8002c64 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c50:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c56:	9300      	str	r3, [sp, #0]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	68b9      	ldr	r1, [r7, #8]
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f000 f840 	bl	8002ce4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3730      	adds	r7, #48	@ 0x30
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b08a      	sub	sp, #40	@ 0x28
 8002c72:	af02      	add	r7, sp, #8
 8002c74:	60f8      	str	r0, [r7, #12]
 8002c76:	60b9      	str	r1, [r7, #8]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10b      	bne.n	8002c9a <xQueueGenericCreate+0x2c>
	__asm volatile
 8002c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c86:	f383 8811 	msr	BASEPRI, r3
 8002c8a:	f3bf 8f6f 	isb	sy
 8002c8e:	f3bf 8f4f 	dsb	sy
 8002c92:	613b      	str	r3, [r7, #16]
}
 8002c94:	bf00      	nop
 8002c96:	bf00      	nop
 8002c98:	e7fd      	b.n	8002c96 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	68ba      	ldr	r2, [r7, #8]
 8002c9e:	fb02 f303 	mul.w	r3, r2, r3
 8002ca2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	3350      	adds	r3, #80	@ 0x50
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f002 f967 	bl	8004f7c <pvPortMalloc>
 8002cae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d011      	beq.n	8002cda <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	3350      	adds	r3, #80	@ 0x50
 8002cbe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002cc8:	79fa      	ldrb	r2, [r7, #7]
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	68b9      	ldr	r1, [r7, #8]
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f000 f805 	bl	8002ce4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002cda:	69bb      	ldr	r3, [r7, #24]
	}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3720      	adds	r7, #32
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
 8002cf0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d103      	bne.n	8002d00 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	e002      	b.n	8002d06 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	68ba      	ldr	r2, [r7, #8]
 8002d10:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002d12:	2101      	movs	r1, #1
 8002d14:	69b8      	ldr	r0, [r7, #24]
 8002d16:	f7ff fec3 	bl	8002aa0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	78fa      	ldrb	r2, [r7, #3]
 8002d1e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002d22:	bf00      	nop
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
	...

08002d2c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b08e      	sub	sp, #56	@ 0x38
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
 8002d38:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10b      	bne.n	8002d60 <xQueueGenericSend+0x34>
	__asm volatile
 8002d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d4c:	f383 8811 	msr	BASEPRI, r3
 8002d50:	f3bf 8f6f 	isb	sy
 8002d54:	f3bf 8f4f 	dsb	sy
 8002d58:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002d5a:	bf00      	nop
 8002d5c:	bf00      	nop
 8002d5e:	e7fd      	b.n	8002d5c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d103      	bne.n	8002d6e <xQueueGenericSend+0x42>
 8002d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <xQueueGenericSend+0x46>
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e000      	b.n	8002d74 <xQueueGenericSend+0x48>
 8002d72:	2300      	movs	r3, #0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d10b      	bne.n	8002d90 <xQueueGenericSend+0x64>
	__asm volatile
 8002d78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d7c:	f383 8811 	msr	BASEPRI, r3
 8002d80:	f3bf 8f6f 	isb	sy
 8002d84:	f3bf 8f4f 	dsb	sy
 8002d88:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002d8a:	bf00      	nop
 8002d8c:	bf00      	nop
 8002d8e:	e7fd      	b.n	8002d8c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d103      	bne.n	8002d9e <xQueueGenericSend+0x72>
 8002d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d101      	bne.n	8002da2 <xQueueGenericSend+0x76>
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e000      	b.n	8002da4 <xQueueGenericSend+0x78>
 8002da2:	2300      	movs	r3, #0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d10b      	bne.n	8002dc0 <xQueueGenericSend+0x94>
	__asm volatile
 8002da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dac:	f383 8811 	msr	BASEPRI, r3
 8002db0:	f3bf 8f6f 	isb	sy
 8002db4:	f3bf 8f4f 	dsb	sy
 8002db8:	623b      	str	r3, [r7, #32]
}
 8002dba:	bf00      	nop
 8002dbc:	bf00      	nop
 8002dbe:	e7fd      	b.n	8002dbc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002dc0:	f001 fa50 	bl	8004264 <xTaskGetSchedulerState>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d102      	bne.n	8002dd0 <xQueueGenericSend+0xa4>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d101      	bne.n	8002dd4 <xQueueGenericSend+0xa8>
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e000      	b.n	8002dd6 <xQueueGenericSend+0xaa>
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10b      	bne.n	8002df2 <xQueueGenericSend+0xc6>
	__asm volatile
 8002dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dde:	f383 8811 	msr	BASEPRI, r3
 8002de2:	f3bf 8f6f 	isb	sy
 8002de6:	f3bf 8f4f 	dsb	sy
 8002dea:	61fb      	str	r3, [r7, #28]
}
 8002dec:	bf00      	nop
 8002dee:	bf00      	nop
 8002df0:	e7fd      	b.n	8002dee <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002df2:	f001 ffa1 	bl	8004d38 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002df8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d302      	bcc.n	8002e08 <xQueueGenericSend+0xdc>
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d129      	bne.n	8002e5c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	68b9      	ldr	r1, [r7, #8]
 8002e0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e0e:	f000 fa91 	bl	8003334 <prvCopyDataToQueue>
 8002e12:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d010      	beq.n	8002e3e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e1e:	3324      	adds	r3, #36	@ 0x24
 8002e20:	4618      	mov	r0, r3
 8002e22:	f001 f85f 	bl	8003ee4 <xTaskRemoveFromEventList>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d013      	beq.n	8002e54 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002e2c:	4b3f      	ldr	r3, [pc, #252]	@ (8002f2c <xQueueGenericSend+0x200>)
 8002e2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	f3bf 8f4f 	dsb	sy
 8002e38:	f3bf 8f6f 	isb	sy
 8002e3c:	e00a      	b.n	8002e54 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d007      	beq.n	8002e54 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002e44:	4b39      	ldr	r3, [pc, #228]	@ (8002f2c <xQueueGenericSend+0x200>)
 8002e46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e4a:	601a      	str	r2, [r3, #0]
 8002e4c:	f3bf 8f4f 	dsb	sy
 8002e50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002e54:	f001 ffa2 	bl	8004d9c <vPortExitCritical>
				return pdPASS;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e063      	b.n	8002f24 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d103      	bne.n	8002e6a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e62:	f001 ff9b 	bl	8004d9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002e66:	2300      	movs	r3, #0
 8002e68:	e05c      	b.n	8002f24 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d106      	bne.n	8002e7e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e70:	f107 0314 	add.w	r3, r7, #20
 8002e74:	4618      	mov	r0, r3
 8002e76:	f001 f899 	bl	8003fac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e7e:	f001 ff8d 	bl	8004d9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e82:	f000 fe09 	bl	8003a98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e86:	f001 ff57 	bl	8004d38 <vPortEnterCritical>
 8002e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002e90:	b25b      	sxtb	r3, r3
 8002e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e96:	d103      	bne.n	8002ea0 <xQueueGenericSend+0x174>
 8002e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ea2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002ea6:	b25b      	sxtb	r3, r3
 8002ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eac:	d103      	bne.n	8002eb6 <xQueueGenericSend+0x18a>
 8002eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002eb6:	f001 ff71 	bl	8004d9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002eba:	1d3a      	adds	r2, r7, #4
 8002ebc:	f107 0314 	add.w	r3, r7, #20
 8002ec0:	4611      	mov	r1, r2
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f001 f888 	bl	8003fd8 <xTaskCheckForTimeOut>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d124      	bne.n	8002f18 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002ece:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ed0:	f000 fb28 	bl	8003524 <prvIsQueueFull>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d018      	beq.n	8002f0c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002edc:	3310      	adds	r3, #16
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	4611      	mov	r1, r2
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 ffac 	bl	8003e40 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002ee8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002eea:	f000 fab3 	bl	8003454 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002eee:	f000 fde1 	bl	8003ab4 <xTaskResumeAll>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f47f af7c 	bne.w	8002df2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002efa:	4b0c      	ldr	r3, [pc, #48]	@ (8002f2c <xQueueGenericSend+0x200>)
 8002efc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	f3bf 8f4f 	dsb	sy
 8002f06:	f3bf 8f6f 	isb	sy
 8002f0a:	e772      	b.n	8002df2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002f0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f0e:	f000 faa1 	bl	8003454 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f12:	f000 fdcf 	bl	8003ab4 <xTaskResumeAll>
 8002f16:	e76c      	b.n	8002df2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002f18:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f1a:	f000 fa9b 	bl	8003454 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f1e:	f000 fdc9 	bl	8003ab4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002f22:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3738      	adds	r7, #56	@ 0x38
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	e000ed04 	.word	0xe000ed04

08002f30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b090      	sub	sp, #64	@ 0x40
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
 8002f3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10b      	bne.n	8002f60 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f4c:	f383 8811 	msr	BASEPRI, r3
 8002f50:	f3bf 8f6f 	isb	sy
 8002f54:	f3bf 8f4f 	dsb	sy
 8002f58:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002f5a:	bf00      	nop
 8002f5c:	bf00      	nop
 8002f5e:	e7fd      	b.n	8002f5c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d103      	bne.n	8002f6e <xQueueGenericSendFromISR+0x3e>
 8002f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <xQueueGenericSendFromISR+0x42>
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e000      	b.n	8002f74 <xQueueGenericSendFromISR+0x44>
 8002f72:	2300      	movs	r3, #0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d10b      	bne.n	8002f90 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f7c:	f383 8811 	msr	BASEPRI, r3
 8002f80:	f3bf 8f6f 	isb	sy
 8002f84:	f3bf 8f4f 	dsb	sy
 8002f88:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002f8a:	bf00      	nop
 8002f8c:	bf00      	nop
 8002f8e:	e7fd      	b.n	8002f8c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d103      	bne.n	8002f9e <xQueueGenericSendFromISR+0x6e>
 8002f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d101      	bne.n	8002fa2 <xQueueGenericSendFromISR+0x72>
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e000      	b.n	8002fa4 <xQueueGenericSendFromISR+0x74>
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10b      	bne.n	8002fc0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002fa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fac:	f383 8811 	msr	BASEPRI, r3
 8002fb0:	f3bf 8f6f 	isb	sy
 8002fb4:	f3bf 8f4f 	dsb	sy
 8002fb8:	623b      	str	r3, [r7, #32]
}
 8002fba:	bf00      	nop
 8002fbc:	bf00      	nop
 8002fbe:	e7fd      	b.n	8002fbc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002fc0:	f001 ff9a 	bl	8004ef8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002fc4:	f3ef 8211 	mrs	r2, BASEPRI
 8002fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fcc:	f383 8811 	msr	BASEPRI, r3
 8002fd0:	f3bf 8f6f 	isb	sy
 8002fd4:	f3bf 8f4f 	dsb	sy
 8002fd8:	61fa      	str	r2, [r7, #28]
 8002fda:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002fdc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002fde:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fe2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d302      	bcc.n	8002ff2 <xQueueGenericSendFromISR+0xc2>
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d12f      	bne.n	8003052 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ff4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002ff8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003000:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003002:	683a      	ldr	r2, [r7, #0]
 8003004:	68b9      	ldr	r1, [r7, #8]
 8003006:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003008:	f000 f994 	bl	8003334 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800300c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003014:	d112      	bne.n	800303c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800301a:	2b00      	cmp	r3, #0
 800301c:	d016      	beq.n	800304c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800301e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003020:	3324      	adds	r3, #36	@ 0x24
 8003022:	4618      	mov	r0, r3
 8003024:	f000 ff5e 	bl	8003ee4 <xTaskRemoveFromEventList>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00e      	beq.n	800304c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00b      	beq.n	800304c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	601a      	str	r2, [r3, #0]
 800303a:	e007      	b.n	800304c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800303c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003040:	3301      	adds	r3, #1
 8003042:	b2db      	uxtb	r3, r3
 8003044:	b25a      	sxtb	r2, r3
 8003046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003048:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800304c:	2301      	movs	r3, #1
 800304e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003050:	e001      	b.n	8003056 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003052:	2300      	movs	r3, #0
 8003054:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003056:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003058:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003060:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003062:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003064:	4618      	mov	r0, r3
 8003066:	3740      	adds	r7, #64	@ 0x40
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b08c      	sub	sp, #48	@ 0x30
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003078:	2300      	movs	r3, #0
 800307a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10b      	bne.n	800309e <xQueueReceive+0x32>
	__asm volatile
 8003086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800308a:	f383 8811 	msr	BASEPRI, r3
 800308e:	f3bf 8f6f 	isb	sy
 8003092:	f3bf 8f4f 	dsb	sy
 8003096:	623b      	str	r3, [r7, #32]
}
 8003098:	bf00      	nop
 800309a:	bf00      	nop
 800309c:	e7fd      	b.n	800309a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d103      	bne.n	80030ac <xQueueReceive+0x40>
 80030a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d101      	bne.n	80030b0 <xQueueReceive+0x44>
 80030ac:	2301      	movs	r3, #1
 80030ae:	e000      	b.n	80030b2 <xQueueReceive+0x46>
 80030b0:	2300      	movs	r3, #0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10b      	bne.n	80030ce <xQueueReceive+0x62>
	__asm volatile
 80030b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030ba:	f383 8811 	msr	BASEPRI, r3
 80030be:	f3bf 8f6f 	isb	sy
 80030c2:	f3bf 8f4f 	dsb	sy
 80030c6:	61fb      	str	r3, [r7, #28]
}
 80030c8:	bf00      	nop
 80030ca:	bf00      	nop
 80030cc:	e7fd      	b.n	80030ca <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030ce:	f001 f8c9 	bl	8004264 <xTaskGetSchedulerState>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d102      	bne.n	80030de <xQueueReceive+0x72>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <xQueueReceive+0x76>
 80030de:	2301      	movs	r3, #1
 80030e0:	e000      	b.n	80030e4 <xQueueReceive+0x78>
 80030e2:	2300      	movs	r3, #0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10b      	bne.n	8003100 <xQueueReceive+0x94>
	__asm volatile
 80030e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030ec:	f383 8811 	msr	BASEPRI, r3
 80030f0:	f3bf 8f6f 	isb	sy
 80030f4:	f3bf 8f4f 	dsb	sy
 80030f8:	61bb      	str	r3, [r7, #24]
}
 80030fa:	bf00      	nop
 80030fc:	bf00      	nop
 80030fe:	e7fd      	b.n	80030fc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003100:	f001 fe1a 	bl	8004d38 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003108:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800310a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800310c:	2b00      	cmp	r3, #0
 800310e:	d01f      	beq.n	8003150 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003110:	68b9      	ldr	r1, [r7, #8]
 8003112:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003114:	f000 f978 	bl	8003408 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800311a:	1e5a      	subs	r2, r3, #1
 800311c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800311e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00f      	beq.n	8003148 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800312a:	3310      	adds	r3, #16
 800312c:	4618      	mov	r0, r3
 800312e:	f000 fed9 	bl	8003ee4 <xTaskRemoveFromEventList>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d007      	beq.n	8003148 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003138:	4b3c      	ldr	r3, [pc, #240]	@ (800322c <xQueueReceive+0x1c0>)
 800313a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	f3bf 8f4f 	dsb	sy
 8003144:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003148:	f001 fe28 	bl	8004d9c <vPortExitCritical>
				return pdPASS;
 800314c:	2301      	movs	r3, #1
 800314e:	e069      	b.n	8003224 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d103      	bne.n	800315e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003156:	f001 fe21 	bl	8004d9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800315a:	2300      	movs	r3, #0
 800315c:	e062      	b.n	8003224 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800315e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003160:	2b00      	cmp	r3, #0
 8003162:	d106      	bne.n	8003172 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003164:	f107 0310 	add.w	r3, r7, #16
 8003168:	4618      	mov	r0, r3
 800316a:	f000 ff1f 	bl	8003fac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800316e:	2301      	movs	r3, #1
 8003170:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003172:	f001 fe13 	bl	8004d9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003176:	f000 fc8f 	bl	8003a98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800317a:	f001 fddd 	bl	8004d38 <vPortEnterCritical>
 800317e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003180:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003184:	b25b      	sxtb	r3, r3
 8003186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800318a:	d103      	bne.n	8003194 <xQueueReceive+0x128>
 800318c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800318e:	2200      	movs	r2, #0
 8003190:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003196:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800319a:	b25b      	sxtb	r3, r3
 800319c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a0:	d103      	bne.n	80031aa <xQueueReceive+0x13e>
 80031a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80031aa:	f001 fdf7 	bl	8004d9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80031ae:	1d3a      	adds	r2, r7, #4
 80031b0:	f107 0310 	add.w	r3, r7, #16
 80031b4:	4611      	mov	r1, r2
 80031b6:	4618      	mov	r0, r3
 80031b8:	f000 ff0e 	bl	8003fd8 <xTaskCheckForTimeOut>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d123      	bne.n	800320a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031c4:	f000 f998 	bl	80034f8 <prvIsQueueEmpty>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d017      	beq.n	80031fe <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80031ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031d0:	3324      	adds	r3, #36	@ 0x24
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	4611      	mov	r1, r2
 80031d6:	4618      	mov	r0, r3
 80031d8:	f000 fe32 	bl	8003e40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80031dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031de:	f000 f939 	bl	8003454 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80031e2:	f000 fc67 	bl	8003ab4 <xTaskResumeAll>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d189      	bne.n	8003100 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80031ec:	4b0f      	ldr	r3, [pc, #60]	@ (800322c <xQueueReceive+0x1c0>)
 80031ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	f3bf 8f4f 	dsb	sy
 80031f8:	f3bf 8f6f 	isb	sy
 80031fc:	e780      	b.n	8003100 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80031fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003200:	f000 f928 	bl	8003454 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003204:	f000 fc56 	bl	8003ab4 <xTaskResumeAll>
 8003208:	e77a      	b.n	8003100 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800320a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800320c:	f000 f922 	bl	8003454 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003210:	f000 fc50 	bl	8003ab4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003214:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003216:	f000 f96f 	bl	80034f8 <prvIsQueueEmpty>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	f43f af6f 	beq.w	8003100 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003222:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003224:	4618      	mov	r0, r3
 8003226:	3730      	adds	r7, #48	@ 0x30
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	e000ed04 	.word	0xe000ed04

08003230 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b08e      	sub	sp, #56	@ 0x38
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10b      	bne.n	800325e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8003246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800324a:	f383 8811 	msr	BASEPRI, r3
 800324e:	f3bf 8f6f 	isb	sy
 8003252:	f3bf 8f4f 	dsb	sy
 8003256:	623b      	str	r3, [r7, #32]
}
 8003258:	bf00      	nop
 800325a:	bf00      	nop
 800325c:	e7fd      	b.n	800325a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d103      	bne.n	800326c <xQueueReceiveFromISR+0x3c>
 8003264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <xQueueReceiveFromISR+0x40>
 800326c:	2301      	movs	r3, #1
 800326e:	e000      	b.n	8003272 <xQueueReceiveFromISR+0x42>
 8003270:	2300      	movs	r3, #0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10b      	bne.n	800328e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8003276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800327a:	f383 8811 	msr	BASEPRI, r3
 800327e:	f3bf 8f6f 	isb	sy
 8003282:	f3bf 8f4f 	dsb	sy
 8003286:	61fb      	str	r3, [r7, #28]
}
 8003288:	bf00      	nop
 800328a:	bf00      	nop
 800328c:	e7fd      	b.n	800328a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800328e:	f001 fe33 	bl	8004ef8 <vPortValidateInterruptPriority>
	__asm volatile
 8003292:	f3ef 8211 	mrs	r2, BASEPRI
 8003296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800329a:	f383 8811 	msr	BASEPRI, r3
 800329e:	f3bf 8f6f 	isb	sy
 80032a2:	f3bf 8f4f 	dsb	sy
 80032a6:	61ba      	str	r2, [r7, #24]
 80032a8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80032aa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80032ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032b2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d02f      	beq.n	800331a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80032ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80032c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80032c4:	68b9      	ldr	r1, [r7, #8]
 80032c6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80032c8:	f000 f89e 	bl	8003408 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80032cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ce:	1e5a      	subs	r2, r3, #1
 80032d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032d2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80032d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80032d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032dc:	d112      	bne.n	8003304 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d016      	beq.n	8003314 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032e8:	3310      	adds	r3, #16
 80032ea:	4618      	mov	r0, r3
 80032ec:	f000 fdfa 	bl	8003ee4 <xTaskRemoveFromEventList>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00e      	beq.n	8003314 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00b      	beq.n	8003314 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	e007      	b.n	8003314 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003304:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003308:	3301      	adds	r3, #1
 800330a:	b2db      	uxtb	r3, r3
 800330c:	b25a      	sxtb	r2, r3
 800330e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003310:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8003314:	2301      	movs	r3, #1
 8003316:	637b      	str	r3, [r7, #52]	@ 0x34
 8003318:	e001      	b.n	800331e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800331a:	2300      	movs	r3, #0
 800331c:	637b      	str	r3, [r7, #52]	@ 0x34
 800331e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003320:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	f383 8811 	msr	BASEPRI, r3
}
 8003328:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800332a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800332c:	4618      	mov	r0, r3
 800332e:	3738      	adds	r7, #56	@ 0x38
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003340:	2300      	movs	r3, #0
 8003342:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003348:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10d      	bne.n	800336e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d14d      	bne.n	80033f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	4618      	mov	r0, r3
 8003360:	f000 ff9e 	bl	80042a0 <xTaskPriorityDisinherit>
 8003364:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	609a      	str	r2, [r3, #8]
 800336c:	e043      	b.n	80033f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d119      	bne.n	80033a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6858      	ldr	r0, [r3, #4]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337c:	461a      	mov	r2, r3
 800337e:	68b9      	ldr	r1, [r7, #8]
 8003380:	f002 f816 	bl	80053b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338c:	441a      	add	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	429a      	cmp	r2, r3
 800339c:	d32b      	bcc.n	80033f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	605a      	str	r2, [r3, #4]
 80033a6:	e026      	b.n	80033f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	68d8      	ldr	r0, [r3, #12]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b0:	461a      	mov	r2, r3
 80033b2:	68b9      	ldr	r1, [r7, #8]
 80033b4:	f001 fffc 	bl	80053b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	68da      	ldr	r2, [r3, #12]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c0:	425b      	negs	r3, r3
 80033c2:	441a      	add	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	68da      	ldr	r2, [r3, #12]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d207      	bcs.n	80033e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	689a      	ldr	r2, [r3, #8]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033dc:	425b      	negs	r3, r3
 80033de:	441a      	add	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d105      	bne.n	80033f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d002      	beq.n	80033f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	3b01      	subs	r3, #1
 80033f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1c5a      	adds	r2, r3, #1
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80033fe:	697b      	ldr	r3, [r7, #20]
}
 8003400:	4618      	mov	r0, r3
 8003402:	3718      	adds	r7, #24
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003416:	2b00      	cmp	r3, #0
 8003418:	d018      	beq.n	800344c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68da      	ldr	r2, [r3, #12]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003422:	441a      	add	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	68da      	ldr	r2, [r3, #12]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	429a      	cmp	r2, r3
 8003432:	d303      	bcc.n	800343c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68d9      	ldr	r1, [r3, #12]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003444:	461a      	mov	r2, r3
 8003446:	6838      	ldr	r0, [r7, #0]
 8003448:	f001 ffb2 	bl	80053b0 <memcpy>
	}
}
 800344c:	bf00      	nop
 800344e:	3708      	adds	r7, #8
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800345c:	f001 fc6c 	bl	8004d38 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003466:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003468:	e011      	b.n	800348e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800346e:	2b00      	cmp	r3, #0
 8003470:	d012      	beq.n	8003498 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	3324      	adds	r3, #36	@ 0x24
 8003476:	4618      	mov	r0, r3
 8003478:	f000 fd34 	bl	8003ee4 <xTaskRemoveFromEventList>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003482:	f000 fe0d 	bl	80040a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003486:	7bfb      	ldrb	r3, [r7, #15]
 8003488:	3b01      	subs	r3, #1
 800348a:	b2db      	uxtb	r3, r3
 800348c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800348e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003492:	2b00      	cmp	r3, #0
 8003494:	dce9      	bgt.n	800346a <prvUnlockQueue+0x16>
 8003496:	e000      	b.n	800349a <prvUnlockQueue+0x46>
					break;
 8003498:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	22ff      	movs	r2, #255	@ 0xff
 800349e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80034a2:	f001 fc7b 	bl	8004d9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80034a6:	f001 fc47 	bl	8004d38 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80034b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80034b2:	e011      	b.n	80034d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d012      	beq.n	80034e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	3310      	adds	r3, #16
 80034c0:	4618      	mov	r0, r3
 80034c2:	f000 fd0f 	bl	8003ee4 <xTaskRemoveFromEventList>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80034cc:	f000 fde8 	bl	80040a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80034d0:	7bbb      	ldrb	r3, [r7, #14]
 80034d2:	3b01      	subs	r3, #1
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80034d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	dce9      	bgt.n	80034b4 <prvUnlockQueue+0x60>
 80034e0:	e000      	b.n	80034e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80034e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	22ff      	movs	r2, #255	@ 0xff
 80034e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80034ec:	f001 fc56 	bl	8004d9c <vPortExitCritical>
}
 80034f0:	bf00      	nop
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003500:	f001 fc1a 	bl	8004d38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003508:	2b00      	cmp	r3, #0
 800350a:	d102      	bne.n	8003512 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800350c:	2301      	movs	r3, #1
 800350e:	60fb      	str	r3, [r7, #12]
 8003510:	e001      	b.n	8003516 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003512:	2300      	movs	r3, #0
 8003514:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003516:	f001 fc41 	bl	8004d9c <vPortExitCritical>

	return xReturn;
 800351a:	68fb      	ldr	r3, [r7, #12]
}
 800351c:	4618      	mov	r0, r3
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800352c:	f001 fc04 	bl	8004d38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003538:	429a      	cmp	r2, r3
 800353a:	d102      	bne.n	8003542 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800353c:	2301      	movs	r3, #1
 800353e:	60fb      	str	r3, [r7, #12]
 8003540:	e001      	b.n	8003546 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003542:	2300      	movs	r3, #0
 8003544:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003546:	f001 fc29 	bl	8004d9c <vPortExitCritical>

	return xReturn;
 800354a:	68fb      	ldr	r3, [r7, #12]
}
 800354c:	4618      	mov	r0, r3
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800355e:	2300      	movs	r3, #0
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	e014      	b.n	800358e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003564:	4a0f      	ldr	r2, [pc, #60]	@ (80035a4 <vQueueAddToRegistry+0x50>)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d10b      	bne.n	8003588 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003570:	490c      	ldr	r1, [pc, #48]	@ (80035a4 <vQueueAddToRegistry+0x50>)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	683a      	ldr	r2, [r7, #0]
 8003576:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800357a:	4a0a      	ldr	r2, [pc, #40]	@ (80035a4 <vQueueAddToRegistry+0x50>)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	4413      	add	r3, r2
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003586:	e006      	b.n	8003596 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	3301      	adds	r3, #1
 800358c:	60fb      	str	r3, [r7, #12]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2b07      	cmp	r3, #7
 8003592:	d9e7      	bls.n	8003564 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003594:	bf00      	nop
 8003596:	bf00      	nop
 8003598:	3714      	adds	r7, #20
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	20000780 	.word	0x20000780

080035a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80035b8:	f001 fbbe 	bl	8004d38 <vPortEnterCritical>
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80035c2:	b25b      	sxtb	r3, r3
 80035c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c8:	d103      	bne.n	80035d2 <vQueueWaitForMessageRestricted+0x2a>
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80035d8:	b25b      	sxtb	r3, r3
 80035da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035de:	d103      	bne.n	80035e8 <vQueueWaitForMessageRestricted+0x40>
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80035e8:	f001 fbd8 	bl	8004d9c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d106      	bne.n	8003602 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	3324      	adds	r3, #36	@ 0x24
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	68b9      	ldr	r1, [r7, #8]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f000 fc45 	bl	8003e8c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003602:	6978      	ldr	r0, [r7, #20]
 8003604:	f7ff ff26 	bl	8003454 <prvUnlockQueue>
	}
 8003608:	bf00      	nop
 800360a:	3718      	adds	r7, #24
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003610:	b580      	push	{r7, lr}
 8003612:	b08e      	sub	sp, #56	@ 0x38
 8003614:	af04      	add	r7, sp, #16
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
 800361c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800361e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10b      	bne.n	800363c <xTaskCreateStatic+0x2c>
	__asm volatile
 8003624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003628:	f383 8811 	msr	BASEPRI, r3
 800362c:	f3bf 8f6f 	isb	sy
 8003630:	f3bf 8f4f 	dsb	sy
 8003634:	623b      	str	r3, [r7, #32]
}
 8003636:	bf00      	nop
 8003638:	bf00      	nop
 800363a:	e7fd      	b.n	8003638 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800363c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10b      	bne.n	800365a <xTaskCreateStatic+0x4a>
	__asm volatile
 8003642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003646:	f383 8811 	msr	BASEPRI, r3
 800364a:	f3bf 8f6f 	isb	sy
 800364e:	f3bf 8f4f 	dsb	sy
 8003652:	61fb      	str	r3, [r7, #28]
}
 8003654:	bf00      	nop
 8003656:	bf00      	nop
 8003658:	e7fd      	b.n	8003656 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800365a:	235c      	movs	r3, #92	@ 0x5c
 800365c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	2b5c      	cmp	r3, #92	@ 0x5c
 8003662:	d00b      	beq.n	800367c <xTaskCreateStatic+0x6c>
	__asm volatile
 8003664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003668:	f383 8811 	msr	BASEPRI, r3
 800366c:	f3bf 8f6f 	isb	sy
 8003670:	f3bf 8f4f 	dsb	sy
 8003674:	61bb      	str	r3, [r7, #24]
}
 8003676:	bf00      	nop
 8003678:	bf00      	nop
 800367a:	e7fd      	b.n	8003678 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800367c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800367e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003680:	2b00      	cmp	r3, #0
 8003682:	d01e      	beq.n	80036c2 <xTaskCreateStatic+0xb2>
 8003684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003686:	2b00      	cmp	r3, #0
 8003688:	d01b      	beq.n	80036c2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800368a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800368c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800368e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003690:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003692:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003696:	2202      	movs	r2, #2
 8003698:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800369c:	2300      	movs	r3, #0
 800369e:	9303      	str	r3, [sp, #12]
 80036a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a2:	9302      	str	r3, [sp, #8]
 80036a4:	f107 0314 	add.w	r3, r7, #20
 80036a8:	9301      	str	r3, [sp, #4]
 80036aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ac:	9300      	str	r3, [sp, #0]
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	68b9      	ldr	r1, [r7, #8]
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f000 f850 	bl	800375a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80036bc:	f000 f8de 	bl	800387c <prvAddNewTaskToReadyList>
 80036c0:	e001      	b.n	80036c6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80036c2:	2300      	movs	r3, #0
 80036c4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80036c6:	697b      	ldr	r3, [r7, #20]
	}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3728      	adds	r7, #40	@ 0x28
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b08c      	sub	sp, #48	@ 0x30
 80036d4:	af04      	add	r7, sp, #16
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	603b      	str	r3, [r7, #0]
 80036dc:	4613      	mov	r3, r2
 80036de:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80036e0:	88fb      	ldrh	r3, [r7, #6]
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4618      	mov	r0, r3
 80036e6:	f001 fc49 	bl	8004f7c <pvPortMalloc>
 80036ea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00e      	beq.n	8003710 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80036f2:	205c      	movs	r0, #92	@ 0x5c
 80036f4:	f001 fc42 	bl	8004f7c <pvPortMalloc>
 80036f8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d003      	beq.n	8003708 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	631a      	str	r2, [r3, #48]	@ 0x30
 8003706:	e005      	b.n	8003714 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003708:	6978      	ldr	r0, [r7, #20]
 800370a:	f001 fd05 	bl	8005118 <vPortFree>
 800370e:	e001      	b.n	8003714 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003710:	2300      	movs	r3, #0
 8003712:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d017      	beq.n	800374a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003722:	88fa      	ldrh	r2, [r7, #6]
 8003724:	2300      	movs	r3, #0
 8003726:	9303      	str	r3, [sp, #12]
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	9302      	str	r3, [sp, #8]
 800372c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800372e:	9301      	str	r3, [sp, #4]
 8003730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003732:	9300      	str	r3, [sp, #0]
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	68b9      	ldr	r1, [r7, #8]
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 f80e 	bl	800375a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800373e:	69f8      	ldr	r0, [r7, #28]
 8003740:	f000 f89c 	bl	800387c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003744:	2301      	movs	r3, #1
 8003746:	61bb      	str	r3, [r7, #24]
 8003748:	e002      	b.n	8003750 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800374a:	f04f 33ff 	mov.w	r3, #4294967295
 800374e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003750:	69bb      	ldr	r3, [r7, #24]
	}
 8003752:	4618      	mov	r0, r3
 8003754:	3720      	adds	r7, #32
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b088      	sub	sp, #32
 800375e:	af00      	add	r7, sp, #0
 8003760:	60f8      	str	r0, [r7, #12]
 8003762:	60b9      	str	r1, [r7, #8]
 8003764:	607a      	str	r2, [r7, #4]
 8003766:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800376a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	461a      	mov	r2, r3
 8003772:	21a5      	movs	r1, #165	@ 0xa5
 8003774:	f001 fdf0 	bl	8005358 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800377a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003782:	3b01      	subs	r3, #1
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4413      	add	r3, r2
 8003788:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	f023 0307 	bic.w	r3, r3, #7
 8003790:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00b      	beq.n	80037b4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800379c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037a0:	f383 8811 	msr	BASEPRI, r3
 80037a4:	f3bf 8f6f 	isb	sy
 80037a8:	f3bf 8f4f 	dsb	sy
 80037ac:	617b      	str	r3, [r7, #20]
}
 80037ae:	bf00      	nop
 80037b0:	bf00      	nop
 80037b2:	e7fd      	b.n	80037b0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d01f      	beq.n	80037fa <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037ba:	2300      	movs	r3, #0
 80037bc:	61fb      	str	r3, [r7, #28]
 80037be:	e012      	b.n	80037e6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	4413      	add	r3, r2
 80037c6:	7819      	ldrb	r1, [r3, #0]
 80037c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	4413      	add	r3, r2
 80037ce:	3334      	adds	r3, #52	@ 0x34
 80037d0:	460a      	mov	r2, r1
 80037d2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80037d4:	68ba      	ldr	r2, [r7, #8]
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	4413      	add	r3, r2
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d006      	beq.n	80037ee <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	3301      	adds	r3, #1
 80037e4:	61fb      	str	r3, [r7, #28]
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	2b0f      	cmp	r3, #15
 80037ea:	d9e9      	bls.n	80037c0 <prvInitialiseNewTask+0x66>
 80037ec:	e000      	b.n	80037f0 <prvInitialiseNewTask+0x96>
			{
				break;
 80037ee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80037f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80037f8:	e003      	b.n	8003802 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80037fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003804:	2b37      	cmp	r3, #55	@ 0x37
 8003806:	d901      	bls.n	800380c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003808:	2337      	movs	r3, #55	@ 0x37
 800380a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800380c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800380e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003810:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003814:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003816:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800381a:	2200      	movs	r2, #0
 800381c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800381e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003820:	3304      	adds	r3, #4
 8003822:	4618      	mov	r0, r3
 8003824:	f7ff f8a8 	bl	8002978 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800382a:	3318      	adds	r3, #24
 800382c:	4618      	mov	r0, r3
 800382e:	f7ff f8a3 	bl	8002978 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003834:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003836:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800383a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800383e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003840:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003844:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003846:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800384a:	2200      	movs	r2, #0
 800384c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800384e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	68f9      	ldr	r1, [r7, #12]
 800385a:	69b8      	ldr	r0, [r7, #24]
 800385c:	f001 f93e 	bl	8004adc <pxPortInitialiseStack>
 8003860:	4602      	mov	r2, r0
 8003862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003864:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003868:	2b00      	cmp	r3, #0
 800386a:	d002      	beq.n	8003872 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800386c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800386e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003870:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003872:	bf00      	nop
 8003874:	3720      	adds	r7, #32
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
	...

0800387c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003884:	f001 fa58 	bl	8004d38 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003888:	4b2d      	ldr	r3, [pc, #180]	@ (8003940 <prvAddNewTaskToReadyList+0xc4>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	3301      	adds	r3, #1
 800388e:	4a2c      	ldr	r2, [pc, #176]	@ (8003940 <prvAddNewTaskToReadyList+0xc4>)
 8003890:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003892:	4b2c      	ldr	r3, [pc, #176]	@ (8003944 <prvAddNewTaskToReadyList+0xc8>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d109      	bne.n	80038ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800389a:	4a2a      	ldr	r2, [pc, #168]	@ (8003944 <prvAddNewTaskToReadyList+0xc8>)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80038a0:	4b27      	ldr	r3, [pc, #156]	@ (8003940 <prvAddNewTaskToReadyList+0xc4>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d110      	bne.n	80038ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80038a8:	f000 fc1e 	bl	80040e8 <prvInitialiseTaskLists>
 80038ac:	e00d      	b.n	80038ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80038ae:	4b26      	ldr	r3, [pc, #152]	@ (8003948 <prvAddNewTaskToReadyList+0xcc>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d109      	bne.n	80038ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80038b6:	4b23      	ldr	r3, [pc, #140]	@ (8003944 <prvAddNewTaskToReadyList+0xc8>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d802      	bhi.n	80038ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80038c4:	4a1f      	ldr	r2, [pc, #124]	@ (8003944 <prvAddNewTaskToReadyList+0xc8>)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80038ca:	4b20      	ldr	r3, [pc, #128]	@ (800394c <prvAddNewTaskToReadyList+0xd0>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	3301      	adds	r3, #1
 80038d0:	4a1e      	ldr	r2, [pc, #120]	@ (800394c <prvAddNewTaskToReadyList+0xd0>)
 80038d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80038d4:	4b1d      	ldr	r3, [pc, #116]	@ (800394c <prvAddNewTaskToReadyList+0xd0>)
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003950 <prvAddNewTaskToReadyList+0xd4>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d903      	bls.n	80038f0 <prvAddNewTaskToReadyList+0x74>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ec:	4a18      	ldr	r2, [pc, #96]	@ (8003950 <prvAddNewTaskToReadyList+0xd4>)
 80038ee:	6013      	str	r3, [r2, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038f4:	4613      	mov	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	4413      	add	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4a15      	ldr	r2, [pc, #84]	@ (8003954 <prvAddNewTaskToReadyList+0xd8>)
 80038fe:	441a      	add	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	3304      	adds	r3, #4
 8003904:	4619      	mov	r1, r3
 8003906:	4610      	mov	r0, r2
 8003908:	f7ff f843 	bl	8002992 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800390c:	f001 fa46 	bl	8004d9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003910:	4b0d      	ldr	r3, [pc, #52]	@ (8003948 <prvAddNewTaskToReadyList+0xcc>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00e      	beq.n	8003936 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003918:	4b0a      	ldr	r3, [pc, #40]	@ (8003944 <prvAddNewTaskToReadyList+0xc8>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003922:	429a      	cmp	r2, r3
 8003924:	d207      	bcs.n	8003936 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003926:	4b0c      	ldr	r3, [pc, #48]	@ (8003958 <prvAddNewTaskToReadyList+0xdc>)
 8003928:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800392c:	601a      	str	r2, [r3, #0]
 800392e:	f3bf 8f4f 	dsb	sy
 8003932:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003936:	bf00      	nop
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	20000c94 	.word	0x20000c94
 8003944:	200007c0 	.word	0x200007c0
 8003948:	20000ca0 	.word	0x20000ca0
 800394c:	20000cb0 	.word	0x20000cb0
 8003950:	20000c9c 	.word	0x20000c9c
 8003954:	200007c4 	.word	0x200007c4
 8003958:	e000ed04 	.word	0xe000ed04

0800395c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003964:	2300      	movs	r3, #0
 8003966:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d018      	beq.n	80039a0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800396e:	4b14      	ldr	r3, [pc, #80]	@ (80039c0 <vTaskDelay+0x64>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00b      	beq.n	800398e <vTaskDelay+0x32>
	__asm volatile
 8003976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800397a:	f383 8811 	msr	BASEPRI, r3
 800397e:	f3bf 8f6f 	isb	sy
 8003982:	f3bf 8f4f 	dsb	sy
 8003986:	60bb      	str	r3, [r7, #8]
}
 8003988:	bf00      	nop
 800398a:	bf00      	nop
 800398c:	e7fd      	b.n	800398a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800398e:	f000 f883 	bl	8003a98 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003992:	2100      	movs	r1, #0
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 fcf3 	bl	8004380 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800399a:	f000 f88b 	bl	8003ab4 <xTaskResumeAll>
 800399e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d107      	bne.n	80039b6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80039a6:	4b07      	ldr	r3, [pc, #28]	@ (80039c4 <vTaskDelay+0x68>)
 80039a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039ac:	601a      	str	r2, [r3, #0]
 80039ae:	f3bf 8f4f 	dsb	sy
 80039b2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80039b6:	bf00      	nop
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	20000cbc 	.word	0x20000cbc
 80039c4:	e000ed04 	.word	0xe000ed04

080039c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b08a      	sub	sp, #40	@ 0x28
 80039cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80039ce:	2300      	movs	r3, #0
 80039d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80039d2:	2300      	movs	r3, #0
 80039d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80039d6:	463a      	mov	r2, r7
 80039d8:	1d39      	adds	r1, r7, #4
 80039da:	f107 0308 	add.w	r3, r7, #8
 80039de:	4618      	mov	r0, r3
 80039e0:	f7fe ff76 	bl	80028d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80039e4:	6839      	ldr	r1, [r7, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	68ba      	ldr	r2, [r7, #8]
 80039ea:	9202      	str	r2, [sp, #8]
 80039ec:	9301      	str	r3, [sp, #4]
 80039ee:	2300      	movs	r3, #0
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	2300      	movs	r3, #0
 80039f4:	460a      	mov	r2, r1
 80039f6:	4922      	ldr	r1, [pc, #136]	@ (8003a80 <vTaskStartScheduler+0xb8>)
 80039f8:	4822      	ldr	r0, [pc, #136]	@ (8003a84 <vTaskStartScheduler+0xbc>)
 80039fa:	f7ff fe09 	bl	8003610 <xTaskCreateStatic>
 80039fe:	4603      	mov	r3, r0
 8003a00:	4a21      	ldr	r2, [pc, #132]	@ (8003a88 <vTaskStartScheduler+0xc0>)
 8003a02:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003a04:	4b20      	ldr	r3, [pc, #128]	@ (8003a88 <vTaskStartScheduler+0xc0>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d002      	beq.n	8003a12 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	617b      	str	r3, [r7, #20]
 8003a10:	e001      	b.n	8003a16 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003a12:	2300      	movs	r3, #0
 8003a14:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d102      	bne.n	8003a22 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003a1c:	f000 fd04 	bl	8004428 <xTimerCreateTimerTask>
 8003a20:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d116      	bne.n	8003a56 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a2c:	f383 8811 	msr	BASEPRI, r3
 8003a30:	f3bf 8f6f 	isb	sy
 8003a34:	f3bf 8f4f 	dsb	sy
 8003a38:	613b      	str	r3, [r7, #16]
}
 8003a3a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003a3c:	4b13      	ldr	r3, [pc, #76]	@ (8003a8c <vTaskStartScheduler+0xc4>)
 8003a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8003a42:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a44:	4b12      	ldr	r3, [pc, #72]	@ (8003a90 <vTaskStartScheduler+0xc8>)
 8003a46:	2201      	movs	r2, #1
 8003a48:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a4a:	4b12      	ldr	r3, [pc, #72]	@ (8003a94 <vTaskStartScheduler+0xcc>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a50:	f001 f8ce 	bl	8004bf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a54:	e00f      	b.n	8003a76 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a5c:	d10b      	bne.n	8003a76 <vTaskStartScheduler+0xae>
	__asm volatile
 8003a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a62:	f383 8811 	msr	BASEPRI, r3
 8003a66:	f3bf 8f6f 	isb	sy
 8003a6a:	f3bf 8f4f 	dsb	sy
 8003a6e:	60fb      	str	r3, [r7, #12]
}
 8003a70:	bf00      	nop
 8003a72:	bf00      	nop
 8003a74:	e7fd      	b.n	8003a72 <vTaskStartScheduler+0xaa>
}
 8003a76:	bf00      	nop
 8003a78:	3718      	adds	r7, #24
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	080053fc 	.word	0x080053fc
 8003a84:	080040b9 	.word	0x080040b9
 8003a88:	20000cb8 	.word	0x20000cb8
 8003a8c:	20000cb4 	.word	0x20000cb4
 8003a90:	20000ca0 	.word	0x20000ca0
 8003a94:	20000c98 	.word	0x20000c98

08003a98 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003a9c:	4b04      	ldr	r3, [pc, #16]	@ (8003ab0 <vTaskSuspendAll+0x18>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	4a03      	ldr	r2, [pc, #12]	@ (8003ab0 <vTaskSuspendAll+0x18>)
 8003aa4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003aa6:	bf00      	nop
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr
 8003ab0:	20000cbc 	.word	0x20000cbc

08003ab4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003aba:	2300      	movs	r3, #0
 8003abc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003ac2:	4b42      	ldr	r3, [pc, #264]	@ (8003bcc <xTaskResumeAll+0x118>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10b      	bne.n	8003ae2 <xTaskResumeAll+0x2e>
	__asm volatile
 8003aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ace:	f383 8811 	msr	BASEPRI, r3
 8003ad2:	f3bf 8f6f 	isb	sy
 8003ad6:	f3bf 8f4f 	dsb	sy
 8003ada:	603b      	str	r3, [r7, #0]
}
 8003adc:	bf00      	nop
 8003ade:	bf00      	nop
 8003ae0:	e7fd      	b.n	8003ade <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003ae2:	f001 f929 	bl	8004d38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003ae6:	4b39      	ldr	r3, [pc, #228]	@ (8003bcc <xTaskResumeAll+0x118>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	3b01      	subs	r3, #1
 8003aec:	4a37      	ldr	r2, [pc, #220]	@ (8003bcc <xTaskResumeAll+0x118>)
 8003aee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003af0:	4b36      	ldr	r3, [pc, #216]	@ (8003bcc <xTaskResumeAll+0x118>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d162      	bne.n	8003bbe <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003af8:	4b35      	ldr	r3, [pc, #212]	@ (8003bd0 <xTaskResumeAll+0x11c>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d05e      	beq.n	8003bbe <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b00:	e02f      	b.n	8003b62 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b02:	4b34      	ldr	r3, [pc, #208]	@ (8003bd4 <xTaskResumeAll+0x120>)
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	3318      	adds	r3, #24
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7fe ff9c 	bl	8002a4c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	3304      	adds	r3, #4
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7fe ff97 	bl	8002a4c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b22:	4b2d      	ldr	r3, [pc, #180]	@ (8003bd8 <xTaskResumeAll+0x124>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d903      	bls.n	8003b32 <xTaskResumeAll+0x7e>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b2e:	4a2a      	ldr	r2, [pc, #168]	@ (8003bd8 <xTaskResumeAll+0x124>)
 8003b30:	6013      	str	r3, [r2, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b36:	4613      	mov	r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	4413      	add	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	4a27      	ldr	r2, [pc, #156]	@ (8003bdc <xTaskResumeAll+0x128>)
 8003b40:	441a      	add	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	3304      	adds	r3, #4
 8003b46:	4619      	mov	r1, r3
 8003b48:	4610      	mov	r0, r2
 8003b4a:	f7fe ff22 	bl	8002992 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b52:	4b23      	ldr	r3, [pc, #140]	@ (8003be0 <xTaskResumeAll+0x12c>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d302      	bcc.n	8003b62 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003b5c:	4b21      	ldr	r3, [pc, #132]	@ (8003be4 <xTaskResumeAll+0x130>)
 8003b5e:	2201      	movs	r2, #1
 8003b60:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b62:	4b1c      	ldr	r3, [pc, #112]	@ (8003bd4 <xTaskResumeAll+0x120>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1cb      	bne.n	8003b02 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d001      	beq.n	8003b74 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003b70:	f000 fb58 	bl	8004224 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003b74:	4b1c      	ldr	r3, [pc, #112]	@ (8003be8 <xTaskResumeAll+0x134>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d010      	beq.n	8003ba2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003b80:	f000 f846 	bl	8003c10 <xTaskIncrementTick>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d002      	beq.n	8003b90 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003b8a:	4b16      	ldr	r3, [pc, #88]	@ (8003be4 <xTaskResumeAll+0x130>)
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	3b01      	subs	r3, #1
 8003b94:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1f1      	bne.n	8003b80 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003b9c:	4b12      	ldr	r3, [pc, #72]	@ (8003be8 <xTaskResumeAll+0x134>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003ba2:	4b10      	ldr	r3, [pc, #64]	@ (8003be4 <xTaskResumeAll+0x130>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d009      	beq.n	8003bbe <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003baa:	2301      	movs	r3, #1
 8003bac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003bae:	4b0f      	ldr	r3, [pc, #60]	@ (8003bec <xTaskResumeAll+0x138>)
 8003bb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bb4:	601a      	str	r2, [r3, #0]
 8003bb6:	f3bf 8f4f 	dsb	sy
 8003bba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003bbe:	f001 f8ed 	bl	8004d9c <vPortExitCritical>

	return xAlreadyYielded;
 8003bc2:	68bb      	ldr	r3, [r7, #8]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	20000cbc 	.word	0x20000cbc
 8003bd0:	20000c94 	.word	0x20000c94
 8003bd4:	20000c54 	.word	0x20000c54
 8003bd8:	20000c9c 	.word	0x20000c9c
 8003bdc:	200007c4 	.word	0x200007c4
 8003be0:	200007c0 	.word	0x200007c0
 8003be4:	20000ca8 	.word	0x20000ca8
 8003be8:	20000ca4 	.word	0x20000ca4
 8003bec:	e000ed04 	.word	0xe000ed04

08003bf0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003bf6:	4b05      	ldr	r3, [pc, #20]	@ (8003c0c <xTaskGetTickCount+0x1c>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003bfc:	687b      	ldr	r3, [r7, #4]
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	20000c98 	.word	0x20000c98

08003c10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003c16:	2300      	movs	r3, #0
 8003c18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c1a:	4b4f      	ldr	r3, [pc, #316]	@ (8003d58 <xTaskIncrementTick+0x148>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f040 8090 	bne.w	8003d44 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003c24:	4b4d      	ldr	r3, [pc, #308]	@ (8003d5c <xTaskIncrementTick+0x14c>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003c2c:	4a4b      	ldr	r2, [pc, #300]	@ (8003d5c <xTaskIncrementTick+0x14c>)
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d121      	bne.n	8003c7c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003c38:	4b49      	ldr	r3, [pc, #292]	@ (8003d60 <xTaskIncrementTick+0x150>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00b      	beq.n	8003c5a <xTaskIncrementTick+0x4a>
	__asm volatile
 8003c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c46:	f383 8811 	msr	BASEPRI, r3
 8003c4a:	f3bf 8f6f 	isb	sy
 8003c4e:	f3bf 8f4f 	dsb	sy
 8003c52:	603b      	str	r3, [r7, #0]
}
 8003c54:	bf00      	nop
 8003c56:	bf00      	nop
 8003c58:	e7fd      	b.n	8003c56 <xTaskIncrementTick+0x46>
 8003c5a:	4b41      	ldr	r3, [pc, #260]	@ (8003d60 <xTaskIncrementTick+0x150>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	60fb      	str	r3, [r7, #12]
 8003c60:	4b40      	ldr	r3, [pc, #256]	@ (8003d64 <xTaskIncrementTick+0x154>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a3e      	ldr	r2, [pc, #248]	@ (8003d60 <xTaskIncrementTick+0x150>)
 8003c66:	6013      	str	r3, [r2, #0]
 8003c68:	4a3e      	ldr	r2, [pc, #248]	@ (8003d64 <xTaskIncrementTick+0x154>)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6013      	str	r3, [r2, #0]
 8003c6e:	4b3e      	ldr	r3, [pc, #248]	@ (8003d68 <xTaskIncrementTick+0x158>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	3301      	adds	r3, #1
 8003c74:	4a3c      	ldr	r2, [pc, #240]	@ (8003d68 <xTaskIncrementTick+0x158>)
 8003c76:	6013      	str	r3, [r2, #0]
 8003c78:	f000 fad4 	bl	8004224 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c7c:	4b3b      	ldr	r3, [pc, #236]	@ (8003d6c <xTaskIncrementTick+0x15c>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d349      	bcc.n	8003d1a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c86:	4b36      	ldr	r3, [pc, #216]	@ (8003d60 <xTaskIncrementTick+0x150>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d104      	bne.n	8003c9a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c90:	4b36      	ldr	r3, [pc, #216]	@ (8003d6c <xTaskIncrementTick+0x15c>)
 8003c92:	f04f 32ff 	mov.w	r2, #4294967295
 8003c96:	601a      	str	r2, [r3, #0]
					break;
 8003c98:	e03f      	b.n	8003d1a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c9a:	4b31      	ldr	r3, [pc, #196]	@ (8003d60 <xTaskIncrementTick+0x150>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d203      	bcs.n	8003cba <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003cb2:	4a2e      	ldr	r2, [pc, #184]	@ (8003d6c <xTaskIncrementTick+0x15c>)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003cb8:	e02f      	b.n	8003d1a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7fe fec4 	bl	8002a4c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d004      	beq.n	8003cd6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	3318      	adds	r3, #24
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7fe febb 	bl	8002a4c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cda:	4b25      	ldr	r3, [pc, #148]	@ (8003d70 <xTaskIncrementTick+0x160>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d903      	bls.n	8003cea <xTaskIncrementTick+0xda>
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce6:	4a22      	ldr	r2, [pc, #136]	@ (8003d70 <xTaskIncrementTick+0x160>)
 8003ce8:	6013      	str	r3, [r2, #0]
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cee:	4613      	mov	r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	4413      	add	r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	4a1f      	ldr	r2, [pc, #124]	@ (8003d74 <xTaskIncrementTick+0x164>)
 8003cf8:	441a      	add	r2, r3
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	3304      	adds	r3, #4
 8003cfe:	4619      	mov	r1, r3
 8003d00:	4610      	mov	r0, r2
 8003d02:	f7fe fe46 	bl	8002992 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d0a:	4b1b      	ldr	r3, [pc, #108]	@ (8003d78 <xTaskIncrementTick+0x168>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d3b8      	bcc.n	8003c86 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003d14:	2301      	movs	r3, #1
 8003d16:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d18:	e7b5      	b.n	8003c86 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d1a:	4b17      	ldr	r3, [pc, #92]	@ (8003d78 <xTaskIncrementTick+0x168>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d20:	4914      	ldr	r1, [pc, #80]	@ (8003d74 <xTaskIncrementTick+0x164>)
 8003d22:	4613      	mov	r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	4413      	add	r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	440b      	add	r3, r1
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d901      	bls.n	8003d36 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003d32:	2301      	movs	r3, #1
 8003d34:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003d36:	4b11      	ldr	r3, [pc, #68]	@ (8003d7c <xTaskIncrementTick+0x16c>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d007      	beq.n	8003d4e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	617b      	str	r3, [r7, #20]
 8003d42:	e004      	b.n	8003d4e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003d44:	4b0e      	ldr	r3, [pc, #56]	@ (8003d80 <xTaskIncrementTick+0x170>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	3301      	adds	r3, #1
 8003d4a:	4a0d      	ldr	r2, [pc, #52]	@ (8003d80 <xTaskIncrementTick+0x170>)
 8003d4c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003d4e:	697b      	ldr	r3, [r7, #20]
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3718      	adds	r7, #24
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	20000cbc 	.word	0x20000cbc
 8003d5c:	20000c98 	.word	0x20000c98
 8003d60:	20000c4c 	.word	0x20000c4c
 8003d64:	20000c50 	.word	0x20000c50
 8003d68:	20000cac 	.word	0x20000cac
 8003d6c:	20000cb4 	.word	0x20000cb4
 8003d70:	20000c9c 	.word	0x20000c9c
 8003d74:	200007c4 	.word	0x200007c4
 8003d78:	200007c0 	.word	0x200007c0
 8003d7c:	20000ca8 	.word	0x20000ca8
 8003d80:	20000ca4 	.word	0x20000ca4

08003d84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003d8a:	4b28      	ldr	r3, [pc, #160]	@ (8003e2c <vTaskSwitchContext+0xa8>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d003      	beq.n	8003d9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003d92:	4b27      	ldr	r3, [pc, #156]	@ (8003e30 <vTaskSwitchContext+0xac>)
 8003d94:	2201      	movs	r2, #1
 8003d96:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003d98:	e042      	b.n	8003e20 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8003d9a:	4b25      	ldr	r3, [pc, #148]	@ (8003e30 <vTaskSwitchContext+0xac>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003da0:	4b24      	ldr	r3, [pc, #144]	@ (8003e34 <vTaskSwitchContext+0xb0>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	60fb      	str	r3, [r7, #12]
 8003da6:	e011      	b.n	8003dcc <vTaskSwitchContext+0x48>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d10b      	bne.n	8003dc6 <vTaskSwitchContext+0x42>
	__asm volatile
 8003dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003db2:	f383 8811 	msr	BASEPRI, r3
 8003db6:	f3bf 8f6f 	isb	sy
 8003dba:	f3bf 8f4f 	dsb	sy
 8003dbe:	607b      	str	r3, [r7, #4]
}
 8003dc0:	bf00      	nop
 8003dc2:	bf00      	nop
 8003dc4:	e7fd      	b.n	8003dc2 <vTaskSwitchContext+0x3e>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	60fb      	str	r3, [r7, #12]
 8003dcc:	491a      	ldr	r1, [pc, #104]	@ (8003e38 <vTaskSwitchContext+0xb4>)
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	4413      	add	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	440b      	add	r3, r1
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d0e3      	beq.n	8003da8 <vTaskSwitchContext+0x24>
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	4613      	mov	r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	4413      	add	r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	4a13      	ldr	r2, [pc, #76]	@ (8003e38 <vTaskSwitchContext+0xb4>)
 8003dec:	4413      	add	r3, r2
 8003dee:	60bb      	str	r3, [r7, #8]
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	605a      	str	r2, [r3, #4]
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	3308      	adds	r3, #8
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d104      	bne.n	8003e10 <vTaskSwitchContext+0x8c>
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	605a      	str	r2, [r3, #4]
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	4a09      	ldr	r2, [pc, #36]	@ (8003e3c <vTaskSwitchContext+0xb8>)
 8003e18:	6013      	str	r3, [r2, #0]
 8003e1a:	4a06      	ldr	r2, [pc, #24]	@ (8003e34 <vTaskSwitchContext+0xb0>)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6013      	str	r3, [r2, #0]
}
 8003e20:	bf00      	nop
 8003e22:	3714      	adds	r7, #20
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	20000cbc 	.word	0x20000cbc
 8003e30:	20000ca8 	.word	0x20000ca8
 8003e34:	20000c9c 	.word	0x20000c9c
 8003e38:	200007c4 	.word	0x200007c4
 8003e3c:	200007c0 	.word	0x200007c0

08003e40 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d10b      	bne.n	8003e68 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e54:	f383 8811 	msr	BASEPRI, r3
 8003e58:	f3bf 8f6f 	isb	sy
 8003e5c:	f3bf 8f4f 	dsb	sy
 8003e60:	60fb      	str	r3, [r7, #12]
}
 8003e62:	bf00      	nop
 8003e64:	bf00      	nop
 8003e66:	e7fd      	b.n	8003e64 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e68:	4b07      	ldr	r3, [pc, #28]	@ (8003e88 <vTaskPlaceOnEventList+0x48>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	3318      	adds	r3, #24
 8003e6e:	4619      	mov	r1, r3
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f7fe fdb2 	bl	80029da <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003e76:	2101      	movs	r1, #1
 8003e78:	6838      	ldr	r0, [r7, #0]
 8003e7a:	f000 fa81 	bl	8004380 <prvAddCurrentTaskToDelayedList>
}
 8003e7e:	bf00      	nop
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	200007c0 	.word	0x200007c0

08003e8c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10b      	bne.n	8003eb6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ea2:	f383 8811 	msr	BASEPRI, r3
 8003ea6:	f3bf 8f6f 	isb	sy
 8003eaa:	f3bf 8f4f 	dsb	sy
 8003eae:	617b      	str	r3, [r7, #20]
}
 8003eb0:	bf00      	nop
 8003eb2:	bf00      	nop
 8003eb4:	e7fd      	b.n	8003eb2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8003ee0 <vTaskPlaceOnEventListRestricted+0x54>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	3318      	adds	r3, #24
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f7fe fd67 	bl	8002992 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d002      	beq.n	8003ed0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003eca:	f04f 33ff 	mov.w	r3, #4294967295
 8003ece:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003ed0:	6879      	ldr	r1, [r7, #4]
 8003ed2:	68b8      	ldr	r0, [r7, #8]
 8003ed4:	f000 fa54 	bl	8004380 <prvAddCurrentTaskToDelayedList>
	}
 8003ed8:	bf00      	nop
 8003eda:	3718      	adds	r7, #24
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	200007c0 	.word	0x200007c0

08003ee4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10b      	bne.n	8003f12 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003efe:	f383 8811 	msr	BASEPRI, r3
 8003f02:	f3bf 8f6f 	isb	sy
 8003f06:	f3bf 8f4f 	dsb	sy
 8003f0a:	60fb      	str	r3, [r7, #12]
}
 8003f0c:	bf00      	nop
 8003f0e:	bf00      	nop
 8003f10:	e7fd      	b.n	8003f0e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	3318      	adds	r3, #24
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7fe fd98 	bl	8002a4c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f1c:	4b1d      	ldr	r3, [pc, #116]	@ (8003f94 <xTaskRemoveFromEventList+0xb0>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d11d      	bne.n	8003f60 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	3304      	adds	r3, #4
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7fe fd8f 	bl	8002a4c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f32:	4b19      	ldr	r3, [pc, #100]	@ (8003f98 <xTaskRemoveFromEventList+0xb4>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d903      	bls.n	8003f42 <xTaskRemoveFromEventList+0x5e>
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f3e:	4a16      	ldr	r2, [pc, #88]	@ (8003f98 <xTaskRemoveFromEventList+0xb4>)
 8003f40:	6013      	str	r3, [r2, #0]
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f46:	4613      	mov	r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	4413      	add	r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	4a13      	ldr	r2, [pc, #76]	@ (8003f9c <xTaskRemoveFromEventList+0xb8>)
 8003f50:	441a      	add	r2, r3
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	3304      	adds	r3, #4
 8003f56:	4619      	mov	r1, r3
 8003f58:	4610      	mov	r0, r2
 8003f5a:	f7fe fd1a 	bl	8002992 <vListInsertEnd>
 8003f5e:	e005      	b.n	8003f6c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	3318      	adds	r3, #24
 8003f64:	4619      	mov	r1, r3
 8003f66:	480e      	ldr	r0, [pc, #56]	@ (8003fa0 <xTaskRemoveFromEventList+0xbc>)
 8003f68:	f7fe fd13 	bl	8002992 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f70:	4b0c      	ldr	r3, [pc, #48]	@ (8003fa4 <xTaskRemoveFromEventList+0xc0>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d905      	bls.n	8003f86 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8003fa8 <xTaskRemoveFromEventList+0xc4>)
 8003f80:	2201      	movs	r2, #1
 8003f82:	601a      	str	r2, [r3, #0]
 8003f84:	e001      	b.n	8003f8a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003f86:	2300      	movs	r3, #0
 8003f88:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003f8a:	697b      	ldr	r3, [r7, #20]
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3718      	adds	r7, #24
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	20000cbc 	.word	0x20000cbc
 8003f98:	20000c9c 	.word	0x20000c9c
 8003f9c:	200007c4 	.word	0x200007c4
 8003fa0:	20000c54 	.word	0x20000c54
 8003fa4:	200007c0 	.word	0x200007c0
 8003fa8:	20000ca8 	.word	0x20000ca8

08003fac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003fb4:	4b06      	ldr	r3, [pc, #24]	@ (8003fd0 <vTaskInternalSetTimeOutState+0x24>)
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003fbc:	4b05      	ldr	r3, [pc, #20]	@ (8003fd4 <vTaskInternalSetTimeOutState+0x28>)
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	605a      	str	r2, [r3, #4]
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr
 8003fd0:	20000cac 	.word	0x20000cac
 8003fd4:	20000c98 	.word	0x20000c98

08003fd8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b088      	sub	sp, #32
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d10b      	bne.n	8004000 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fec:	f383 8811 	msr	BASEPRI, r3
 8003ff0:	f3bf 8f6f 	isb	sy
 8003ff4:	f3bf 8f4f 	dsb	sy
 8003ff8:	613b      	str	r3, [r7, #16]
}
 8003ffa:	bf00      	nop
 8003ffc:	bf00      	nop
 8003ffe:	e7fd      	b.n	8003ffc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10b      	bne.n	800401e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800400a:	f383 8811 	msr	BASEPRI, r3
 800400e:	f3bf 8f6f 	isb	sy
 8004012:	f3bf 8f4f 	dsb	sy
 8004016:	60fb      	str	r3, [r7, #12]
}
 8004018:	bf00      	nop
 800401a:	bf00      	nop
 800401c:	e7fd      	b.n	800401a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800401e:	f000 fe8b 	bl	8004d38 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004022:	4b1d      	ldr	r3, [pc, #116]	@ (8004098 <xTaskCheckForTimeOut+0xc0>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	69ba      	ldr	r2, [r7, #24]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800403a:	d102      	bne.n	8004042 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800403c:	2300      	movs	r3, #0
 800403e:	61fb      	str	r3, [r7, #28]
 8004040:	e023      	b.n	800408a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	4b15      	ldr	r3, [pc, #84]	@ (800409c <xTaskCheckForTimeOut+0xc4>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	429a      	cmp	r2, r3
 800404c:	d007      	beq.n	800405e <xTaskCheckForTimeOut+0x86>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	69ba      	ldr	r2, [r7, #24]
 8004054:	429a      	cmp	r2, r3
 8004056:	d302      	bcc.n	800405e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004058:	2301      	movs	r3, #1
 800405a:	61fb      	str	r3, [r7, #28]
 800405c:	e015      	b.n	800408a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	429a      	cmp	r2, r3
 8004066:	d20b      	bcs.n	8004080 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	1ad2      	subs	r2, r2, r3
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f7ff ff99 	bl	8003fac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800407a:	2300      	movs	r3, #0
 800407c:	61fb      	str	r3, [r7, #28]
 800407e:	e004      	b.n	800408a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	2200      	movs	r2, #0
 8004084:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004086:	2301      	movs	r3, #1
 8004088:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800408a:	f000 fe87 	bl	8004d9c <vPortExitCritical>

	return xReturn;
 800408e:	69fb      	ldr	r3, [r7, #28]
}
 8004090:	4618      	mov	r0, r3
 8004092:	3720      	adds	r7, #32
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	20000c98 	.word	0x20000c98
 800409c:	20000cac 	.word	0x20000cac

080040a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80040a4:	4b03      	ldr	r3, [pc, #12]	@ (80040b4 <vTaskMissedYield+0x14>)
 80040a6:	2201      	movs	r2, #1
 80040a8:	601a      	str	r2, [r3, #0]
}
 80040aa:	bf00      	nop
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	20000ca8 	.word	0x20000ca8

080040b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80040c0:	f000 f852 	bl	8004168 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80040c4:	4b06      	ldr	r3, [pc, #24]	@ (80040e0 <prvIdleTask+0x28>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d9f9      	bls.n	80040c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80040cc:	4b05      	ldr	r3, [pc, #20]	@ (80040e4 <prvIdleTask+0x2c>)
 80040ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	f3bf 8f4f 	dsb	sy
 80040d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80040dc:	e7f0      	b.n	80040c0 <prvIdleTask+0x8>
 80040de:	bf00      	nop
 80040e0:	200007c4 	.word	0x200007c4
 80040e4:	e000ed04 	.word	0xe000ed04

080040e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040ee:	2300      	movs	r3, #0
 80040f0:	607b      	str	r3, [r7, #4]
 80040f2:	e00c      	b.n	800410e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	4613      	mov	r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	4413      	add	r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4a12      	ldr	r2, [pc, #72]	@ (8004148 <prvInitialiseTaskLists+0x60>)
 8004100:	4413      	add	r3, r2
 8004102:	4618      	mov	r0, r3
 8004104:	f7fe fc18 	bl	8002938 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	3301      	adds	r3, #1
 800410c:	607b      	str	r3, [r7, #4]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2b37      	cmp	r3, #55	@ 0x37
 8004112:	d9ef      	bls.n	80040f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004114:	480d      	ldr	r0, [pc, #52]	@ (800414c <prvInitialiseTaskLists+0x64>)
 8004116:	f7fe fc0f 	bl	8002938 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800411a:	480d      	ldr	r0, [pc, #52]	@ (8004150 <prvInitialiseTaskLists+0x68>)
 800411c:	f7fe fc0c 	bl	8002938 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004120:	480c      	ldr	r0, [pc, #48]	@ (8004154 <prvInitialiseTaskLists+0x6c>)
 8004122:	f7fe fc09 	bl	8002938 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004126:	480c      	ldr	r0, [pc, #48]	@ (8004158 <prvInitialiseTaskLists+0x70>)
 8004128:	f7fe fc06 	bl	8002938 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800412c:	480b      	ldr	r0, [pc, #44]	@ (800415c <prvInitialiseTaskLists+0x74>)
 800412e:	f7fe fc03 	bl	8002938 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004132:	4b0b      	ldr	r3, [pc, #44]	@ (8004160 <prvInitialiseTaskLists+0x78>)
 8004134:	4a05      	ldr	r2, [pc, #20]	@ (800414c <prvInitialiseTaskLists+0x64>)
 8004136:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004138:	4b0a      	ldr	r3, [pc, #40]	@ (8004164 <prvInitialiseTaskLists+0x7c>)
 800413a:	4a05      	ldr	r2, [pc, #20]	@ (8004150 <prvInitialiseTaskLists+0x68>)
 800413c:	601a      	str	r2, [r3, #0]
}
 800413e:	bf00      	nop
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	200007c4 	.word	0x200007c4
 800414c:	20000c24 	.word	0x20000c24
 8004150:	20000c38 	.word	0x20000c38
 8004154:	20000c54 	.word	0x20000c54
 8004158:	20000c68 	.word	0x20000c68
 800415c:	20000c80 	.word	0x20000c80
 8004160:	20000c4c 	.word	0x20000c4c
 8004164:	20000c50 	.word	0x20000c50

08004168 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800416e:	e019      	b.n	80041a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004170:	f000 fde2 	bl	8004d38 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004174:	4b10      	ldr	r3, [pc, #64]	@ (80041b8 <prvCheckTasksWaitingTermination+0x50>)
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	3304      	adds	r3, #4
 8004180:	4618      	mov	r0, r3
 8004182:	f7fe fc63 	bl	8002a4c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004186:	4b0d      	ldr	r3, [pc, #52]	@ (80041bc <prvCheckTasksWaitingTermination+0x54>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	3b01      	subs	r3, #1
 800418c:	4a0b      	ldr	r2, [pc, #44]	@ (80041bc <prvCheckTasksWaitingTermination+0x54>)
 800418e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004190:	4b0b      	ldr	r3, [pc, #44]	@ (80041c0 <prvCheckTasksWaitingTermination+0x58>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	3b01      	subs	r3, #1
 8004196:	4a0a      	ldr	r2, [pc, #40]	@ (80041c0 <prvCheckTasksWaitingTermination+0x58>)
 8004198:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800419a:	f000 fdff 	bl	8004d9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f810 	bl	80041c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041a4:	4b06      	ldr	r3, [pc, #24]	@ (80041c0 <prvCheckTasksWaitingTermination+0x58>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1e1      	bne.n	8004170 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80041ac:	bf00      	nop
 80041ae:	bf00      	nop
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	20000c68 	.word	0x20000c68
 80041bc:	20000c94 	.word	0x20000c94
 80041c0:	20000c7c 	.word	0x20000c7c

080041c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d108      	bne.n	80041e8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 ff9c 	bl	8005118 <vPortFree>
				vPortFree( pxTCB );
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f000 ff99 	bl	8005118 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80041e6:	e019      	b.n	800421c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d103      	bne.n	80041fa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 ff90 	bl	8005118 <vPortFree>
	}
 80041f8:	e010      	b.n	800421c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004200:	2b02      	cmp	r3, #2
 8004202:	d00b      	beq.n	800421c <prvDeleteTCB+0x58>
	__asm volatile
 8004204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004208:	f383 8811 	msr	BASEPRI, r3
 800420c:	f3bf 8f6f 	isb	sy
 8004210:	f3bf 8f4f 	dsb	sy
 8004214:	60fb      	str	r3, [r7, #12]
}
 8004216:	bf00      	nop
 8004218:	bf00      	nop
 800421a:	e7fd      	b.n	8004218 <prvDeleteTCB+0x54>
	}
 800421c:	bf00      	nop
 800421e:	3710      	adds	r7, #16
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800422a:	4b0c      	ldr	r3, [pc, #48]	@ (800425c <prvResetNextTaskUnblockTime+0x38>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d104      	bne.n	800423e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004234:	4b0a      	ldr	r3, [pc, #40]	@ (8004260 <prvResetNextTaskUnblockTime+0x3c>)
 8004236:	f04f 32ff 	mov.w	r2, #4294967295
 800423a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800423c:	e008      	b.n	8004250 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800423e:	4b07      	ldr	r3, [pc, #28]	@ (800425c <prvResetNextTaskUnblockTime+0x38>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	4a04      	ldr	r2, [pc, #16]	@ (8004260 <prvResetNextTaskUnblockTime+0x3c>)
 800424e:	6013      	str	r3, [r2, #0]
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	20000c4c 	.word	0x20000c4c
 8004260:	20000cb4 	.word	0x20000cb4

08004264 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800426a:	4b0b      	ldr	r3, [pc, #44]	@ (8004298 <xTaskGetSchedulerState+0x34>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d102      	bne.n	8004278 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004272:	2301      	movs	r3, #1
 8004274:	607b      	str	r3, [r7, #4]
 8004276:	e008      	b.n	800428a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004278:	4b08      	ldr	r3, [pc, #32]	@ (800429c <xTaskGetSchedulerState+0x38>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d102      	bne.n	8004286 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004280:	2302      	movs	r3, #2
 8004282:	607b      	str	r3, [r7, #4]
 8004284:	e001      	b.n	800428a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004286:	2300      	movs	r3, #0
 8004288:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800428a:	687b      	ldr	r3, [r7, #4]
	}
 800428c:	4618      	mov	r0, r3
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr
 8004298:	20000ca0 	.word	0x20000ca0
 800429c:	20000cbc 	.word	0x20000cbc

080042a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80042ac:	2300      	movs	r3, #0
 80042ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d058      	beq.n	8004368 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80042b6:	4b2f      	ldr	r3, [pc, #188]	@ (8004374 <xTaskPriorityDisinherit+0xd4>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d00b      	beq.n	80042d8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80042c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042c4:	f383 8811 	msr	BASEPRI, r3
 80042c8:	f3bf 8f6f 	isb	sy
 80042cc:	f3bf 8f4f 	dsb	sy
 80042d0:	60fb      	str	r3, [r7, #12]
}
 80042d2:	bf00      	nop
 80042d4:	bf00      	nop
 80042d6:	e7fd      	b.n	80042d4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10b      	bne.n	80042f8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80042e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042e4:	f383 8811 	msr	BASEPRI, r3
 80042e8:	f3bf 8f6f 	isb	sy
 80042ec:	f3bf 8f4f 	dsb	sy
 80042f0:	60bb      	str	r3, [r7, #8]
}
 80042f2:	bf00      	nop
 80042f4:	bf00      	nop
 80042f6:	e7fd      	b.n	80042f4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042fc:	1e5a      	subs	r2, r3, #1
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800430a:	429a      	cmp	r2, r3
 800430c:	d02c      	beq.n	8004368 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004312:	2b00      	cmp	r3, #0
 8004314:	d128      	bne.n	8004368 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	3304      	adds	r3, #4
 800431a:	4618      	mov	r0, r3
 800431c:	f7fe fb96 	bl	8002a4c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800432c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004338:	4b0f      	ldr	r3, [pc, #60]	@ (8004378 <xTaskPriorityDisinherit+0xd8>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	429a      	cmp	r2, r3
 800433e:	d903      	bls.n	8004348 <xTaskPriorityDisinherit+0xa8>
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004344:	4a0c      	ldr	r2, [pc, #48]	@ (8004378 <xTaskPriorityDisinherit+0xd8>)
 8004346:	6013      	str	r3, [r2, #0]
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800434c:	4613      	mov	r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	4413      	add	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4a09      	ldr	r2, [pc, #36]	@ (800437c <xTaskPriorityDisinherit+0xdc>)
 8004356:	441a      	add	r2, r3
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	3304      	adds	r3, #4
 800435c:	4619      	mov	r1, r3
 800435e:	4610      	mov	r0, r2
 8004360:	f7fe fb17 	bl	8002992 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004364:	2301      	movs	r3, #1
 8004366:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004368:	697b      	ldr	r3, [r7, #20]
	}
 800436a:	4618      	mov	r0, r3
 800436c:	3718      	adds	r7, #24
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	200007c0 	.word	0x200007c0
 8004378:	20000c9c 	.word	0x20000c9c
 800437c:	200007c4 	.word	0x200007c4

08004380 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800438a:	4b21      	ldr	r3, [pc, #132]	@ (8004410 <prvAddCurrentTaskToDelayedList+0x90>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004390:	4b20      	ldr	r3, [pc, #128]	@ (8004414 <prvAddCurrentTaskToDelayedList+0x94>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	3304      	adds	r3, #4
 8004396:	4618      	mov	r0, r3
 8004398:	f7fe fb58 	bl	8002a4c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a2:	d10a      	bne.n	80043ba <prvAddCurrentTaskToDelayedList+0x3a>
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d007      	beq.n	80043ba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043aa:	4b1a      	ldr	r3, [pc, #104]	@ (8004414 <prvAddCurrentTaskToDelayedList+0x94>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	3304      	adds	r3, #4
 80043b0:	4619      	mov	r1, r3
 80043b2:	4819      	ldr	r0, [pc, #100]	@ (8004418 <prvAddCurrentTaskToDelayedList+0x98>)
 80043b4:	f7fe faed 	bl	8002992 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80043b8:	e026      	b.n	8004408 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4413      	add	r3, r2
 80043c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80043c2:	4b14      	ldr	r3, [pc, #80]	@ (8004414 <prvAddCurrentTaskToDelayedList+0x94>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68ba      	ldr	r2, [r7, #8]
 80043c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80043ca:	68ba      	ldr	r2, [r7, #8]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d209      	bcs.n	80043e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043d2:	4b12      	ldr	r3, [pc, #72]	@ (800441c <prvAddCurrentTaskToDelayedList+0x9c>)
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	4b0f      	ldr	r3, [pc, #60]	@ (8004414 <prvAddCurrentTaskToDelayedList+0x94>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	3304      	adds	r3, #4
 80043dc:	4619      	mov	r1, r3
 80043de:	4610      	mov	r0, r2
 80043e0:	f7fe fafb 	bl	80029da <vListInsert>
}
 80043e4:	e010      	b.n	8004408 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043e6:	4b0e      	ldr	r3, [pc, #56]	@ (8004420 <prvAddCurrentTaskToDelayedList+0xa0>)
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	4b0a      	ldr	r3, [pc, #40]	@ (8004414 <prvAddCurrentTaskToDelayedList+0x94>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	3304      	adds	r3, #4
 80043f0:	4619      	mov	r1, r3
 80043f2:	4610      	mov	r0, r2
 80043f4:	f7fe faf1 	bl	80029da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80043f8:	4b0a      	ldr	r3, [pc, #40]	@ (8004424 <prvAddCurrentTaskToDelayedList+0xa4>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d202      	bcs.n	8004408 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004402:	4a08      	ldr	r2, [pc, #32]	@ (8004424 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	6013      	str	r3, [r2, #0]
}
 8004408:	bf00      	nop
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	20000c98 	.word	0x20000c98
 8004414:	200007c0 	.word	0x200007c0
 8004418:	20000c80 	.word	0x20000c80
 800441c:	20000c50 	.word	0x20000c50
 8004420:	20000c4c 	.word	0x20000c4c
 8004424:	20000cb4 	.word	0x20000cb4

08004428 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b08a      	sub	sp, #40	@ 0x28
 800442c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800442e:	2300      	movs	r3, #0
 8004430:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004432:	f000 fb13 	bl	8004a5c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004436:	4b1d      	ldr	r3, [pc, #116]	@ (80044ac <xTimerCreateTimerTask+0x84>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d021      	beq.n	8004482 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800443e:	2300      	movs	r3, #0
 8004440:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004442:	2300      	movs	r3, #0
 8004444:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004446:	1d3a      	adds	r2, r7, #4
 8004448:	f107 0108 	add.w	r1, r7, #8
 800444c:	f107 030c 	add.w	r3, r7, #12
 8004450:	4618      	mov	r0, r3
 8004452:	f7fe fa57 	bl	8002904 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004456:	6879      	ldr	r1, [r7, #4]
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	9202      	str	r2, [sp, #8]
 800445e:	9301      	str	r3, [sp, #4]
 8004460:	2302      	movs	r3, #2
 8004462:	9300      	str	r3, [sp, #0]
 8004464:	2300      	movs	r3, #0
 8004466:	460a      	mov	r2, r1
 8004468:	4911      	ldr	r1, [pc, #68]	@ (80044b0 <xTimerCreateTimerTask+0x88>)
 800446a:	4812      	ldr	r0, [pc, #72]	@ (80044b4 <xTimerCreateTimerTask+0x8c>)
 800446c:	f7ff f8d0 	bl	8003610 <xTaskCreateStatic>
 8004470:	4603      	mov	r3, r0
 8004472:	4a11      	ldr	r2, [pc, #68]	@ (80044b8 <xTimerCreateTimerTask+0x90>)
 8004474:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004476:	4b10      	ldr	r3, [pc, #64]	@ (80044b8 <xTimerCreateTimerTask+0x90>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d001      	beq.n	8004482 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800447e:	2301      	movs	r3, #1
 8004480:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d10b      	bne.n	80044a0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800448c:	f383 8811 	msr	BASEPRI, r3
 8004490:	f3bf 8f6f 	isb	sy
 8004494:	f3bf 8f4f 	dsb	sy
 8004498:	613b      	str	r3, [r7, #16]
}
 800449a:	bf00      	nop
 800449c:	bf00      	nop
 800449e:	e7fd      	b.n	800449c <xTimerCreateTimerTask+0x74>
	return xReturn;
 80044a0:	697b      	ldr	r3, [r7, #20]
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3718      	adds	r7, #24
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	20000cf0 	.word	0x20000cf0
 80044b0:	08005404 	.word	0x08005404
 80044b4:	080045f5 	.word	0x080045f5
 80044b8:	20000cf4 	.word	0x20000cf4

080044bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b08a      	sub	sp, #40	@ 0x28
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
 80044c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80044ca:	2300      	movs	r3, #0
 80044cc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10b      	bne.n	80044ec <xTimerGenericCommand+0x30>
	__asm volatile
 80044d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044d8:	f383 8811 	msr	BASEPRI, r3
 80044dc:	f3bf 8f6f 	isb	sy
 80044e0:	f3bf 8f4f 	dsb	sy
 80044e4:	623b      	str	r3, [r7, #32]
}
 80044e6:	bf00      	nop
 80044e8:	bf00      	nop
 80044ea:	e7fd      	b.n	80044e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80044ec:	4b19      	ldr	r3, [pc, #100]	@ (8004554 <xTimerGenericCommand+0x98>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d02a      	beq.n	800454a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	2b05      	cmp	r3, #5
 8004504:	dc18      	bgt.n	8004538 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004506:	f7ff fead 	bl	8004264 <xTaskGetSchedulerState>
 800450a:	4603      	mov	r3, r0
 800450c:	2b02      	cmp	r3, #2
 800450e:	d109      	bne.n	8004524 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004510:	4b10      	ldr	r3, [pc, #64]	@ (8004554 <xTimerGenericCommand+0x98>)
 8004512:	6818      	ldr	r0, [r3, #0]
 8004514:	f107 0110 	add.w	r1, r7, #16
 8004518:	2300      	movs	r3, #0
 800451a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800451c:	f7fe fc06 	bl	8002d2c <xQueueGenericSend>
 8004520:	6278      	str	r0, [r7, #36]	@ 0x24
 8004522:	e012      	b.n	800454a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004524:	4b0b      	ldr	r3, [pc, #44]	@ (8004554 <xTimerGenericCommand+0x98>)
 8004526:	6818      	ldr	r0, [r3, #0]
 8004528:	f107 0110 	add.w	r1, r7, #16
 800452c:	2300      	movs	r3, #0
 800452e:	2200      	movs	r2, #0
 8004530:	f7fe fbfc 	bl	8002d2c <xQueueGenericSend>
 8004534:	6278      	str	r0, [r7, #36]	@ 0x24
 8004536:	e008      	b.n	800454a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004538:	4b06      	ldr	r3, [pc, #24]	@ (8004554 <xTimerGenericCommand+0x98>)
 800453a:	6818      	ldr	r0, [r3, #0]
 800453c:	f107 0110 	add.w	r1, r7, #16
 8004540:	2300      	movs	r3, #0
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	f7fe fcf4 	bl	8002f30 <xQueueGenericSendFromISR>
 8004548:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800454a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800454c:	4618      	mov	r0, r3
 800454e:	3728      	adds	r7, #40	@ 0x28
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	20000cf0 	.word	0x20000cf0

08004558 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b088      	sub	sp, #32
 800455c:	af02      	add	r7, sp, #8
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004562:	4b23      	ldr	r3, [pc, #140]	@ (80045f0 <prvProcessExpiredTimer+0x98>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	3304      	adds	r3, #4
 8004570:	4618      	mov	r0, r3
 8004572:	f7fe fa6b 	bl	8002a4c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b00      	cmp	r3, #0
 8004582:	d023      	beq.n	80045cc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	699a      	ldr	r2, [r3, #24]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	18d1      	adds	r1, r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	6978      	ldr	r0, [r7, #20]
 8004592:	f000 f8d5 	bl	8004740 <prvInsertTimerInActiveList>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d020      	beq.n	80045de <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800459c:	2300      	movs	r3, #0
 800459e:	9300      	str	r3, [sp, #0]
 80045a0:	2300      	movs	r3, #0
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	2100      	movs	r1, #0
 80045a6:	6978      	ldr	r0, [r7, #20]
 80045a8:	f7ff ff88 	bl	80044bc <xTimerGenericCommand>
 80045ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d114      	bne.n	80045de <prvProcessExpiredTimer+0x86>
	__asm volatile
 80045b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045b8:	f383 8811 	msr	BASEPRI, r3
 80045bc:	f3bf 8f6f 	isb	sy
 80045c0:	f3bf 8f4f 	dsb	sy
 80045c4:	60fb      	str	r3, [r7, #12]
}
 80045c6:	bf00      	nop
 80045c8:	bf00      	nop
 80045ca:	e7fd      	b.n	80045c8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80045d2:	f023 0301 	bic.w	r3, r3, #1
 80045d6:	b2da      	uxtb	r2, r3
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	6978      	ldr	r0, [r7, #20]
 80045e4:	4798      	blx	r3
}
 80045e6:	bf00      	nop
 80045e8:	3718      	adds	r7, #24
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	20000ce8 	.word	0x20000ce8

080045f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80045fc:	f107 0308 	add.w	r3, r7, #8
 8004600:	4618      	mov	r0, r3
 8004602:	f000 f859 	bl	80046b8 <prvGetNextExpireTime>
 8004606:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	4619      	mov	r1, r3
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f000 f805 	bl	800461c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004612:	f000 f8d7 	bl	80047c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004616:	bf00      	nop
 8004618:	e7f0      	b.n	80045fc <prvTimerTask+0x8>
	...

0800461c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004626:	f7ff fa37 	bl	8003a98 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800462a:	f107 0308 	add.w	r3, r7, #8
 800462e:	4618      	mov	r0, r3
 8004630:	f000 f866 	bl	8004700 <prvSampleTimeNow>
 8004634:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d130      	bne.n	800469e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d10a      	bne.n	8004658 <prvProcessTimerOrBlockTask+0x3c>
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	429a      	cmp	r2, r3
 8004648:	d806      	bhi.n	8004658 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800464a:	f7ff fa33 	bl	8003ab4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800464e:	68f9      	ldr	r1, [r7, #12]
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f7ff ff81 	bl	8004558 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004656:	e024      	b.n	80046a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d008      	beq.n	8004670 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800465e:	4b13      	ldr	r3, [pc, #76]	@ (80046ac <prvProcessTimerOrBlockTask+0x90>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d101      	bne.n	800466c <prvProcessTimerOrBlockTask+0x50>
 8004668:	2301      	movs	r3, #1
 800466a:	e000      	b.n	800466e <prvProcessTimerOrBlockTask+0x52>
 800466c:	2300      	movs	r3, #0
 800466e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004670:	4b0f      	ldr	r3, [pc, #60]	@ (80046b0 <prvProcessTimerOrBlockTask+0x94>)
 8004672:	6818      	ldr	r0, [r3, #0]
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	683a      	ldr	r2, [r7, #0]
 800467c:	4619      	mov	r1, r3
 800467e:	f7fe ff93 	bl	80035a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004682:	f7ff fa17 	bl	8003ab4 <xTaskResumeAll>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d10a      	bne.n	80046a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800468c:	4b09      	ldr	r3, [pc, #36]	@ (80046b4 <prvProcessTimerOrBlockTask+0x98>)
 800468e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004692:	601a      	str	r2, [r3, #0]
 8004694:	f3bf 8f4f 	dsb	sy
 8004698:	f3bf 8f6f 	isb	sy
}
 800469c:	e001      	b.n	80046a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800469e:	f7ff fa09 	bl	8003ab4 <xTaskResumeAll>
}
 80046a2:	bf00      	nop
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	20000cec 	.word	0x20000cec
 80046b0:	20000cf0 	.word	0x20000cf0
 80046b4:	e000ed04 	.word	0xe000ed04

080046b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80046c0:	4b0e      	ldr	r3, [pc, #56]	@ (80046fc <prvGetNextExpireTime+0x44>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d101      	bne.n	80046ce <prvGetNextExpireTime+0x16>
 80046ca:	2201      	movs	r2, #1
 80046cc:	e000      	b.n	80046d0 <prvGetNextExpireTime+0x18>
 80046ce:	2200      	movs	r2, #0
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d105      	bne.n	80046e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80046dc:	4b07      	ldr	r3, [pc, #28]	@ (80046fc <prvGetNextExpireTime+0x44>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	60fb      	str	r3, [r7, #12]
 80046e6:	e001      	b.n	80046ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80046e8:	2300      	movs	r3, #0
 80046ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80046ec:	68fb      	ldr	r3, [r7, #12]
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3714      	adds	r7, #20
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	20000ce8 	.word	0x20000ce8

08004700 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004708:	f7ff fa72 	bl	8003bf0 <xTaskGetTickCount>
 800470c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800470e:	4b0b      	ldr	r3, [pc, #44]	@ (800473c <prvSampleTimeNow+0x3c>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	429a      	cmp	r2, r3
 8004716:	d205      	bcs.n	8004724 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004718:	f000 f93a 	bl	8004990 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	601a      	str	r2, [r3, #0]
 8004722:	e002      	b.n	800472a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800472a:	4a04      	ldr	r2, [pc, #16]	@ (800473c <prvSampleTimeNow+0x3c>)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004730:	68fb      	ldr	r3, [r7, #12]
}
 8004732:	4618      	mov	r0, r3
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	20000cf8 	.word	0x20000cf8

08004740 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b086      	sub	sp, #24
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
 800474c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800474e:	2300      	movs	r3, #0
 8004750:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	68ba      	ldr	r2, [r7, #8]
 8004756:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800475e:	68ba      	ldr	r2, [r7, #8]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	429a      	cmp	r2, r3
 8004764:	d812      	bhi.n	800478c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	1ad2      	subs	r2, r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	429a      	cmp	r2, r3
 8004772:	d302      	bcc.n	800477a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004774:	2301      	movs	r3, #1
 8004776:	617b      	str	r3, [r7, #20]
 8004778:	e01b      	b.n	80047b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800477a:	4b10      	ldr	r3, [pc, #64]	@ (80047bc <prvInsertTimerInActiveList+0x7c>)
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	3304      	adds	r3, #4
 8004782:	4619      	mov	r1, r3
 8004784:	4610      	mov	r0, r2
 8004786:	f7fe f928 	bl	80029da <vListInsert>
 800478a:	e012      	b.n	80047b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	429a      	cmp	r2, r3
 8004792:	d206      	bcs.n	80047a2 <prvInsertTimerInActiveList+0x62>
 8004794:	68ba      	ldr	r2, [r7, #8]
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	429a      	cmp	r2, r3
 800479a:	d302      	bcc.n	80047a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800479c:	2301      	movs	r3, #1
 800479e:	617b      	str	r3, [r7, #20]
 80047a0:	e007      	b.n	80047b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80047a2:	4b07      	ldr	r3, [pc, #28]	@ (80047c0 <prvInsertTimerInActiveList+0x80>)
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	3304      	adds	r3, #4
 80047aa:	4619      	mov	r1, r3
 80047ac:	4610      	mov	r0, r2
 80047ae:	f7fe f914 	bl	80029da <vListInsert>
		}
	}

	return xProcessTimerNow;
 80047b2:	697b      	ldr	r3, [r7, #20]
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3718      	adds	r7, #24
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	20000cec 	.word	0x20000cec
 80047c0:	20000ce8 	.word	0x20000ce8

080047c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b08e      	sub	sp, #56	@ 0x38
 80047c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80047ca:	e0ce      	b.n	800496a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	da19      	bge.n	8004806 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80047d2:	1d3b      	adds	r3, r7, #4
 80047d4:	3304      	adds	r3, #4
 80047d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80047d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10b      	bne.n	80047f6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80047de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047e2:	f383 8811 	msr	BASEPRI, r3
 80047e6:	f3bf 8f6f 	isb	sy
 80047ea:	f3bf 8f4f 	dsb	sy
 80047ee:	61fb      	str	r3, [r7, #28]
}
 80047f0:	bf00      	nop
 80047f2:	bf00      	nop
 80047f4:	e7fd      	b.n	80047f2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80047f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047fc:	6850      	ldr	r0, [r2, #4]
 80047fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004800:	6892      	ldr	r2, [r2, #8]
 8004802:	4611      	mov	r1, r2
 8004804:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2b00      	cmp	r3, #0
 800480a:	f2c0 80ae 	blt.w	800496a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d004      	beq.n	8004824 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800481a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800481c:	3304      	adds	r3, #4
 800481e:	4618      	mov	r0, r3
 8004820:	f7fe f914 	bl	8002a4c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004824:	463b      	mov	r3, r7
 8004826:	4618      	mov	r0, r3
 8004828:	f7ff ff6a 	bl	8004700 <prvSampleTimeNow>
 800482c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b09      	cmp	r3, #9
 8004832:	f200 8097 	bhi.w	8004964 <prvProcessReceivedCommands+0x1a0>
 8004836:	a201      	add	r2, pc, #4	@ (adr r2, 800483c <prvProcessReceivedCommands+0x78>)
 8004838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800483c:	08004865 	.word	0x08004865
 8004840:	08004865 	.word	0x08004865
 8004844:	08004865 	.word	0x08004865
 8004848:	080048db 	.word	0x080048db
 800484c:	080048ef 	.word	0x080048ef
 8004850:	0800493b 	.word	0x0800493b
 8004854:	08004865 	.word	0x08004865
 8004858:	08004865 	.word	0x08004865
 800485c:	080048db 	.word	0x080048db
 8004860:	080048ef 	.word	0x080048ef
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004866:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800486a:	f043 0301 	orr.w	r3, r3, #1
 800486e:	b2da      	uxtb	r2, r3
 8004870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004872:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004876:	68ba      	ldr	r2, [r7, #8]
 8004878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800487a:	699b      	ldr	r3, [r3, #24]
 800487c:	18d1      	adds	r1, r2, r3
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004882:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004884:	f7ff ff5c 	bl	8004740 <prvInsertTimerInActiveList>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d06c      	beq.n	8004968 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800488e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004894:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004898:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800489c:	f003 0304 	and.w	r3, r3, #4
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d061      	beq.n	8004968 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	441a      	add	r2, r3
 80048ac:	2300      	movs	r3, #0
 80048ae:	9300      	str	r3, [sp, #0]
 80048b0:	2300      	movs	r3, #0
 80048b2:	2100      	movs	r1, #0
 80048b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80048b6:	f7ff fe01 	bl	80044bc <xTimerGenericCommand>
 80048ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80048bc:	6a3b      	ldr	r3, [r7, #32]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d152      	bne.n	8004968 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80048c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048c6:	f383 8811 	msr	BASEPRI, r3
 80048ca:	f3bf 8f6f 	isb	sy
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	61bb      	str	r3, [r7, #24]
}
 80048d4:	bf00      	nop
 80048d6:	bf00      	nop
 80048d8:	e7fd      	b.n	80048d6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80048da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048e0:	f023 0301 	bic.w	r3, r3, #1
 80048e4:	b2da      	uxtb	r2, r3
 80048e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048e8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80048ec:	e03d      	b.n	800496a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80048ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048f4:	f043 0301 	orr.w	r3, r3, #1
 80048f8:	b2da      	uxtb	r2, r3
 80048fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048fc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004900:	68ba      	ldr	r2, [r7, #8]
 8004902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004904:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10b      	bne.n	8004926 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800490e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004912:	f383 8811 	msr	BASEPRI, r3
 8004916:	f3bf 8f6f 	isb	sy
 800491a:	f3bf 8f4f 	dsb	sy
 800491e:	617b      	str	r3, [r7, #20]
}
 8004920:	bf00      	nop
 8004922:	bf00      	nop
 8004924:	e7fd      	b.n	8004922 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004928:	699a      	ldr	r2, [r3, #24]
 800492a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800492c:	18d1      	adds	r1, r2, r3
 800492e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004930:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004932:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004934:	f7ff ff04 	bl	8004740 <prvInsertTimerInActiveList>
					break;
 8004938:	e017      	b.n	800496a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800493a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800493c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004940:	f003 0302 	and.w	r3, r3, #2
 8004944:	2b00      	cmp	r3, #0
 8004946:	d103      	bne.n	8004950 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004948:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800494a:	f000 fbe5 	bl	8005118 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800494e:	e00c      	b.n	800496a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004952:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004956:	f023 0301 	bic.w	r3, r3, #1
 800495a:	b2da      	uxtb	r2, r3
 800495c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800495e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004962:	e002      	b.n	800496a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004964:	bf00      	nop
 8004966:	e000      	b.n	800496a <prvProcessReceivedCommands+0x1a6>
					break;
 8004968:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800496a:	4b08      	ldr	r3, [pc, #32]	@ (800498c <prvProcessReceivedCommands+0x1c8>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	1d39      	adds	r1, r7, #4
 8004970:	2200      	movs	r2, #0
 8004972:	4618      	mov	r0, r3
 8004974:	f7fe fb7a 	bl	800306c <xQueueReceive>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	f47f af26 	bne.w	80047cc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004980:	bf00      	nop
 8004982:	bf00      	nop
 8004984:	3730      	adds	r7, #48	@ 0x30
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	20000cf0 	.word	0x20000cf0

08004990 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b088      	sub	sp, #32
 8004994:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004996:	e049      	b.n	8004a2c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004998:	4b2e      	ldr	r3, [pc, #184]	@ (8004a54 <prvSwitchTimerLists+0xc4>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049a2:	4b2c      	ldr	r3, [pc, #176]	@ (8004a54 <prvSwitchTimerLists+0xc4>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	3304      	adds	r3, #4
 80049b0:	4618      	mov	r0, r3
 80049b2:	f7fe f84b 	bl	8002a4c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	68f8      	ldr	r0, [r7, #12]
 80049bc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80049c4:	f003 0304 	and.w	r3, r3, #4
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d02f      	beq.n	8004a2c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	699b      	ldr	r3, [r3, #24]
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	4413      	add	r3, r2
 80049d4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80049d6:	68ba      	ldr	r2, [r7, #8]
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d90e      	bls.n	80049fc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	68ba      	ldr	r2, [r7, #8]
 80049e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80049ea:	4b1a      	ldr	r3, [pc, #104]	@ (8004a54 <prvSwitchTimerLists+0xc4>)
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	3304      	adds	r3, #4
 80049f2:	4619      	mov	r1, r3
 80049f4:	4610      	mov	r0, r2
 80049f6:	f7fd fff0 	bl	80029da <vListInsert>
 80049fa:	e017      	b.n	8004a2c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80049fc:	2300      	movs	r3, #0
 80049fe:	9300      	str	r3, [sp, #0]
 8004a00:	2300      	movs	r3, #0
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	2100      	movs	r1, #0
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f7ff fd58 	bl	80044bc <xTimerGenericCommand>
 8004a0c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d10b      	bne.n	8004a2c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a18:	f383 8811 	msr	BASEPRI, r3
 8004a1c:	f3bf 8f6f 	isb	sy
 8004a20:	f3bf 8f4f 	dsb	sy
 8004a24:	603b      	str	r3, [r7, #0]
}
 8004a26:	bf00      	nop
 8004a28:	bf00      	nop
 8004a2a:	e7fd      	b.n	8004a28 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a2c:	4b09      	ldr	r3, [pc, #36]	@ (8004a54 <prvSwitchTimerLists+0xc4>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1b0      	bne.n	8004998 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004a36:	4b07      	ldr	r3, [pc, #28]	@ (8004a54 <prvSwitchTimerLists+0xc4>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004a3c:	4b06      	ldr	r3, [pc, #24]	@ (8004a58 <prvSwitchTimerLists+0xc8>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a04      	ldr	r2, [pc, #16]	@ (8004a54 <prvSwitchTimerLists+0xc4>)
 8004a42:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004a44:	4a04      	ldr	r2, [pc, #16]	@ (8004a58 <prvSwitchTimerLists+0xc8>)
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	6013      	str	r3, [r2, #0]
}
 8004a4a:	bf00      	nop
 8004a4c:	3718      	adds	r7, #24
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	20000ce8 	.word	0x20000ce8
 8004a58:	20000cec 	.word	0x20000cec

08004a5c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004a62:	f000 f969 	bl	8004d38 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004a66:	4b15      	ldr	r3, [pc, #84]	@ (8004abc <prvCheckForValidListAndQueue+0x60>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d120      	bne.n	8004ab0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004a6e:	4814      	ldr	r0, [pc, #80]	@ (8004ac0 <prvCheckForValidListAndQueue+0x64>)
 8004a70:	f7fd ff62 	bl	8002938 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004a74:	4813      	ldr	r0, [pc, #76]	@ (8004ac4 <prvCheckForValidListAndQueue+0x68>)
 8004a76:	f7fd ff5f 	bl	8002938 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004a7a:	4b13      	ldr	r3, [pc, #76]	@ (8004ac8 <prvCheckForValidListAndQueue+0x6c>)
 8004a7c:	4a10      	ldr	r2, [pc, #64]	@ (8004ac0 <prvCheckForValidListAndQueue+0x64>)
 8004a7e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004a80:	4b12      	ldr	r3, [pc, #72]	@ (8004acc <prvCheckForValidListAndQueue+0x70>)
 8004a82:	4a10      	ldr	r2, [pc, #64]	@ (8004ac4 <prvCheckForValidListAndQueue+0x68>)
 8004a84:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004a86:	2300      	movs	r3, #0
 8004a88:	9300      	str	r3, [sp, #0]
 8004a8a:	4b11      	ldr	r3, [pc, #68]	@ (8004ad0 <prvCheckForValidListAndQueue+0x74>)
 8004a8c:	4a11      	ldr	r2, [pc, #68]	@ (8004ad4 <prvCheckForValidListAndQueue+0x78>)
 8004a8e:	2110      	movs	r1, #16
 8004a90:	200a      	movs	r0, #10
 8004a92:	f7fe f86f 	bl	8002b74 <xQueueGenericCreateStatic>
 8004a96:	4603      	mov	r3, r0
 8004a98:	4a08      	ldr	r2, [pc, #32]	@ (8004abc <prvCheckForValidListAndQueue+0x60>)
 8004a9a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004a9c:	4b07      	ldr	r3, [pc, #28]	@ (8004abc <prvCheckForValidListAndQueue+0x60>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d005      	beq.n	8004ab0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004aa4:	4b05      	ldr	r3, [pc, #20]	@ (8004abc <prvCheckForValidListAndQueue+0x60>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	490b      	ldr	r1, [pc, #44]	@ (8004ad8 <prvCheckForValidListAndQueue+0x7c>)
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7fe fd52 	bl	8003554 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ab0:	f000 f974 	bl	8004d9c <vPortExitCritical>
}
 8004ab4:	bf00      	nop
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	20000cf0 	.word	0x20000cf0
 8004ac0:	20000cc0 	.word	0x20000cc0
 8004ac4:	20000cd4 	.word	0x20000cd4
 8004ac8:	20000ce8 	.word	0x20000ce8
 8004acc:	20000cec 	.word	0x20000cec
 8004ad0:	20000d9c 	.word	0x20000d9c
 8004ad4:	20000cfc 	.word	0x20000cfc
 8004ad8:	0800540c 	.word	0x0800540c

08004adc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004adc:	b480      	push	{r7}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	3b04      	subs	r3, #4
 8004aec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004af4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	3b04      	subs	r3, #4
 8004afa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	f023 0201 	bic.w	r2, r3, #1
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	3b04      	subs	r3, #4
 8004b0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004b0c:	4a0c      	ldr	r2, [pc, #48]	@ (8004b40 <pxPortInitialiseStack+0x64>)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	3b14      	subs	r3, #20
 8004b16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	3b04      	subs	r3, #4
 8004b22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f06f 0202 	mvn.w	r2, #2
 8004b2a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	3b20      	subs	r3, #32
 8004b30:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004b32:	68fb      	ldr	r3, [r7, #12]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3714      	adds	r7, #20
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr
 8004b40:	08004b45 	.word	0x08004b45

08004b44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004b4e:	4b13      	ldr	r3, [pc, #76]	@ (8004b9c <prvTaskExitError+0x58>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b56:	d00b      	beq.n	8004b70 <prvTaskExitError+0x2c>
	__asm volatile
 8004b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b5c:	f383 8811 	msr	BASEPRI, r3
 8004b60:	f3bf 8f6f 	isb	sy
 8004b64:	f3bf 8f4f 	dsb	sy
 8004b68:	60fb      	str	r3, [r7, #12]
}
 8004b6a:	bf00      	nop
 8004b6c:	bf00      	nop
 8004b6e:	e7fd      	b.n	8004b6c <prvTaskExitError+0x28>
	__asm volatile
 8004b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b74:	f383 8811 	msr	BASEPRI, r3
 8004b78:	f3bf 8f6f 	isb	sy
 8004b7c:	f3bf 8f4f 	dsb	sy
 8004b80:	60bb      	str	r3, [r7, #8]
}
 8004b82:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004b84:	bf00      	nop
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d0fc      	beq.n	8004b86 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004b8c:	bf00      	nop
 8004b8e:	bf00      	nop
 8004b90:	3714      	adds	r7, #20
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	20000008 	.word	0x20000008

08004ba0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ba0:	4b07      	ldr	r3, [pc, #28]	@ (8004bc0 <pxCurrentTCBConst2>)
 8004ba2:	6819      	ldr	r1, [r3, #0]
 8004ba4:	6808      	ldr	r0, [r1, #0]
 8004ba6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004baa:	f380 8809 	msr	PSP, r0
 8004bae:	f3bf 8f6f 	isb	sy
 8004bb2:	f04f 0000 	mov.w	r0, #0
 8004bb6:	f380 8811 	msr	BASEPRI, r0
 8004bba:	4770      	bx	lr
 8004bbc:	f3af 8000 	nop.w

08004bc0 <pxCurrentTCBConst2>:
 8004bc0:	200007c0 	.word	0x200007c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004bc4:	bf00      	nop
 8004bc6:	bf00      	nop

08004bc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004bc8:	4808      	ldr	r0, [pc, #32]	@ (8004bec <prvPortStartFirstTask+0x24>)
 8004bca:	6800      	ldr	r0, [r0, #0]
 8004bcc:	6800      	ldr	r0, [r0, #0]
 8004bce:	f380 8808 	msr	MSP, r0
 8004bd2:	f04f 0000 	mov.w	r0, #0
 8004bd6:	f380 8814 	msr	CONTROL, r0
 8004bda:	b662      	cpsie	i
 8004bdc:	b661      	cpsie	f
 8004bde:	f3bf 8f4f 	dsb	sy
 8004be2:	f3bf 8f6f 	isb	sy
 8004be6:	df00      	svc	0
 8004be8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004bea:	bf00      	nop
 8004bec:	e000ed08 	.word	0xe000ed08

08004bf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004bf6:	4b47      	ldr	r3, [pc, #284]	@ (8004d14 <xPortStartScheduler+0x124>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a47      	ldr	r2, [pc, #284]	@ (8004d18 <xPortStartScheduler+0x128>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d10b      	bne.n	8004c18 <xPortStartScheduler+0x28>
	__asm volatile
 8004c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c04:	f383 8811 	msr	BASEPRI, r3
 8004c08:	f3bf 8f6f 	isb	sy
 8004c0c:	f3bf 8f4f 	dsb	sy
 8004c10:	613b      	str	r3, [r7, #16]
}
 8004c12:	bf00      	nop
 8004c14:	bf00      	nop
 8004c16:	e7fd      	b.n	8004c14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004c18:	4b3e      	ldr	r3, [pc, #248]	@ (8004d14 <xPortStartScheduler+0x124>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a3f      	ldr	r2, [pc, #252]	@ (8004d1c <xPortStartScheduler+0x12c>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d10b      	bne.n	8004c3a <xPortStartScheduler+0x4a>
	__asm volatile
 8004c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c26:	f383 8811 	msr	BASEPRI, r3
 8004c2a:	f3bf 8f6f 	isb	sy
 8004c2e:	f3bf 8f4f 	dsb	sy
 8004c32:	60fb      	str	r3, [r7, #12]
}
 8004c34:	bf00      	nop
 8004c36:	bf00      	nop
 8004c38:	e7fd      	b.n	8004c36 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c3a:	4b39      	ldr	r3, [pc, #228]	@ (8004d20 <xPortStartScheduler+0x130>)
 8004c3c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	22ff      	movs	r2, #255	@ 0xff
 8004c4a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c54:	78fb      	ldrb	r3, [r7, #3]
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004c5c:	b2da      	uxtb	r2, r3
 8004c5e:	4b31      	ldr	r3, [pc, #196]	@ (8004d24 <xPortStartScheduler+0x134>)
 8004c60:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004c62:	4b31      	ldr	r3, [pc, #196]	@ (8004d28 <xPortStartScheduler+0x138>)
 8004c64:	2207      	movs	r2, #7
 8004c66:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c68:	e009      	b.n	8004c7e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004c6a:	4b2f      	ldr	r3, [pc, #188]	@ (8004d28 <xPortStartScheduler+0x138>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	4a2d      	ldr	r2, [pc, #180]	@ (8004d28 <xPortStartScheduler+0x138>)
 8004c72:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004c74:	78fb      	ldrb	r3, [r7, #3]
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	005b      	lsls	r3, r3, #1
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c7e:	78fb      	ldrb	r3, [r7, #3]
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c86:	2b80      	cmp	r3, #128	@ 0x80
 8004c88:	d0ef      	beq.n	8004c6a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004c8a:	4b27      	ldr	r3, [pc, #156]	@ (8004d28 <xPortStartScheduler+0x138>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f1c3 0307 	rsb	r3, r3, #7
 8004c92:	2b04      	cmp	r3, #4
 8004c94:	d00b      	beq.n	8004cae <xPortStartScheduler+0xbe>
	__asm volatile
 8004c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c9a:	f383 8811 	msr	BASEPRI, r3
 8004c9e:	f3bf 8f6f 	isb	sy
 8004ca2:	f3bf 8f4f 	dsb	sy
 8004ca6:	60bb      	str	r3, [r7, #8]
}
 8004ca8:	bf00      	nop
 8004caa:	bf00      	nop
 8004cac:	e7fd      	b.n	8004caa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004cae:	4b1e      	ldr	r3, [pc, #120]	@ (8004d28 <xPortStartScheduler+0x138>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	021b      	lsls	r3, r3, #8
 8004cb4:	4a1c      	ldr	r2, [pc, #112]	@ (8004d28 <xPortStartScheduler+0x138>)
 8004cb6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8004d28 <xPortStartScheduler+0x138>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004cc0:	4a19      	ldr	r2, [pc, #100]	@ (8004d28 <xPortStartScheduler+0x138>)
 8004cc2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	b2da      	uxtb	r2, r3
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004ccc:	4b17      	ldr	r3, [pc, #92]	@ (8004d2c <xPortStartScheduler+0x13c>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a16      	ldr	r2, [pc, #88]	@ (8004d2c <xPortStartScheduler+0x13c>)
 8004cd2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004cd6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004cd8:	4b14      	ldr	r3, [pc, #80]	@ (8004d2c <xPortStartScheduler+0x13c>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a13      	ldr	r2, [pc, #76]	@ (8004d2c <xPortStartScheduler+0x13c>)
 8004cde:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004ce2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004ce4:	f000 f8da 	bl	8004e9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004ce8:	4b11      	ldr	r3, [pc, #68]	@ (8004d30 <xPortStartScheduler+0x140>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004cee:	f000 f8f9 	bl	8004ee4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004cf2:	4b10      	ldr	r3, [pc, #64]	@ (8004d34 <xPortStartScheduler+0x144>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a0f      	ldr	r2, [pc, #60]	@ (8004d34 <xPortStartScheduler+0x144>)
 8004cf8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004cfc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004cfe:	f7ff ff63 	bl	8004bc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004d02:	f7ff f83f 	bl	8003d84 <vTaskSwitchContext>
	prvTaskExitError();
 8004d06:	f7ff ff1d 	bl	8004b44 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3718      	adds	r7, #24
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	e000ed00 	.word	0xe000ed00
 8004d18:	410fc271 	.word	0x410fc271
 8004d1c:	410fc270 	.word	0x410fc270
 8004d20:	e000e400 	.word	0xe000e400
 8004d24:	20000dec 	.word	0x20000dec
 8004d28:	20000df0 	.word	0x20000df0
 8004d2c:	e000ed20 	.word	0xe000ed20
 8004d30:	20000008 	.word	0x20000008
 8004d34:	e000ef34 	.word	0xe000ef34

08004d38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
	__asm volatile
 8004d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d42:	f383 8811 	msr	BASEPRI, r3
 8004d46:	f3bf 8f6f 	isb	sy
 8004d4a:	f3bf 8f4f 	dsb	sy
 8004d4e:	607b      	str	r3, [r7, #4]
}
 8004d50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004d52:	4b10      	ldr	r3, [pc, #64]	@ (8004d94 <vPortEnterCritical+0x5c>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	3301      	adds	r3, #1
 8004d58:	4a0e      	ldr	r2, [pc, #56]	@ (8004d94 <vPortEnterCritical+0x5c>)
 8004d5a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8004d94 <vPortEnterCritical+0x5c>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d110      	bne.n	8004d86 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004d64:	4b0c      	ldr	r3, [pc, #48]	@ (8004d98 <vPortEnterCritical+0x60>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00b      	beq.n	8004d86 <vPortEnterCritical+0x4e>
	__asm volatile
 8004d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d72:	f383 8811 	msr	BASEPRI, r3
 8004d76:	f3bf 8f6f 	isb	sy
 8004d7a:	f3bf 8f4f 	dsb	sy
 8004d7e:	603b      	str	r3, [r7, #0]
}
 8004d80:	bf00      	nop
 8004d82:	bf00      	nop
 8004d84:	e7fd      	b.n	8004d82 <vPortEnterCritical+0x4a>
	}
}
 8004d86:	bf00      	nop
 8004d88:	370c      	adds	r7, #12
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	20000008 	.word	0x20000008
 8004d98:	e000ed04 	.word	0xe000ed04

08004d9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004da2:	4b12      	ldr	r3, [pc, #72]	@ (8004dec <vPortExitCritical+0x50>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10b      	bne.n	8004dc2 <vPortExitCritical+0x26>
	__asm volatile
 8004daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dae:	f383 8811 	msr	BASEPRI, r3
 8004db2:	f3bf 8f6f 	isb	sy
 8004db6:	f3bf 8f4f 	dsb	sy
 8004dba:	607b      	str	r3, [r7, #4]
}
 8004dbc:	bf00      	nop
 8004dbe:	bf00      	nop
 8004dc0:	e7fd      	b.n	8004dbe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8004dec <vPortExitCritical+0x50>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	4a08      	ldr	r2, [pc, #32]	@ (8004dec <vPortExitCritical+0x50>)
 8004dca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004dcc:	4b07      	ldr	r3, [pc, #28]	@ (8004dec <vPortExitCritical+0x50>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d105      	bne.n	8004de0 <vPortExitCritical+0x44>
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	f383 8811 	msr	BASEPRI, r3
}
 8004dde:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr
 8004dec:	20000008 	.word	0x20000008

08004df0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004df0:	f3ef 8009 	mrs	r0, PSP
 8004df4:	f3bf 8f6f 	isb	sy
 8004df8:	4b15      	ldr	r3, [pc, #84]	@ (8004e50 <pxCurrentTCBConst>)
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	f01e 0f10 	tst.w	lr, #16
 8004e00:	bf08      	it	eq
 8004e02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004e06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e0a:	6010      	str	r0, [r2, #0]
 8004e0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004e10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004e14:	f380 8811 	msr	BASEPRI, r0
 8004e18:	f3bf 8f4f 	dsb	sy
 8004e1c:	f3bf 8f6f 	isb	sy
 8004e20:	f7fe ffb0 	bl	8003d84 <vTaskSwitchContext>
 8004e24:	f04f 0000 	mov.w	r0, #0
 8004e28:	f380 8811 	msr	BASEPRI, r0
 8004e2c:	bc09      	pop	{r0, r3}
 8004e2e:	6819      	ldr	r1, [r3, #0]
 8004e30:	6808      	ldr	r0, [r1, #0]
 8004e32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e36:	f01e 0f10 	tst.w	lr, #16
 8004e3a:	bf08      	it	eq
 8004e3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004e40:	f380 8809 	msr	PSP, r0
 8004e44:	f3bf 8f6f 	isb	sy
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	f3af 8000 	nop.w

08004e50 <pxCurrentTCBConst>:
 8004e50:	200007c0 	.word	0x200007c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004e54:	bf00      	nop
 8004e56:	bf00      	nop

08004e58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
	__asm volatile
 8004e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e62:	f383 8811 	msr	BASEPRI, r3
 8004e66:	f3bf 8f6f 	isb	sy
 8004e6a:	f3bf 8f4f 	dsb	sy
 8004e6e:	607b      	str	r3, [r7, #4]
}
 8004e70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004e72:	f7fe fecd 	bl	8003c10 <xTaskIncrementTick>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d003      	beq.n	8004e84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e7c:	4b06      	ldr	r3, [pc, #24]	@ (8004e98 <xPortSysTickHandler+0x40>)
 8004e7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e82:	601a      	str	r2, [r3, #0]
 8004e84:	2300      	movs	r3, #0
 8004e86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	f383 8811 	msr	BASEPRI, r3
}
 8004e8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004e90:	bf00      	nop
 8004e92:	3708      	adds	r7, #8
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	e000ed04 	.word	0xe000ed04

08004e9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ed0 <vPortSetupTimerInterrupt+0x34>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8004ed4 <vPortSetupTimerInterrupt+0x38>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004eac:	4b0a      	ldr	r3, [pc, #40]	@ (8004ed8 <vPortSetupTimerInterrupt+0x3c>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a0a      	ldr	r2, [pc, #40]	@ (8004edc <vPortSetupTimerInterrupt+0x40>)
 8004eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb6:	099b      	lsrs	r3, r3, #6
 8004eb8:	4a09      	ldr	r2, [pc, #36]	@ (8004ee0 <vPortSetupTimerInterrupt+0x44>)
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004ebe:	4b04      	ldr	r3, [pc, #16]	@ (8004ed0 <vPortSetupTimerInterrupt+0x34>)
 8004ec0:	2207      	movs	r2, #7
 8004ec2:	601a      	str	r2, [r3, #0]
}
 8004ec4:	bf00      	nop
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	e000e010 	.word	0xe000e010
 8004ed4:	e000e018 	.word	0xe000e018
 8004ed8:	20000000 	.word	0x20000000
 8004edc:	10624dd3 	.word	0x10624dd3
 8004ee0:	e000e014 	.word	0xe000e014

08004ee4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004ee4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004ef4 <vPortEnableVFP+0x10>
 8004ee8:	6801      	ldr	r1, [r0, #0]
 8004eea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004eee:	6001      	str	r1, [r0, #0]
 8004ef0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004ef2:	bf00      	nop
 8004ef4:	e000ed88 	.word	0xe000ed88

08004ef8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004efe:	f3ef 8305 	mrs	r3, IPSR
 8004f02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2b0f      	cmp	r3, #15
 8004f08:	d915      	bls.n	8004f36 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004f0a:	4a18      	ldr	r2, [pc, #96]	@ (8004f6c <vPortValidateInterruptPriority+0x74>)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	4413      	add	r3, r2
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004f14:	4b16      	ldr	r3, [pc, #88]	@ (8004f70 <vPortValidateInterruptPriority+0x78>)
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	7afa      	ldrb	r2, [r7, #11]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d20b      	bcs.n	8004f36 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f22:	f383 8811 	msr	BASEPRI, r3
 8004f26:	f3bf 8f6f 	isb	sy
 8004f2a:	f3bf 8f4f 	dsb	sy
 8004f2e:	607b      	str	r3, [r7, #4]
}
 8004f30:	bf00      	nop
 8004f32:	bf00      	nop
 8004f34:	e7fd      	b.n	8004f32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004f36:	4b0f      	ldr	r3, [pc, #60]	@ (8004f74 <vPortValidateInterruptPriority+0x7c>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004f3e:	4b0e      	ldr	r3, [pc, #56]	@ (8004f78 <vPortValidateInterruptPriority+0x80>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d90b      	bls.n	8004f5e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f4a:	f383 8811 	msr	BASEPRI, r3
 8004f4e:	f3bf 8f6f 	isb	sy
 8004f52:	f3bf 8f4f 	dsb	sy
 8004f56:	603b      	str	r3, [r7, #0]
}
 8004f58:	bf00      	nop
 8004f5a:	bf00      	nop
 8004f5c:	e7fd      	b.n	8004f5a <vPortValidateInterruptPriority+0x62>
	}
 8004f5e:	bf00      	nop
 8004f60:	3714      	adds	r7, #20
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	e000e3f0 	.word	0xe000e3f0
 8004f70:	20000dec 	.word	0x20000dec
 8004f74:	e000ed0c 	.word	0xe000ed0c
 8004f78:	20000df0 	.word	0x20000df0

08004f7c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b08a      	sub	sp, #40	@ 0x28
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004f84:	2300      	movs	r3, #0
 8004f86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004f88:	f7fe fd86 	bl	8003a98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004f8c:	4b5c      	ldr	r3, [pc, #368]	@ (8005100 <pvPortMalloc+0x184>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d101      	bne.n	8004f98 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004f94:	f000 f924 	bl	80051e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f98:	4b5a      	ldr	r3, [pc, #360]	@ (8005104 <pvPortMalloc+0x188>)
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f040 8095 	bne.w	80050d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d01e      	beq.n	8004fea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004fac:	2208      	movs	r2, #8
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f003 0307 	and.w	r3, r3, #7
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d015      	beq.n	8004fea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f023 0307 	bic.w	r3, r3, #7
 8004fc4:	3308      	adds	r3, #8
 8004fc6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f003 0307 	and.w	r3, r3, #7
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00b      	beq.n	8004fea <pvPortMalloc+0x6e>
	__asm volatile
 8004fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fd6:	f383 8811 	msr	BASEPRI, r3
 8004fda:	f3bf 8f6f 	isb	sy
 8004fde:	f3bf 8f4f 	dsb	sy
 8004fe2:	617b      	str	r3, [r7, #20]
}
 8004fe4:	bf00      	nop
 8004fe6:	bf00      	nop
 8004fe8:	e7fd      	b.n	8004fe6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d06f      	beq.n	80050d0 <pvPortMalloc+0x154>
 8004ff0:	4b45      	ldr	r3, [pc, #276]	@ (8005108 <pvPortMalloc+0x18c>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d86a      	bhi.n	80050d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004ffa:	4b44      	ldr	r3, [pc, #272]	@ (800510c <pvPortMalloc+0x190>)
 8004ffc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004ffe:	4b43      	ldr	r3, [pc, #268]	@ (800510c <pvPortMalloc+0x190>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005004:	e004      	b.n	8005010 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005008:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800500a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	429a      	cmp	r2, r3
 8005018:	d903      	bls.n	8005022 <pvPortMalloc+0xa6>
 800501a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1f1      	bne.n	8005006 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005022:	4b37      	ldr	r3, [pc, #220]	@ (8005100 <pvPortMalloc+0x184>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005028:	429a      	cmp	r2, r3
 800502a:	d051      	beq.n	80050d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800502c:	6a3b      	ldr	r3, [r7, #32]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2208      	movs	r2, #8
 8005032:	4413      	add	r3, r2
 8005034:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	6a3b      	ldr	r3, [r7, #32]
 800503c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800503e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005040:	685a      	ldr	r2, [r3, #4]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	1ad2      	subs	r2, r2, r3
 8005046:	2308      	movs	r3, #8
 8005048:	005b      	lsls	r3, r3, #1
 800504a:	429a      	cmp	r2, r3
 800504c:	d920      	bls.n	8005090 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800504e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4413      	add	r3, r2
 8005054:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	f003 0307 	and.w	r3, r3, #7
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00b      	beq.n	8005078 <pvPortMalloc+0xfc>
	__asm volatile
 8005060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005064:	f383 8811 	msr	BASEPRI, r3
 8005068:	f3bf 8f6f 	isb	sy
 800506c:	f3bf 8f4f 	dsb	sy
 8005070:	613b      	str	r3, [r7, #16]
}
 8005072:	bf00      	nop
 8005074:	bf00      	nop
 8005076:	e7fd      	b.n	8005074 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507a:	685a      	ldr	r2, [r3, #4]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	1ad2      	subs	r2, r2, r3
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800508a:	69b8      	ldr	r0, [r7, #24]
 800508c:	f000 f90a 	bl	80052a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005090:	4b1d      	ldr	r3, [pc, #116]	@ (8005108 <pvPortMalloc+0x18c>)
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	4a1b      	ldr	r2, [pc, #108]	@ (8005108 <pvPortMalloc+0x18c>)
 800509c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800509e:	4b1a      	ldr	r3, [pc, #104]	@ (8005108 <pvPortMalloc+0x18c>)
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	4b1b      	ldr	r3, [pc, #108]	@ (8005110 <pvPortMalloc+0x194>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d203      	bcs.n	80050b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80050aa:	4b17      	ldr	r3, [pc, #92]	@ (8005108 <pvPortMalloc+0x18c>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a18      	ldr	r2, [pc, #96]	@ (8005110 <pvPortMalloc+0x194>)
 80050b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80050b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b4:	685a      	ldr	r2, [r3, #4]
 80050b6:	4b13      	ldr	r3, [pc, #76]	@ (8005104 <pvPortMalloc+0x188>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	431a      	orrs	r2, r3
 80050bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80050c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c2:	2200      	movs	r2, #0
 80050c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80050c6:	4b13      	ldr	r3, [pc, #76]	@ (8005114 <pvPortMalloc+0x198>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	3301      	adds	r3, #1
 80050cc:	4a11      	ldr	r2, [pc, #68]	@ (8005114 <pvPortMalloc+0x198>)
 80050ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80050d0:	f7fe fcf0 	bl	8003ab4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	f003 0307 	and.w	r3, r3, #7
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00b      	beq.n	80050f6 <pvPortMalloc+0x17a>
	__asm volatile
 80050de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e2:	f383 8811 	msr	BASEPRI, r3
 80050e6:	f3bf 8f6f 	isb	sy
 80050ea:	f3bf 8f4f 	dsb	sy
 80050ee:	60fb      	str	r3, [r7, #12]
}
 80050f0:	bf00      	nop
 80050f2:	bf00      	nop
 80050f4:	e7fd      	b.n	80050f2 <pvPortMalloc+0x176>
	return pvReturn;
 80050f6:	69fb      	ldr	r3, [r7, #28]
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3728      	adds	r7, #40	@ 0x28
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	200049fc 	.word	0x200049fc
 8005104:	20004a10 	.word	0x20004a10
 8005108:	20004a00 	.word	0x20004a00
 800510c:	200049f4 	.word	0x200049f4
 8005110:	20004a04 	.word	0x20004a04
 8005114:	20004a08 	.word	0x20004a08

08005118 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b086      	sub	sp, #24
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d04f      	beq.n	80051ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800512a:	2308      	movs	r3, #8
 800512c:	425b      	negs	r3, r3
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	4413      	add	r3, r2
 8005132:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	685a      	ldr	r2, [r3, #4]
 800513c:	4b25      	ldr	r3, [pc, #148]	@ (80051d4 <vPortFree+0xbc>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4013      	ands	r3, r2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d10b      	bne.n	800515e <vPortFree+0x46>
	__asm volatile
 8005146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800514a:	f383 8811 	msr	BASEPRI, r3
 800514e:	f3bf 8f6f 	isb	sy
 8005152:	f3bf 8f4f 	dsb	sy
 8005156:	60fb      	str	r3, [r7, #12]
}
 8005158:	bf00      	nop
 800515a:	bf00      	nop
 800515c:	e7fd      	b.n	800515a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00b      	beq.n	800517e <vPortFree+0x66>
	__asm volatile
 8005166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800516a:	f383 8811 	msr	BASEPRI, r3
 800516e:	f3bf 8f6f 	isb	sy
 8005172:	f3bf 8f4f 	dsb	sy
 8005176:	60bb      	str	r3, [r7, #8]
}
 8005178:	bf00      	nop
 800517a:	bf00      	nop
 800517c:	e7fd      	b.n	800517a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	685a      	ldr	r2, [r3, #4]
 8005182:	4b14      	ldr	r3, [pc, #80]	@ (80051d4 <vPortFree+0xbc>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4013      	ands	r3, r2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d01e      	beq.n	80051ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d11a      	bne.n	80051ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	685a      	ldr	r2, [r3, #4]
 8005198:	4b0e      	ldr	r3, [pc, #56]	@ (80051d4 <vPortFree+0xbc>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	43db      	mvns	r3, r3
 800519e:	401a      	ands	r2, r3
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80051a4:	f7fe fc78 	bl	8003a98 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	4b0a      	ldr	r3, [pc, #40]	@ (80051d8 <vPortFree+0xc0>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4413      	add	r3, r2
 80051b2:	4a09      	ldr	r2, [pc, #36]	@ (80051d8 <vPortFree+0xc0>)
 80051b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80051b6:	6938      	ldr	r0, [r7, #16]
 80051b8:	f000 f874 	bl	80052a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80051bc:	4b07      	ldr	r3, [pc, #28]	@ (80051dc <vPortFree+0xc4>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	3301      	adds	r3, #1
 80051c2:	4a06      	ldr	r2, [pc, #24]	@ (80051dc <vPortFree+0xc4>)
 80051c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80051c6:	f7fe fc75 	bl	8003ab4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80051ca:	bf00      	nop
 80051cc:	3718      	adds	r7, #24
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	20004a10 	.word	0x20004a10
 80051d8:	20004a00 	.word	0x20004a00
 80051dc:	20004a0c 	.word	0x20004a0c

080051e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80051e6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80051ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80051ec:	4b27      	ldr	r3, [pc, #156]	@ (800528c <prvHeapInit+0xac>)
 80051ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f003 0307 	and.w	r3, r3, #7
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00c      	beq.n	8005214 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	3307      	adds	r3, #7
 80051fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f023 0307 	bic.w	r3, r3, #7
 8005206:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	4a1f      	ldr	r2, [pc, #124]	@ (800528c <prvHeapInit+0xac>)
 8005210:	4413      	add	r3, r2
 8005212:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005218:	4a1d      	ldr	r2, [pc, #116]	@ (8005290 <prvHeapInit+0xb0>)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800521e:	4b1c      	ldr	r3, [pc, #112]	@ (8005290 <prvHeapInit+0xb0>)
 8005220:	2200      	movs	r2, #0
 8005222:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	68ba      	ldr	r2, [r7, #8]
 8005228:	4413      	add	r3, r2
 800522a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800522c:	2208      	movs	r2, #8
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	1a9b      	subs	r3, r3, r2
 8005232:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f023 0307 	bic.w	r3, r3, #7
 800523a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	4a15      	ldr	r2, [pc, #84]	@ (8005294 <prvHeapInit+0xb4>)
 8005240:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005242:	4b14      	ldr	r3, [pc, #80]	@ (8005294 <prvHeapInit+0xb4>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2200      	movs	r2, #0
 8005248:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800524a:	4b12      	ldr	r3, [pc, #72]	@ (8005294 <prvHeapInit+0xb4>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2200      	movs	r2, #0
 8005250:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	1ad2      	subs	r2, r2, r3
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005260:	4b0c      	ldr	r3, [pc, #48]	@ (8005294 <prvHeapInit+0xb4>)
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	4a0a      	ldr	r2, [pc, #40]	@ (8005298 <prvHeapInit+0xb8>)
 800526e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	4a09      	ldr	r2, [pc, #36]	@ (800529c <prvHeapInit+0xbc>)
 8005276:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005278:	4b09      	ldr	r3, [pc, #36]	@ (80052a0 <prvHeapInit+0xc0>)
 800527a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800527e:	601a      	str	r2, [r3, #0]
}
 8005280:	bf00      	nop
 8005282:	3714      	adds	r7, #20
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr
 800528c:	20000df4 	.word	0x20000df4
 8005290:	200049f4 	.word	0x200049f4
 8005294:	200049fc 	.word	0x200049fc
 8005298:	20004a04 	.word	0x20004a04
 800529c:	20004a00 	.word	0x20004a00
 80052a0:	20004a10 	.word	0x20004a10

080052a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80052ac:	4b28      	ldr	r3, [pc, #160]	@ (8005350 <prvInsertBlockIntoFreeList+0xac>)
 80052ae:	60fb      	str	r3, [r7, #12]
 80052b0:	e002      	b.n	80052b8 <prvInsertBlockIntoFreeList+0x14>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	60fb      	str	r3, [r7, #12]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d8f7      	bhi.n	80052b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	4413      	add	r3, r2
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d108      	bne.n	80052e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	685a      	ldr	r2, [r3, #4]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	441a      	add	r2, r3
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	68ba      	ldr	r2, [r7, #8]
 80052f0:	441a      	add	r2, r3
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d118      	bne.n	800532c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	4b15      	ldr	r3, [pc, #84]	@ (8005354 <prvInsertBlockIntoFreeList+0xb0>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	429a      	cmp	r2, r3
 8005304:	d00d      	beq.n	8005322 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	441a      	add	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	601a      	str	r2, [r3, #0]
 8005320:	e008      	b.n	8005334 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005322:	4b0c      	ldr	r3, [pc, #48]	@ (8005354 <prvInsertBlockIntoFreeList+0xb0>)
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	601a      	str	r2, [r3, #0]
 800532a:	e003      	b.n	8005334 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	429a      	cmp	r2, r3
 800533a:	d002      	beq.n	8005342 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005342:	bf00      	nop
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	200049f4 	.word	0x200049f4
 8005354:	200049fc 	.word	0x200049fc

08005358 <memset>:
 8005358:	4402      	add	r2, r0
 800535a:	4603      	mov	r3, r0
 800535c:	4293      	cmp	r3, r2
 800535e:	d100      	bne.n	8005362 <memset+0xa>
 8005360:	4770      	bx	lr
 8005362:	f803 1b01 	strb.w	r1, [r3], #1
 8005366:	e7f9      	b.n	800535c <memset+0x4>

08005368 <__libc_init_array>:
 8005368:	b570      	push	{r4, r5, r6, lr}
 800536a:	4d0d      	ldr	r5, [pc, #52]	@ (80053a0 <__libc_init_array+0x38>)
 800536c:	4c0d      	ldr	r4, [pc, #52]	@ (80053a4 <__libc_init_array+0x3c>)
 800536e:	1b64      	subs	r4, r4, r5
 8005370:	10a4      	asrs	r4, r4, #2
 8005372:	2600      	movs	r6, #0
 8005374:	42a6      	cmp	r6, r4
 8005376:	d109      	bne.n	800538c <__libc_init_array+0x24>
 8005378:	4d0b      	ldr	r5, [pc, #44]	@ (80053a8 <__libc_init_array+0x40>)
 800537a:	4c0c      	ldr	r4, [pc, #48]	@ (80053ac <__libc_init_array+0x44>)
 800537c:	f000 f826 	bl	80053cc <_init>
 8005380:	1b64      	subs	r4, r4, r5
 8005382:	10a4      	asrs	r4, r4, #2
 8005384:	2600      	movs	r6, #0
 8005386:	42a6      	cmp	r6, r4
 8005388:	d105      	bne.n	8005396 <__libc_init_array+0x2e>
 800538a:	bd70      	pop	{r4, r5, r6, pc}
 800538c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005390:	4798      	blx	r3
 8005392:	3601      	adds	r6, #1
 8005394:	e7ee      	b.n	8005374 <__libc_init_array+0xc>
 8005396:	f855 3b04 	ldr.w	r3, [r5], #4
 800539a:	4798      	blx	r3
 800539c:	3601      	adds	r6, #1
 800539e:	e7f2      	b.n	8005386 <__libc_init_array+0x1e>
 80053a0:	08005470 	.word	0x08005470
 80053a4:	08005470 	.word	0x08005470
 80053a8:	08005470 	.word	0x08005470
 80053ac:	08005474 	.word	0x08005474

080053b0 <memcpy>:
 80053b0:	440a      	add	r2, r1
 80053b2:	4291      	cmp	r1, r2
 80053b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80053b8:	d100      	bne.n	80053bc <memcpy+0xc>
 80053ba:	4770      	bx	lr
 80053bc:	b510      	push	{r4, lr}
 80053be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053c6:	4291      	cmp	r1, r2
 80053c8:	d1f9      	bne.n	80053be <memcpy+0xe>
 80053ca:	bd10      	pop	{r4, pc}

080053cc <_init>:
 80053cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ce:	bf00      	nop
 80053d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053d2:	bc08      	pop	{r3}
 80053d4:	469e      	mov	lr, r3
 80053d6:	4770      	bx	lr

080053d8 <_fini>:
 80053d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053da:	bf00      	nop
 80053dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053de:	bc08      	pop	{r3}
 80053e0:	469e      	mov	lr, r3
 80053e2:	4770      	bx	lr
