
blink_led_interupt_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053c0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08005570  08005570  00006570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005624  08005624  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  08005624  08005624  00006624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800562c  0800562c  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800562c  0800562c  0000662c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005630  08005630  00006630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005634  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007060  2**0
                  CONTENTS
 10 .bss          00004b9c  20000060  20000060  00007060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004bfc  20004bfc  00007060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014a74  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002efd  00000000  00000000  0001bb04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001208  00000000  00000000  0001ea08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ddf  00000000  00000000  0001fc10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002f0d  00000000  00000000  000209ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000137bf  00000000  00000000  000238fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1ccf  00000000  00000000  000370bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00118d8a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004e34  00000000  00000000  00118dd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  0011dc04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005558 	.word	0x08005558

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	08005558 	.word	0x08005558

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b96a 	b.w	80004dc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	460c      	mov	r4, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14e      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022c:	4694      	mov	ip, r2
 800022e:	458c      	cmp	ip, r1
 8000230:	4686      	mov	lr, r0
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	d962      	bls.n	80002fe <__udivmoddi4+0xde>
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0320 	rsb	r3, r2, #32
 800023e:	4091      	lsls	r1, r2
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	fa0c fc02 	lsl.w	ip, ip, r2
 8000248:	4319      	orrs	r1, r3
 800024a:	fa00 fe02 	lsl.w	lr, r0, r2
 800024e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000252:	fa1f f68c 	uxth.w	r6, ip
 8000256:	fbb1 f4f7 	udiv	r4, r1, r7
 800025a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025e:	fb07 1114 	mls	r1, r7, r4, r1
 8000262:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000266:	fb04 f106 	mul.w	r1, r4, r6
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f104 30ff 	add.w	r0, r4, #4294967295
 8000276:	f080 8112 	bcs.w	800049e <__udivmoddi4+0x27e>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 810f 	bls.w	800049e <__udivmoddi4+0x27e>
 8000280:	3c02      	subs	r4, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a59      	subs	r1, r3, r1
 8000286:	fa1f f38e 	uxth.w	r3, lr
 800028a:	fbb1 f0f7 	udiv	r0, r1, r7
 800028e:	fb07 1110 	mls	r1, r7, r0, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb00 f606 	mul.w	r6, r0, r6
 800029a:	429e      	cmp	r6, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x94>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a6:	f080 80fc 	bcs.w	80004a2 <__udivmoddi4+0x282>
 80002aa:	429e      	cmp	r6, r3
 80002ac:	f240 80f9 	bls.w	80004a2 <__udivmoddi4+0x282>
 80002b0:	4463      	add	r3, ip
 80002b2:	3802      	subs	r0, #2
 80002b4:	1b9b      	subs	r3, r3, r6
 80002b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ba:	2100      	movs	r1, #0
 80002bc:	b11d      	cbz	r5, 80002c6 <__udivmoddi4+0xa6>
 80002be:	40d3      	lsrs	r3, r2
 80002c0:	2200      	movs	r2, #0
 80002c2:	e9c5 3200 	strd	r3, r2, [r5]
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d905      	bls.n	80002da <__udivmoddi4+0xba>
 80002ce:	b10d      	cbz	r5, 80002d4 <__udivmoddi4+0xb4>
 80002d0:	e9c5 0100 	strd	r0, r1, [r5]
 80002d4:	2100      	movs	r1, #0
 80002d6:	4608      	mov	r0, r1
 80002d8:	e7f5      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d146      	bne.n	8000370 <__udivmoddi4+0x150>
 80002e2:	42a3      	cmp	r3, r4
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xcc>
 80002e6:	4290      	cmp	r0, r2
 80002e8:	f0c0 80f0 	bcc.w	80004cc <__udivmoddi4+0x2ac>
 80002ec:	1a86      	subs	r6, r0, r2
 80002ee:	eb64 0303 	sbc.w	r3, r4, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	d0e6      	beq.n	80002c6 <__udivmoddi4+0xa6>
 80002f8:	e9c5 6300 	strd	r6, r3, [r5]
 80002fc:	e7e3      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x204>
 8000304:	eba1 040c 	sub.w	r4, r1, ip
 8000308:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800030c:	fa1f f78c 	uxth.w	r7, ip
 8000310:	2101      	movs	r1, #1
 8000312:	fbb4 f6f8 	udiv	r6, r4, r8
 8000316:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031a:	fb08 4416 	mls	r4, r8, r6, r4
 800031e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000322:	fb07 f006 	mul.w	r0, r7, r6
 8000326:	4298      	cmp	r0, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x11c>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x11a>
 8000334:	4298      	cmp	r0, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 800033a:	4626      	mov	r6, r4
 800033c:	1a1c      	subs	r4, r3, r0
 800033e:	fa1f f38e 	uxth.w	r3, lr
 8000342:	fbb4 f0f8 	udiv	r0, r4, r8
 8000346:	fb08 4410 	mls	r4, r8, r0, r4
 800034a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034e:	fb00 f707 	mul.w	r7, r0, r7
 8000352:	429f      	cmp	r7, r3
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x148>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f100 34ff 	add.w	r4, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x146>
 8000360:	429f      	cmp	r7, r3
 8000362:	f200 80b0 	bhi.w	80004c6 <__udivmoddi4+0x2a6>
 8000366:	4620      	mov	r0, r4
 8000368:	1bdb      	subs	r3, r3, r7
 800036a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0x9c>
 8000370:	f1c1 0620 	rsb	r6, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 f706 	lsr.w	r7, r2, r6
 800037a:	431f      	orrs	r7, r3
 800037c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000380:	fa04 f301 	lsl.w	r3, r4, r1
 8000384:	ea43 030c 	orr.w	r3, r3, ip
 8000388:	40f4      	lsrs	r4, r6
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	0c38      	lsrs	r0, r7, #16
 8000390:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000394:	fbb4 fef0 	udiv	lr, r4, r0
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	fb00 441e 	mls	r4, r0, lr, r4
 80003a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a4:	fb0e f90c 	mul.w	r9, lr, ip
 80003a8:	45a1      	cmp	r9, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90a      	bls.n	80003c6 <__udivmoddi4+0x1a6>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b6:	f080 8084 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80003ba:	45a1      	cmp	r9, r4
 80003bc:	f240 8081 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80003c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	eba4 0409 	sub.w	r4, r4, r9
 80003ca:	fa1f f983 	uxth.w	r9, r3
 80003ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d2:	fb00 4413 	mls	r4, r0, r3, r4
 80003d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003da:	fb03 fc0c 	mul.w	ip, r3, ip
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x1d2>
 80003e2:	193c      	adds	r4, r7, r4
 80003e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e8:	d267      	bcs.n	80004ba <__udivmoddi4+0x29a>
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d965      	bls.n	80004ba <__udivmoddi4+0x29a>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	443c      	add	r4, r7
 80003f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f6:	fba0 9302 	umull	r9, r3, r0, r2
 80003fa:	eba4 040c 	sub.w	r4, r4, ip
 80003fe:	429c      	cmp	r4, r3
 8000400:	46ce      	mov	lr, r9
 8000402:	469c      	mov	ip, r3
 8000404:	d351      	bcc.n	80004aa <__udivmoddi4+0x28a>
 8000406:	d04e      	beq.n	80004a6 <__udivmoddi4+0x286>
 8000408:	b155      	cbz	r5, 8000420 <__udivmoddi4+0x200>
 800040a:	ebb8 030e 	subs.w	r3, r8, lr
 800040e:	eb64 040c 	sbc.w	r4, r4, ip
 8000412:	fa04 f606 	lsl.w	r6, r4, r6
 8000416:	40cb      	lsrs	r3, r1
 8000418:	431e      	orrs	r6, r3
 800041a:	40cc      	lsrs	r4, r1
 800041c:	e9c5 6400 	strd	r6, r4, [r5]
 8000420:	2100      	movs	r1, #0
 8000422:	e750      	b.n	80002c6 <__udivmoddi4+0xa6>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f103 	lsr.w	r1, r0, r3
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	fa24 f303 	lsr.w	r3, r4, r3
 8000434:	4094      	lsls	r4, r2
 8000436:	430c      	orrs	r4, r1
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000440:	fa1f f78c 	uxth.w	r7, ip
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3110 	mls	r1, r8, r0, r3
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000452:	fb00 f107 	mul.w	r1, r0, r7
 8000456:	4299      	cmp	r1, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x24c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000462:	d22c      	bcs.n	80004be <__udivmoddi4+0x29e>
 8000464:	4299      	cmp	r1, r3
 8000466:	d92a      	bls.n	80004be <__udivmoddi4+0x29e>
 8000468:	3802      	subs	r0, #2
 800046a:	4463      	add	r3, ip
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb3 f1f8 	udiv	r1, r3, r8
 8000474:	fb08 3311 	mls	r3, r8, r1, r3
 8000478:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800047c:	fb01 f307 	mul.w	r3, r1, r7
 8000480:	42a3      	cmp	r3, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x276>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f101 36ff 	add.w	r6, r1, #4294967295
 800048c:	d213      	bcs.n	80004b6 <__udivmoddi4+0x296>
 800048e:	42a3      	cmp	r3, r4
 8000490:	d911      	bls.n	80004b6 <__udivmoddi4+0x296>
 8000492:	3902      	subs	r1, #2
 8000494:	4464      	add	r4, ip
 8000496:	1ae4      	subs	r4, r4, r3
 8000498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800049c:	e739      	b.n	8000312 <__udivmoddi4+0xf2>
 800049e:	4604      	mov	r4, r0
 80004a0:	e6f0      	b.n	8000284 <__udivmoddi4+0x64>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e706      	b.n	80002b4 <__udivmoddi4+0x94>
 80004a6:	45c8      	cmp	r8, r9
 80004a8:	d2ae      	bcs.n	8000408 <__udivmoddi4+0x1e8>
 80004aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7a8      	b.n	8000408 <__udivmoddi4+0x1e8>
 80004b6:	4631      	mov	r1, r6
 80004b8:	e7ed      	b.n	8000496 <__udivmoddi4+0x276>
 80004ba:	4603      	mov	r3, r0
 80004bc:	e799      	b.n	80003f2 <__udivmoddi4+0x1d2>
 80004be:	4630      	mov	r0, r6
 80004c0:	e7d4      	b.n	800046c <__udivmoddi4+0x24c>
 80004c2:	46d6      	mov	lr, sl
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1a6>
 80004c6:	4463      	add	r3, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e74d      	b.n	8000368 <__udivmoddi4+0x148>
 80004cc:	4606      	mov	r6, r0
 80004ce:	4623      	mov	r3, r4
 80004d0:	4608      	mov	r0, r1
 80004d2:	e70f      	b.n	80002f4 <__udivmoddi4+0xd4>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	e730      	b.n	800033c <__udivmoddi4+0x11c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e4:	f000 fa52 	bl	800098c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e8:	f000 f830 	bl	800054c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ec:	f000 f89e 	bl	800062c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f0:	f001 fd20 	bl	8001f34 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of Button_sempahore */
  Button_sempahoreHandle = osSemaphoreNew(1, 1, &Button_sempahore_attributes);
 80004f4:	4a0d      	ldr	r2, [pc, #52]	@ (800052c <main+0x4c>)
 80004f6:	2101      	movs	r1, #1
 80004f8:	2001      	movs	r0, #1
 80004fa:	f001 fe12 	bl	8002122 <osSemaphoreNew>
 80004fe:	4603      	mov	r3, r0
 8000500:	4a0b      	ldr	r2, [pc, #44]	@ (8000530 <main+0x50>)
 8000502:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Blink_Led1 */
  Blink_Led1Handle = osThreadNew(StartDefaultTask, NULL, &Blink_Led1_attributes);
 8000504:	4a0b      	ldr	r2, [pc, #44]	@ (8000534 <main+0x54>)
 8000506:	2100      	movs	r1, #0
 8000508:	480b      	ldr	r0, [pc, #44]	@ (8000538 <main+0x58>)
 800050a:	f001 fd5d 	bl	8001fc8 <osThreadNew>
 800050e:	4603      	mov	r3, r0
 8000510:	4a0a      	ldr	r2, [pc, #40]	@ (800053c <main+0x5c>)
 8000512:	6013      	str	r3, [r2, #0]

  /* creation of Blink_Led2 */
  Blink_Led2Handle = osThreadNew(StartTask02, NULL, &Blink_Led2_attributes);
 8000514:	4a0a      	ldr	r2, [pc, #40]	@ (8000540 <main+0x60>)
 8000516:	2100      	movs	r1, #0
 8000518:	480a      	ldr	r0, [pc, #40]	@ (8000544 <main+0x64>)
 800051a:	f001 fd55 	bl	8001fc8 <osThreadNew>
 800051e:	4603      	mov	r3, r0
 8000520:	4a09      	ldr	r2, [pc, #36]	@ (8000548 <main+0x68>)
 8000522:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000524:	f001 fd2a 	bl	8001f7c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000528:	bf00      	nop
 800052a:	e7fd      	b.n	8000528 <main+0x48>
 800052c:	080055fc 	.word	0x080055fc
 8000530:	20000084 	.word	0x20000084
 8000534:	080055b4 	.word	0x080055b4
 8000538:	08000701 	.word	0x08000701
 800053c:	2000007c 	.word	0x2000007c
 8000540:	080055d8 	.word	0x080055d8
 8000544:	08000711 	.word	0x08000711
 8000548:	20000080 	.word	0x20000080

0800054c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b094      	sub	sp, #80	@ 0x50
 8000550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	f107 0320 	add.w	r3, r7, #32
 8000556:	2230      	movs	r2, #48	@ 0x30
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f004 ff14 	bl	8005388 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000560:	f107 030c 	add.w	r3, r7, #12
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
 800056e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000570:	2300      	movs	r3, #0
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	4b2b      	ldr	r3, [pc, #172]	@ (8000624 <SystemClock_Config+0xd8>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000578:	4a2a      	ldr	r2, [pc, #168]	@ (8000624 <SystemClock_Config+0xd8>)
 800057a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800057e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000580:	4b28      	ldr	r3, [pc, #160]	@ (8000624 <SystemClock_Config+0xd8>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000584:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000588:	60bb      	str	r3, [r7, #8]
 800058a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800058c:	2300      	movs	r3, #0
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	4b25      	ldr	r3, [pc, #148]	@ (8000628 <SystemClock_Config+0xdc>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a24      	ldr	r2, [pc, #144]	@ (8000628 <SystemClock_Config+0xdc>)
 8000596:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800059a:	6013      	str	r3, [r2, #0]
 800059c:	4b22      	ldr	r3, [pc, #136]	@ (8000628 <SystemClock_Config+0xdc>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a8:	2302      	movs	r3, #2
 80005aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ac:	2301      	movs	r3, #1
 80005ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b0:	2310      	movs	r3, #16
 80005b2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b4:	2302      	movs	r3, #2
 80005b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b8:	2300      	movs	r3, #0
 80005ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005bc:	2308      	movs	r3, #8
 80005be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80005c0:	23b4      	movs	r3, #180	@ 0xb4
 80005c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c4:	2302      	movs	r3, #2
 80005c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005c8:	2304      	movs	r3, #4
 80005ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005cc:	f107 0320 	add.w	r3, r7, #32
 80005d0:	4618      	mov	r0, r3
 80005d2:	f000 fd53 	bl	800107c <HAL_RCC_OscConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005dc:	f000 f8c8 	bl	8000770 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005e0:	f000 fcfc 	bl	8000fdc <HAL_PWREx_EnableOverDrive>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80005ea:	f000 f8c1 	bl	8000770 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ee:	230f      	movs	r3, #15
 80005f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f2:	2302      	movs	r3, #2
 80005f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005fa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000600:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000604:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000606:	f107 030c 	add.w	r3, r7, #12
 800060a:	2105      	movs	r1, #5
 800060c:	4618      	mov	r0, r3
 800060e:	f000 ffad 	bl	800156c <HAL_RCC_ClockConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000618:	f000 f8aa 	bl	8000770 <Error_Handler>
  }
}
 800061c:	bf00      	nop
 800061e:	3750      	adds	r7, #80	@ 0x50
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40023800 	.word	0x40023800
 8000628:	40007000 	.word	0x40007000

0800062c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b088      	sub	sp, #32
 8000630:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000632:	f107 030c 	add.w	r3, r7, #12
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	4b2b      	ldr	r3, [pc, #172]	@ (80006f4 <MX_GPIO_Init+0xc8>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	4a2a      	ldr	r2, [pc, #168]	@ (80006f4 <MX_GPIO_Init+0xc8>)
 800064c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000650:	6313      	str	r3, [r2, #48]	@ 0x30
 8000652:	4b28      	ldr	r3, [pc, #160]	@ (80006f4 <MX_GPIO_Init+0xc8>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	4b24      	ldr	r3, [pc, #144]	@ (80006f4 <MX_GPIO_Init+0xc8>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	4a23      	ldr	r2, [pc, #140]	@ (80006f4 <MX_GPIO_Init+0xc8>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6313      	str	r3, [r2, #48]	@ 0x30
 800066e:	4b21      	ldr	r3, [pc, #132]	@ (80006f4 <MX_GPIO_Init+0xc8>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	603b      	str	r3, [r7, #0]
 800067e:	4b1d      	ldr	r3, [pc, #116]	@ (80006f4 <MX_GPIO_Init+0xc8>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	4a1c      	ldr	r2, [pc, #112]	@ (80006f4 <MX_GPIO_Init+0xc8>)
 8000684:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000688:	6313      	str	r3, [r2, #48]	@ 0x30
 800068a:	4b1a      	ldr	r3, [pc, #104]	@ (80006f4 <MX_GPIO_Init+0xc8>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000692:	603b      	str	r3, [r7, #0]
 8000694:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 800069c:	4816      	ldr	r0, [pc, #88]	@ (80006f8 <MX_GPIO_Init+0xcc>)
 800069e:	f000 fc45 	bl	8000f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006a2:	2301      	movs	r3, #1
 80006a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006a6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	4619      	mov	r1, r3
 80006b6:	4811      	ldr	r0, [pc, #68]	@ (80006fc <MX_GPIO_Init+0xd0>)
 80006b8:	f000 fa8c 	bl	8000bd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80006bc:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80006c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c2:	2301      	movs	r3, #1
 80006c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006ce:	f107 030c 	add.w	r3, r7, #12
 80006d2:	4619      	mov	r1, r3
 80006d4:	4808      	ldr	r0, [pc, #32]	@ (80006f8 <MX_GPIO_Init+0xcc>)
 80006d6:	f000 fa7d 	bl	8000bd4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80006da:	2200      	movs	r2, #0
 80006dc:	2105      	movs	r1, #5
 80006de:	2006      	movs	r0, #6
 80006e0:	f000 fa4e 	bl	8000b80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006e4:	2006      	movs	r0, #6
 80006e6:	f000 fa67 	bl	8000bb8 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006ea:	bf00      	nop
 80006ec:	3720      	adds	r7, #32
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40021800 	.word	0x40021800
 80006fc:	40020000 	.word	0x40020000

08000700 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000708:	2001      	movs	r0, #1
 800070a:	f001 fcef 	bl	80020ec <osDelay>
 800070e:	e7fb      	b.n	8000708 <StartDefaultTask+0x8>

08000710 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  for(;;)
  {
    // Wait for the semaphore to be released by the ISR
    if (osSemaphoreAcquire(Button_sempahoreHandle, osWaitForever) == osOK)
 8000718:	4b0a      	ldr	r3, [pc, #40]	@ (8000744 <StartTask02+0x34>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f04f 31ff 	mov.w	r1, #4294967295
 8000720:	4618      	mov	r0, r3
 8000722:	f001 fd87 	bl	8002234 <osSemaphoreAcquire>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d1f5      	bne.n	8000718 <StartTask02+0x8>
    {
      // Toggle LEDs
      HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13); // Toggle LED 1 (PG13)
 800072c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000730:	4805      	ldr	r0, [pc, #20]	@ (8000748 <StartTask02+0x38>)
 8000732:	f000 fc14 	bl	8000f5e <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14); // Toggle LED 2 (PG14)
 8000736:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800073a:	4803      	ldr	r0, [pc, #12]	@ (8000748 <StartTask02+0x38>)
 800073c:	f000 fc0f 	bl	8000f5e <HAL_GPIO_TogglePin>
    if (osSemaphoreAcquire(Button_sempahoreHandle, osWaitForever) == osOK)
 8000740:	e7ea      	b.n	8000718 <StartTask02+0x8>
 8000742:	bf00      	nop
 8000744:	20000084 	.word	0x20000084
 8000748:	40021800 	.word	0x40021800

0800074c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a04      	ldr	r2, [pc, #16]	@ (800076c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d101      	bne.n	8000762 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800075e:	f000 f937 	bl	80009d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40010000 	.word	0x40010000

08000770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000774:	b672      	cpsid	i
}
 8000776:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000778:	bf00      	nop
 800077a:	e7fd      	b.n	8000778 <Error_Handler+0x8>

0800077c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	4b12      	ldr	r3, [pc, #72]	@ (80007d0 <HAL_MspInit+0x54>)
 8000788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800078a:	4a11      	ldr	r2, [pc, #68]	@ (80007d0 <HAL_MspInit+0x54>)
 800078c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000790:	6453      	str	r3, [r2, #68]	@ 0x44
 8000792:	4b0f      	ldr	r3, [pc, #60]	@ (80007d0 <HAL_MspInit+0x54>)
 8000794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000796:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	603b      	str	r3, [r7, #0]
 80007a2:	4b0b      	ldr	r3, [pc, #44]	@ (80007d0 <HAL_MspInit+0x54>)
 80007a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a6:	4a0a      	ldr	r2, [pc, #40]	@ (80007d0 <HAL_MspInit+0x54>)
 80007a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80007ae:	4b08      	ldr	r3, [pc, #32]	@ (80007d0 <HAL_MspInit+0x54>)
 80007b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007b6:	603b      	str	r3, [r7, #0]
 80007b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	210f      	movs	r1, #15
 80007be:	f06f 0001 	mvn.w	r0, #1
 80007c2:	f000 f9dd 	bl	8000b80 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800

080007d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08c      	sub	sp, #48	@ 0x30
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80007dc:	2300      	movs	r3, #0
 80007de:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80007e0:	2300      	movs	r3, #0
 80007e2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80007e4:	2300      	movs	r3, #0
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	4b2f      	ldr	r3, [pc, #188]	@ (80008a8 <HAL_InitTick+0xd4>)
 80007ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ec:	4a2e      	ldr	r2, [pc, #184]	@ (80008a8 <HAL_InitTick+0xd4>)
 80007ee:	f043 0301 	orr.w	r3, r3, #1
 80007f2:	6453      	str	r3, [r2, #68]	@ 0x44
 80007f4:	4b2c      	ldr	r3, [pc, #176]	@ (80008a8 <HAL_InitTick+0xd4>)
 80007f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007f8:	f003 0301 	and.w	r3, r3, #1
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000800:	f107 020c 	add.w	r2, r7, #12
 8000804:	f107 0310 	add.w	r3, r7, #16
 8000808:	4611      	mov	r1, r2
 800080a:	4618      	mov	r0, r3
 800080c:	f001 f87a 	bl	8001904 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000810:	f001 f864 	bl	80018dc <HAL_RCC_GetPCLK2Freq>
 8000814:	4603      	mov	r3, r0
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800081a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800081c:	4a23      	ldr	r2, [pc, #140]	@ (80008ac <HAL_InitTick+0xd8>)
 800081e:	fba2 2303 	umull	r2, r3, r2, r3
 8000822:	0c9b      	lsrs	r3, r3, #18
 8000824:	3b01      	subs	r3, #1
 8000826:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000828:	4b21      	ldr	r3, [pc, #132]	@ (80008b0 <HAL_InitTick+0xdc>)
 800082a:	4a22      	ldr	r2, [pc, #136]	@ (80008b4 <HAL_InitTick+0xe0>)
 800082c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800082e:	4b20      	ldr	r3, [pc, #128]	@ (80008b0 <HAL_InitTick+0xdc>)
 8000830:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000834:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000836:	4a1e      	ldr	r2, [pc, #120]	@ (80008b0 <HAL_InitTick+0xdc>)
 8000838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800083a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800083c:	4b1c      	ldr	r3, [pc, #112]	@ (80008b0 <HAL_InitTick+0xdc>)
 800083e:	2200      	movs	r2, #0
 8000840:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000842:	4b1b      	ldr	r3, [pc, #108]	@ (80008b0 <HAL_InitTick+0xdc>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000848:	4b19      	ldr	r3, [pc, #100]	@ (80008b0 <HAL_InitTick+0xdc>)
 800084a:	2200      	movs	r2, #0
 800084c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800084e:	4818      	ldr	r0, [pc, #96]	@ (80008b0 <HAL_InitTick+0xdc>)
 8000850:	f001 f88a 	bl	8001968 <HAL_TIM_Base_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800085a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800085e:	2b00      	cmp	r3, #0
 8000860:	d11b      	bne.n	800089a <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000862:	4813      	ldr	r0, [pc, #76]	@ (80008b0 <HAL_InitTick+0xdc>)
 8000864:	f001 f8da 	bl	8001a1c <HAL_TIM_Base_Start_IT>
 8000868:	4603      	mov	r3, r0
 800086a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800086e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000872:	2b00      	cmp	r3, #0
 8000874:	d111      	bne.n	800089a <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000876:	2019      	movs	r0, #25
 8000878:	f000 f99e 	bl	8000bb8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2b0f      	cmp	r3, #15
 8000880:	d808      	bhi.n	8000894 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000882:	2200      	movs	r2, #0
 8000884:	6879      	ldr	r1, [r7, #4]
 8000886:	2019      	movs	r0, #25
 8000888:	f000 f97a 	bl	8000b80 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800088c:	4a0a      	ldr	r2, [pc, #40]	@ (80008b8 <HAL_InitTick+0xe4>)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	6013      	str	r3, [r2, #0]
 8000892:	e002      	b.n	800089a <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000894:	2301      	movs	r3, #1
 8000896:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800089a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3730      	adds	r7, #48	@ 0x30
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40023800 	.word	0x40023800
 80008ac:	431bde83 	.word	0x431bde83
 80008b0:	20000088 	.word	0x20000088
 80008b4:	40010000 	.word	0x40010000
 80008b8:	20000004 	.word	0x20000004

080008bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <NMI_Handler+0x4>

080008c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c8:	bf00      	nop
 80008ca:	e7fd      	b.n	80008c8 <HardFault_Handler+0x4>

080008cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d0:	bf00      	nop
 80008d2:	e7fd      	b.n	80008d0 <MemManage_Handler+0x4>

080008d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <BusFault_Handler+0x4>

080008dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <UsageFault_Handler+0x4>

080008e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr

080008f2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80008f6:	2001      	movs	r0, #1
 80008f8:	f000 fb4c 	bl	8000f94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}

08000900 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000904:	4802      	ldr	r0, [pc, #8]	@ (8000910 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000906:	f001 f8f9 	bl	8001afc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000088 	.word	0x20000088

08000914 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000918:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <SystemInit+0x20>)
 800091a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800091e:	4a05      	ldr	r2, [pc, #20]	@ (8000934 <SystemInit+0x20>)
 8000920:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000924:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	e000ed00 	.word	0xe000ed00

08000938 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000938:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000970 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800093c:	f7ff ffea 	bl	8000914 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000940:	480c      	ldr	r0, [pc, #48]	@ (8000974 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000942:	490d      	ldr	r1, [pc, #52]	@ (8000978 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000944:	4a0d      	ldr	r2, [pc, #52]	@ (800097c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000946:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000948:	e002      	b.n	8000950 <LoopCopyDataInit>

0800094a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800094a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800094c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800094e:	3304      	adds	r3, #4

08000950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000954:	d3f9      	bcc.n	800094a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000956:	4a0a      	ldr	r2, [pc, #40]	@ (8000980 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000958:	4c0a      	ldr	r4, [pc, #40]	@ (8000984 <LoopFillZerobss+0x22>)
  movs r3, #0
 800095a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800095c:	e001      	b.n	8000962 <LoopFillZerobss>

0800095e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800095e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000960:	3204      	adds	r2, #4

08000962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000964:	d3fb      	bcc.n	800095e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000966:	f004 fd6d 	bl	8005444 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800096a:	f7ff fdb9 	bl	80004e0 <main>
  bx  lr    
 800096e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000970:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000974:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000978:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800097c:	08005634 	.word	0x08005634
  ldr r2, =_sbss
 8000980:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000984:	20004bfc 	.word	0x20004bfc

08000988 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000988:	e7fe      	b.n	8000988 <ADC_IRQHandler>
	...

0800098c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000990:	4b0e      	ldr	r3, [pc, #56]	@ (80009cc <HAL_Init+0x40>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a0d      	ldr	r2, [pc, #52]	@ (80009cc <HAL_Init+0x40>)
 8000996:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800099a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800099c:	4b0b      	ldr	r3, [pc, #44]	@ (80009cc <HAL_Init+0x40>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a0a      	ldr	r2, [pc, #40]	@ (80009cc <HAL_Init+0x40>)
 80009a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009a8:	4b08      	ldr	r3, [pc, #32]	@ (80009cc <HAL_Init+0x40>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a07      	ldr	r2, [pc, #28]	@ (80009cc <HAL_Init+0x40>)
 80009ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b4:	2003      	movs	r0, #3
 80009b6:	f000 f8d8 	bl	8000b6a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ba:	200f      	movs	r0, #15
 80009bc:	f7ff ff0a 	bl	80007d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009c0:	f7ff fedc 	bl	800077c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009c4:	2300      	movs	r3, #0
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40023c00 	.word	0x40023c00

080009d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d4:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <HAL_IncTick+0x20>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	461a      	mov	r2, r3
 80009da:	4b06      	ldr	r3, [pc, #24]	@ (80009f4 <HAL_IncTick+0x24>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4413      	add	r3, r2
 80009e0:	4a04      	ldr	r2, [pc, #16]	@ (80009f4 <HAL_IncTick+0x24>)
 80009e2:	6013      	str	r3, [r2, #0]
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	20000008 	.word	0x20000008
 80009f4:	200000d0 	.word	0x200000d0

080009f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  return uwTick;
 80009fc:	4b03      	ldr	r3, [pc, #12]	@ (8000a0c <HAL_GetTick+0x14>)
 80009fe:	681b      	ldr	r3, [r3, #0]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	200000d0 	.word	0x200000d0

08000a10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f003 0307 	and.w	r3, r3, #7
 8000a1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a20:	4b0c      	ldr	r3, [pc, #48]	@ (8000a54 <__NVIC_SetPriorityGrouping+0x44>)
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a26:	68ba      	ldr	r2, [r7, #8]
 8000a28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a42:	4a04      	ldr	r2, [pc, #16]	@ (8000a54 <__NVIC_SetPriorityGrouping+0x44>)
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	60d3      	str	r3, [r2, #12]
}
 8000a48:	bf00      	nop
 8000a4a:	3714      	adds	r7, #20
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a5c:	4b04      	ldr	r3, [pc, #16]	@ (8000a70 <__NVIC_GetPriorityGrouping+0x18>)
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	0a1b      	lsrs	r3, r3, #8
 8000a62:	f003 0307 	and.w	r3, r3, #7
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	db0b      	blt.n	8000a9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	f003 021f 	and.w	r2, r3, #31
 8000a8c:	4907      	ldr	r1, [pc, #28]	@ (8000aac <__NVIC_EnableIRQ+0x38>)
 8000a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a92:	095b      	lsrs	r3, r3, #5
 8000a94:	2001      	movs	r0, #1
 8000a96:	fa00 f202 	lsl.w	r2, r0, r2
 8000a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a9e:	bf00      	nop
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	e000e100 	.word	0xe000e100

08000ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	6039      	str	r1, [r7, #0]
 8000aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	db0a      	blt.n	8000ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	490c      	ldr	r1, [pc, #48]	@ (8000afc <__NVIC_SetPriority+0x4c>)
 8000aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ace:	0112      	lsls	r2, r2, #4
 8000ad0:	b2d2      	uxtb	r2, r2
 8000ad2:	440b      	add	r3, r1
 8000ad4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ad8:	e00a      	b.n	8000af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	b2da      	uxtb	r2, r3
 8000ade:	4908      	ldr	r1, [pc, #32]	@ (8000b00 <__NVIC_SetPriority+0x50>)
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	f003 030f 	and.w	r3, r3, #15
 8000ae6:	3b04      	subs	r3, #4
 8000ae8:	0112      	lsls	r2, r2, #4
 8000aea:	b2d2      	uxtb	r2, r2
 8000aec:	440b      	add	r3, r1
 8000aee:	761a      	strb	r2, [r3, #24]
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	e000e100 	.word	0xe000e100
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b089      	sub	sp, #36	@ 0x24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	f003 0307 	and.w	r3, r3, #7
 8000b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b18:	69fb      	ldr	r3, [r7, #28]
 8000b1a:	f1c3 0307 	rsb	r3, r3, #7
 8000b1e:	2b04      	cmp	r3, #4
 8000b20:	bf28      	it	cs
 8000b22:	2304      	movcs	r3, #4
 8000b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	3304      	adds	r3, #4
 8000b2a:	2b06      	cmp	r3, #6
 8000b2c:	d902      	bls.n	8000b34 <NVIC_EncodePriority+0x30>
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	3b03      	subs	r3, #3
 8000b32:	e000      	b.n	8000b36 <NVIC_EncodePriority+0x32>
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b38:	f04f 32ff 	mov.w	r2, #4294967295
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	43da      	mvns	r2, r3
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	401a      	ands	r2, r3
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	fa01 f303 	lsl.w	r3, r1, r3
 8000b56:	43d9      	mvns	r1, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b5c:	4313      	orrs	r3, r2
         );
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3724      	adds	r7, #36	@ 0x24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr

08000b6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b082      	sub	sp, #8
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	f7ff ff4c 	bl	8000a10 <__NVIC_SetPriorityGrouping>
}
 8000b78:	bf00      	nop
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
 8000b8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b92:	f7ff ff61 	bl	8000a58 <__NVIC_GetPriorityGrouping>
 8000b96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b98:	687a      	ldr	r2, [r7, #4]
 8000b9a:	68b9      	ldr	r1, [r7, #8]
 8000b9c:	6978      	ldr	r0, [r7, #20]
 8000b9e:	f7ff ffb1 	bl	8000b04 <NVIC_EncodePriority>
 8000ba2:	4602      	mov	r2, r0
 8000ba4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ba8:	4611      	mov	r1, r2
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff ff80 	bl	8000ab0 <__NVIC_SetPriority>
}
 8000bb0:	bf00      	nop
 8000bb2:	3718      	adds	r7, #24
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff ff54 	bl	8000a74 <__NVIC_EnableIRQ>
}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b089      	sub	sp, #36	@ 0x24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bde:	2300      	movs	r3, #0
 8000be0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000be2:	2300      	movs	r3, #0
 8000be4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
 8000bee:	e177      	b.n	8000ee0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	697a      	ldr	r2, [r7, #20]
 8000c00:	4013      	ands	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	f040 8166 	bne.w	8000eda <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f003 0303 	and.w	r3, r3, #3
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d005      	beq.n	8000c26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c22:	2b02      	cmp	r3, #2
 8000c24:	d130      	bne.n	8000c88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	689b      	ldr	r3, [r3, #8]
 8000c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	2203      	movs	r2, #3
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	43db      	mvns	r3, r3
 8000c38:	69ba      	ldr	r2, [r7, #24]
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	68da      	ldr	r2, [r3, #12]
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	69ba      	ldr	r2, [r7, #24]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	69ba      	ldr	r2, [r7, #24]
 8000c54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	43db      	mvns	r3, r3
 8000c66:	69ba      	ldr	r2, [r7, #24]
 8000c68:	4013      	ands	r3, r2
 8000c6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	091b      	lsrs	r3, r3, #4
 8000c72:	f003 0201 	and.w	r2, r3, #1
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f003 0303 	and.w	r3, r3, #3
 8000c90:	2b03      	cmp	r3, #3
 8000c92:	d017      	beq.n	8000cc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	2203      	movs	r2, #3
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	689a      	ldr	r2, [r3, #8]
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	69ba      	ldr	r2, [r7, #24]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f003 0303 	and.w	r3, r3, #3
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d123      	bne.n	8000d18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	08da      	lsrs	r2, r3, #3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3208      	adds	r2, #8
 8000cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	f003 0307 	and.w	r3, r3, #7
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	220f      	movs	r2, #15
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	43db      	mvns	r3, r3
 8000cee:	69ba      	ldr	r2, [r7, #24]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	691a      	ldr	r2, [r3, #16]
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	f003 0307 	and.w	r3, r3, #7
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	08da      	lsrs	r2, r3, #3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	3208      	adds	r2, #8
 8000d12:	69b9      	ldr	r1, [r7, #24]
 8000d14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	2203      	movs	r2, #3
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f003 0203 	and.w	r2, r3, #3
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	f000 80c0 	beq.w	8000eda <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	4b66      	ldr	r3, [pc, #408]	@ (8000ef8 <HAL_GPIO_Init+0x324>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d62:	4a65      	ldr	r2, [pc, #404]	@ (8000ef8 <HAL_GPIO_Init+0x324>)
 8000d64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d68:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d6a:	4b63      	ldr	r3, [pc, #396]	@ (8000ef8 <HAL_GPIO_Init+0x324>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d76:	4a61      	ldr	r2, [pc, #388]	@ (8000efc <HAL_GPIO_Init+0x328>)
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	089b      	lsrs	r3, r3, #2
 8000d7c:	3302      	adds	r3, #2
 8000d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	f003 0303 	and.w	r3, r3, #3
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	220f      	movs	r2, #15
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43db      	mvns	r3, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4013      	ands	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a58      	ldr	r2, [pc, #352]	@ (8000f00 <HAL_GPIO_Init+0x32c>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d037      	beq.n	8000e12 <HAL_GPIO_Init+0x23e>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a57      	ldr	r2, [pc, #348]	@ (8000f04 <HAL_GPIO_Init+0x330>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d031      	beq.n	8000e0e <HAL_GPIO_Init+0x23a>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a56      	ldr	r2, [pc, #344]	@ (8000f08 <HAL_GPIO_Init+0x334>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d02b      	beq.n	8000e0a <HAL_GPIO_Init+0x236>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a55      	ldr	r2, [pc, #340]	@ (8000f0c <HAL_GPIO_Init+0x338>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d025      	beq.n	8000e06 <HAL_GPIO_Init+0x232>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a54      	ldr	r2, [pc, #336]	@ (8000f10 <HAL_GPIO_Init+0x33c>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d01f      	beq.n	8000e02 <HAL_GPIO_Init+0x22e>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a53      	ldr	r2, [pc, #332]	@ (8000f14 <HAL_GPIO_Init+0x340>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d019      	beq.n	8000dfe <HAL_GPIO_Init+0x22a>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a52      	ldr	r2, [pc, #328]	@ (8000f18 <HAL_GPIO_Init+0x344>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d013      	beq.n	8000dfa <HAL_GPIO_Init+0x226>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a51      	ldr	r2, [pc, #324]	@ (8000f1c <HAL_GPIO_Init+0x348>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d00d      	beq.n	8000df6 <HAL_GPIO_Init+0x222>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a50      	ldr	r2, [pc, #320]	@ (8000f20 <HAL_GPIO_Init+0x34c>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d007      	beq.n	8000df2 <HAL_GPIO_Init+0x21e>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a4f      	ldr	r2, [pc, #316]	@ (8000f24 <HAL_GPIO_Init+0x350>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d101      	bne.n	8000dee <HAL_GPIO_Init+0x21a>
 8000dea:	2309      	movs	r3, #9
 8000dec:	e012      	b.n	8000e14 <HAL_GPIO_Init+0x240>
 8000dee:	230a      	movs	r3, #10
 8000df0:	e010      	b.n	8000e14 <HAL_GPIO_Init+0x240>
 8000df2:	2308      	movs	r3, #8
 8000df4:	e00e      	b.n	8000e14 <HAL_GPIO_Init+0x240>
 8000df6:	2307      	movs	r3, #7
 8000df8:	e00c      	b.n	8000e14 <HAL_GPIO_Init+0x240>
 8000dfa:	2306      	movs	r3, #6
 8000dfc:	e00a      	b.n	8000e14 <HAL_GPIO_Init+0x240>
 8000dfe:	2305      	movs	r3, #5
 8000e00:	e008      	b.n	8000e14 <HAL_GPIO_Init+0x240>
 8000e02:	2304      	movs	r3, #4
 8000e04:	e006      	b.n	8000e14 <HAL_GPIO_Init+0x240>
 8000e06:	2303      	movs	r3, #3
 8000e08:	e004      	b.n	8000e14 <HAL_GPIO_Init+0x240>
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	e002      	b.n	8000e14 <HAL_GPIO_Init+0x240>
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e000      	b.n	8000e14 <HAL_GPIO_Init+0x240>
 8000e12:	2300      	movs	r3, #0
 8000e14:	69fa      	ldr	r2, [r7, #28]
 8000e16:	f002 0203 	and.w	r2, r2, #3
 8000e1a:	0092      	lsls	r2, r2, #2
 8000e1c:	4093      	lsls	r3, r2
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e24:	4935      	ldr	r1, [pc, #212]	@ (8000efc <HAL_GPIO_Init+0x328>)
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	089b      	lsrs	r3, r3, #2
 8000e2a:	3302      	adds	r3, #2
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e32:	4b3d      	ldr	r3, [pc, #244]	@ (8000f28 <HAL_GPIO_Init+0x354>)
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d003      	beq.n	8000e56 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e56:	4a34      	ldr	r2, [pc, #208]	@ (8000f28 <HAL_GPIO_Init+0x354>)
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e5c:	4b32      	ldr	r3, [pc, #200]	@ (8000f28 <HAL_GPIO_Init+0x354>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	43db      	mvns	r3, r3
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d003      	beq.n	8000e80 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e80:	4a29      	ldr	r2, [pc, #164]	@ (8000f28 <HAL_GPIO_Init+0x354>)
 8000e82:	69bb      	ldr	r3, [r7, #24]
 8000e84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e86:	4b28      	ldr	r3, [pc, #160]	@ (8000f28 <HAL_GPIO_Init+0x354>)
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4013      	ands	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d003      	beq.n	8000eaa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000eaa:	4a1f      	ldr	r2, [pc, #124]	@ (8000f28 <HAL_GPIO_Init+0x354>)
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eb0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f28 <HAL_GPIO_Init+0x354>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d003      	beq.n	8000ed4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ed4:	4a14      	ldr	r2, [pc, #80]	@ (8000f28 <HAL_GPIO_Init+0x354>)
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3301      	adds	r3, #1
 8000ede:	61fb      	str	r3, [r7, #28]
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	2b0f      	cmp	r3, #15
 8000ee4:	f67f ae84 	bls.w	8000bf0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ee8:	bf00      	nop
 8000eea:	bf00      	nop
 8000eec:	3724      	adds	r7, #36	@ 0x24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40013800 	.word	0x40013800
 8000f00:	40020000 	.word	0x40020000
 8000f04:	40020400 	.word	0x40020400
 8000f08:	40020800 	.word	0x40020800
 8000f0c:	40020c00 	.word	0x40020c00
 8000f10:	40021000 	.word	0x40021000
 8000f14:	40021400 	.word	0x40021400
 8000f18:	40021800 	.word	0x40021800
 8000f1c:	40021c00 	.word	0x40021c00
 8000f20:	40022000 	.word	0x40022000
 8000f24:	40022400 	.word	0x40022400
 8000f28:	40013c00 	.word	0x40013c00

08000f2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	460b      	mov	r3, r1
 8000f36:	807b      	strh	r3, [r7, #2]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f3c:	787b      	ldrb	r3, [r7, #1]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d003      	beq.n	8000f4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f42:	887a      	ldrh	r2, [r7, #2]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f48:	e003      	b.n	8000f52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f4a:	887b      	ldrh	r3, [r7, #2]
 8000f4c:	041a      	lsls	r2, r3, #16
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	619a      	str	r2, [r3, #24]
}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	b085      	sub	sp, #20
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
 8000f66:	460b      	mov	r3, r1
 8000f68:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	695b      	ldr	r3, [r3, #20]
 8000f6e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f70:	887a      	ldrh	r2, [r7, #2]
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	4013      	ands	r3, r2
 8000f76:	041a      	lsls	r2, r3, #16
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	43d9      	mvns	r1, r3
 8000f7c:	887b      	ldrh	r3, [r7, #2]
 8000f7e:	400b      	ands	r3, r1
 8000f80:	431a      	orrs	r2, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	619a      	str	r2, [r3, #24]
}
 8000f86:	bf00      	nop
 8000f88:	3714      	adds	r7, #20
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
	...

08000f94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000f9e:	4b08      	ldr	r3, [pc, #32]	@ (8000fc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fa0:	695a      	ldr	r2, [r3, #20]
 8000fa2:	88fb      	ldrh	r3, [r7, #6]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d006      	beq.n	8000fb8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000faa:	4a05      	ldr	r2, [pc, #20]	@ (8000fc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fac:	88fb      	ldrh	r3, [r7, #6]
 8000fae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000fb0:	88fb      	ldrh	r3, [r7, #6]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 f806 	bl	8000fc4 <HAL_GPIO_EXTI_Callback>
  }
}
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40013c00 	.word	0x40013c00

08000fc4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000fce:	bf00      	nop
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
	...

08000fdc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	603b      	str	r3, [r7, #0]
 8000fea:	4b20      	ldr	r3, [pc, #128]	@ (800106c <HAL_PWREx_EnableOverDrive+0x90>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fee:	4a1f      	ldr	r2, [pc, #124]	@ (800106c <HAL_PWREx_EnableOverDrive+0x90>)
 8000ff0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ff4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ff6:	4b1d      	ldr	r3, [pc, #116]	@ (800106c <HAL_PWREx_EnableOverDrive+0x90>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ffa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ffe:	603b      	str	r3, [r7, #0]
 8001000:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001002:	4b1b      	ldr	r3, [pc, #108]	@ (8001070 <HAL_PWREx_EnableOverDrive+0x94>)
 8001004:	2201      	movs	r2, #1
 8001006:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001008:	f7ff fcf6 	bl	80009f8 <HAL_GetTick>
 800100c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800100e:	e009      	b.n	8001024 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001010:	f7ff fcf2 	bl	80009f8 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800101e:	d901      	bls.n	8001024 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001020:	2303      	movs	r3, #3
 8001022:	e01f      	b.n	8001064 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001024:	4b13      	ldr	r3, [pc, #76]	@ (8001074 <HAL_PWREx_EnableOverDrive+0x98>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800102c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001030:	d1ee      	bne.n	8001010 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001032:	4b11      	ldr	r3, [pc, #68]	@ (8001078 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001034:	2201      	movs	r2, #1
 8001036:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001038:	f7ff fcde 	bl	80009f8 <HAL_GetTick>
 800103c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800103e:	e009      	b.n	8001054 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001040:	f7ff fcda 	bl	80009f8 <HAL_GetTick>
 8001044:	4602      	mov	r2, r0
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800104e:	d901      	bls.n	8001054 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001050:	2303      	movs	r3, #3
 8001052:	e007      	b.n	8001064 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001054:	4b07      	ldr	r3, [pc, #28]	@ (8001074 <HAL_PWREx_EnableOverDrive+0x98>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800105c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001060:	d1ee      	bne.n	8001040 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001062:	2300      	movs	r3, #0
}
 8001064:	4618      	mov	r0, r3
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40023800 	.word	0x40023800
 8001070:	420e0040 	.word	0x420e0040
 8001074:	40007000 	.word	0x40007000
 8001078:	420e0044 	.word	0x420e0044

0800107c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d101      	bne.n	800108e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e267      	b.n	800155e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	2b00      	cmp	r3, #0
 8001098:	d075      	beq.n	8001186 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800109a:	4b88      	ldr	r3, [pc, #544]	@ (80012bc <HAL_RCC_OscConfig+0x240>)
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	f003 030c 	and.w	r3, r3, #12
 80010a2:	2b04      	cmp	r3, #4
 80010a4:	d00c      	beq.n	80010c0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010a6:	4b85      	ldr	r3, [pc, #532]	@ (80012bc <HAL_RCC_OscConfig+0x240>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80010ae:	2b08      	cmp	r3, #8
 80010b0:	d112      	bne.n	80010d8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010b2:	4b82      	ldr	r3, [pc, #520]	@ (80012bc <HAL_RCC_OscConfig+0x240>)
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80010be:	d10b      	bne.n	80010d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c0:	4b7e      	ldr	r3, [pc, #504]	@ (80012bc <HAL_RCC_OscConfig+0x240>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d05b      	beq.n	8001184 <HAL_RCC_OscConfig+0x108>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d157      	bne.n	8001184 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e242      	b.n	800155e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010e0:	d106      	bne.n	80010f0 <HAL_RCC_OscConfig+0x74>
 80010e2:	4b76      	ldr	r3, [pc, #472]	@ (80012bc <HAL_RCC_OscConfig+0x240>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a75      	ldr	r2, [pc, #468]	@ (80012bc <HAL_RCC_OscConfig+0x240>)
 80010e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010ec:	6013      	str	r3, [r2, #0]
 80010ee:	e01d      	b.n	800112c <HAL_RCC_OscConfig+0xb0>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80010f8:	d10c      	bne.n	8001114 <HAL_RCC_OscConfig+0x98>
 80010fa:	4b70      	ldr	r3, [pc, #448]	@ (80012bc <HAL_RCC_OscConfig+0x240>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a6f      	ldr	r2, [pc, #444]	@ (80012bc <HAL_RCC_OscConfig+0x240>)
 8001100:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001104:	6013      	str	r3, [r2, #0]
 8001106:	4b6d      	ldr	r3, [pc, #436]	@ (80012bc <HAL_RCC_OscConfig+0x240>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a6c      	ldr	r2, [pc, #432]	@ (80012bc <HAL_RCC_OscConfig+0x240>)
 800110c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001110:	6013      	str	r3, [r2, #0]
 8001112:	e00b      	b.n	800112c <HAL_RCC_OscConfig+0xb0>
 8001114:	4b69      	ldr	r3, [pc, #420]	@ (80012bc <HAL_RCC_OscConfig+0x240>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a68      	ldr	r2, [pc, #416]	@ (80012bc <HAL_RCC_OscConfig+0x240>)
 800111a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800111e:	6013      	str	r3, [r2, #0]
 8001120:	4b66      	ldr	r3, [pc, #408]	@ (80012bc <HAL_RCC_OscConfig+0x240>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a65      	ldr	r2, [pc, #404]	@ (80012bc <HAL_RCC_OscConfig+0x240>)
 8001126:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800112a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d013      	beq.n	800115c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001134:	f7ff fc60 	bl	80009f8 <HAL_GetTick>
 8001138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800113a:	e008      	b.n	800114e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800113c:	f7ff fc5c 	bl	80009f8 <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b64      	cmp	r3, #100	@ 0x64
 8001148:	d901      	bls.n	800114e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e207      	b.n	800155e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800114e:	4b5b      	ldr	r3, [pc, #364]	@ (80012bc <HAL_RCC_OscConfig+0x240>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d0f0      	beq.n	800113c <HAL_RCC_OscConfig+0xc0>
 800115a:	e014      	b.n	8001186 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800115c:	f7ff fc4c 	bl	80009f8 <HAL_GetTick>
 8001160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001162:	e008      	b.n	8001176 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001164:	f7ff fc48 	bl	80009f8 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b64      	cmp	r3, #100	@ 0x64
 8001170:	d901      	bls.n	8001176 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e1f3      	b.n	800155e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001176:	4b51      	ldr	r3, [pc, #324]	@ (80012bc <HAL_RCC_OscConfig+0x240>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d1f0      	bne.n	8001164 <HAL_RCC_OscConfig+0xe8>
 8001182:	e000      	b.n	8001186 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001184:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d063      	beq.n	800125a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001192:	4b4a      	ldr	r3, [pc, #296]	@ (80012bc <HAL_RCC_OscConfig+0x240>)
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	f003 030c 	and.w	r3, r3, #12
 800119a:	2b00      	cmp	r3, #0
 800119c:	d00b      	beq.n	80011b6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800119e:	4b47      	ldr	r3, [pc, #284]	@ (80012bc <HAL_RCC_OscConfig+0x240>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80011a6:	2b08      	cmp	r3, #8
 80011a8:	d11c      	bne.n	80011e4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011aa:	4b44      	ldr	r3, [pc, #272]	@ (80012bc <HAL_RCC_OscConfig+0x240>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d116      	bne.n	80011e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011b6:	4b41      	ldr	r3, [pc, #260]	@ (80012bc <HAL_RCC_OscConfig+0x240>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d005      	beq.n	80011ce <HAL_RCC_OscConfig+0x152>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d001      	beq.n	80011ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e1c7      	b.n	800155e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ce:	4b3b      	ldr	r3, [pc, #236]	@ (80012bc <HAL_RCC_OscConfig+0x240>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	691b      	ldr	r3, [r3, #16]
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	4937      	ldr	r1, [pc, #220]	@ (80012bc <HAL_RCC_OscConfig+0x240>)
 80011de:	4313      	orrs	r3, r2
 80011e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011e2:	e03a      	b.n	800125a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d020      	beq.n	800122e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011ec:	4b34      	ldr	r3, [pc, #208]	@ (80012c0 <HAL_RCC_OscConfig+0x244>)
 80011ee:	2201      	movs	r2, #1
 80011f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f2:	f7ff fc01 	bl	80009f8 <HAL_GetTick>
 80011f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f8:	e008      	b.n	800120c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011fa:	f7ff fbfd 	bl	80009f8 <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d901      	bls.n	800120c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e1a8      	b.n	800155e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800120c:	4b2b      	ldr	r3, [pc, #172]	@ (80012bc <HAL_RCC_OscConfig+0x240>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0302 	and.w	r3, r3, #2
 8001214:	2b00      	cmp	r3, #0
 8001216:	d0f0      	beq.n	80011fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001218:	4b28      	ldr	r3, [pc, #160]	@ (80012bc <HAL_RCC_OscConfig+0x240>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	691b      	ldr	r3, [r3, #16]
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	4925      	ldr	r1, [pc, #148]	@ (80012bc <HAL_RCC_OscConfig+0x240>)
 8001228:	4313      	orrs	r3, r2
 800122a:	600b      	str	r3, [r1, #0]
 800122c:	e015      	b.n	800125a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800122e:	4b24      	ldr	r3, [pc, #144]	@ (80012c0 <HAL_RCC_OscConfig+0x244>)
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001234:	f7ff fbe0 	bl	80009f8 <HAL_GetTick>
 8001238:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800123a:	e008      	b.n	800124e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800123c:	f7ff fbdc 	bl	80009f8 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b02      	cmp	r3, #2
 8001248:	d901      	bls.n	800124e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e187      	b.n	800155e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800124e:	4b1b      	ldr	r3, [pc, #108]	@ (80012bc <HAL_RCC_OscConfig+0x240>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d1f0      	bne.n	800123c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0308 	and.w	r3, r3, #8
 8001262:	2b00      	cmp	r3, #0
 8001264:	d036      	beq.n	80012d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d016      	beq.n	800129c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800126e:	4b15      	ldr	r3, [pc, #84]	@ (80012c4 <HAL_RCC_OscConfig+0x248>)
 8001270:	2201      	movs	r2, #1
 8001272:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001274:	f7ff fbc0 	bl	80009f8 <HAL_GetTick>
 8001278:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800127a:	e008      	b.n	800128e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800127c:	f7ff fbbc 	bl	80009f8 <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b02      	cmp	r3, #2
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e167      	b.n	800155e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800128e:	4b0b      	ldr	r3, [pc, #44]	@ (80012bc <HAL_RCC_OscConfig+0x240>)
 8001290:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d0f0      	beq.n	800127c <HAL_RCC_OscConfig+0x200>
 800129a:	e01b      	b.n	80012d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800129c:	4b09      	ldr	r3, [pc, #36]	@ (80012c4 <HAL_RCC_OscConfig+0x248>)
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a2:	f7ff fba9 	bl	80009f8 <HAL_GetTick>
 80012a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012a8:	e00e      	b.n	80012c8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012aa:	f7ff fba5 	bl	80009f8 <HAL_GetTick>
 80012ae:	4602      	mov	r2, r0
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d907      	bls.n	80012c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012b8:	2303      	movs	r3, #3
 80012ba:	e150      	b.n	800155e <HAL_RCC_OscConfig+0x4e2>
 80012bc:	40023800 	.word	0x40023800
 80012c0:	42470000 	.word	0x42470000
 80012c4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012c8:	4b88      	ldr	r3, [pc, #544]	@ (80014ec <HAL_RCC_OscConfig+0x470>)
 80012ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d1ea      	bne.n	80012aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0304 	and.w	r3, r3, #4
 80012dc:	2b00      	cmp	r3, #0
 80012de:	f000 8097 	beq.w	8001410 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012e2:	2300      	movs	r3, #0
 80012e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012e6:	4b81      	ldr	r3, [pc, #516]	@ (80014ec <HAL_RCC_OscConfig+0x470>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d10f      	bne.n	8001312 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	4b7d      	ldr	r3, [pc, #500]	@ (80014ec <HAL_RCC_OscConfig+0x470>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fa:	4a7c      	ldr	r2, [pc, #496]	@ (80014ec <HAL_RCC_OscConfig+0x470>)
 80012fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001300:	6413      	str	r3, [r2, #64]	@ 0x40
 8001302:	4b7a      	ldr	r3, [pc, #488]	@ (80014ec <HAL_RCC_OscConfig+0x470>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001306:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800130e:	2301      	movs	r3, #1
 8001310:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001312:	4b77      	ldr	r3, [pc, #476]	@ (80014f0 <HAL_RCC_OscConfig+0x474>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800131a:	2b00      	cmp	r3, #0
 800131c:	d118      	bne.n	8001350 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800131e:	4b74      	ldr	r3, [pc, #464]	@ (80014f0 <HAL_RCC_OscConfig+0x474>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a73      	ldr	r2, [pc, #460]	@ (80014f0 <HAL_RCC_OscConfig+0x474>)
 8001324:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001328:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800132a:	f7ff fb65 	bl	80009f8 <HAL_GetTick>
 800132e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001330:	e008      	b.n	8001344 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001332:	f7ff fb61 	bl	80009f8 <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b02      	cmp	r3, #2
 800133e:	d901      	bls.n	8001344 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e10c      	b.n	800155e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001344:	4b6a      	ldr	r3, [pc, #424]	@ (80014f0 <HAL_RCC_OscConfig+0x474>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800134c:	2b00      	cmp	r3, #0
 800134e:	d0f0      	beq.n	8001332 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d106      	bne.n	8001366 <HAL_RCC_OscConfig+0x2ea>
 8001358:	4b64      	ldr	r3, [pc, #400]	@ (80014ec <HAL_RCC_OscConfig+0x470>)
 800135a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800135c:	4a63      	ldr	r2, [pc, #396]	@ (80014ec <HAL_RCC_OscConfig+0x470>)
 800135e:	f043 0301 	orr.w	r3, r3, #1
 8001362:	6713      	str	r3, [r2, #112]	@ 0x70
 8001364:	e01c      	b.n	80013a0 <HAL_RCC_OscConfig+0x324>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	2b05      	cmp	r3, #5
 800136c:	d10c      	bne.n	8001388 <HAL_RCC_OscConfig+0x30c>
 800136e:	4b5f      	ldr	r3, [pc, #380]	@ (80014ec <HAL_RCC_OscConfig+0x470>)
 8001370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001372:	4a5e      	ldr	r2, [pc, #376]	@ (80014ec <HAL_RCC_OscConfig+0x470>)
 8001374:	f043 0304 	orr.w	r3, r3, #4
 8001378:	6713      	str	r3, [r2, #112]	@ 0x70
 800137a:	4b5c      	ldr	r3, [pc, #368]	@ (80014ec <HAL_RCC_OscConfig+0x470>)
 800137c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800137e:	4a5b      	ldr	r2, [pc, #364]	@ (80014ec <HAL_RCC_OscConfig+0x470>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	6713      	str	r3, [r2, #112]	@ 0x70
 8001386:	e00b      	b.n	80013a0 <HAL_RCC_OscConfig+0x324>
 8001388:	4b58      	ldr	r3, [pc, #352]	@ (80014ec <HAL_RCC_OscConfig+0x470>)
 800138a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800138c:	4a57      	ldr	r2, [pc, #348]	@ (80014ec <HAL_RCC_OscConfig+0x470>)
 800138e:	f023 0301 	bic.w	r3, r3, #1
 8001392:	6713      	str	r3, [r2, #112]	@ 0x70
 8001394:	4b55      	ldr	r3, [pc, #340]	@ (80014ec <HAL_RCC_OscConfig+0x470>)
 8001396:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001398:	4a54      	ldr	r2, [pc, #336]	@ (80014ec <HAL_RCC_OscConfig+0x470>)
 800139a:	f023 0304 	bic.w	r3, r3, #4
 800139e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d015      	beq.n	80013d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013a8:	f7ff fb26 	bl	80009f8 <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ae:	e00a      	b.n	80013c6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013b0:	f7ff fb22 	bl	80009f8 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013be:	4293      	cmp	r3, r2
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e0cb      	b.n	800155e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013c6:	4b49      	ldr	r3, [pc, #292]	@ (80014ec <HAL_RCC_OscConfig+0x470>)
 80013c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d0ee      	beq.n	80013b0 <HAL_RCC_OscConfig+0x334>
 80013d2:	e014      	b.n	80013fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d4:	f7ff fb10 	bl	80009f8 <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013da:	e00a      	b.n	80013f2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013dc:	f7ff fb0c 	bl	80009f8 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e0b5      	b.n	800155e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013f2:	4b3e      	ldr	r3, [pc, #248]	@ (80014ec <HAL_RCC_OscConfig+0x470>)
 80013f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1ee      	bne.n	80013dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80013fe:	7dfb      	ldrb	r3, [r7, #23]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d105      	bne.n	8001410 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001404:	4b39      	ldr	r3, [pc, #228]	@ (80014ec <HAL_RCC_OscConfig+0x470>)
 8001406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001408:	4a38      	ldr	r2, [pc, #224]	@ (80014ec <HAL_RCC_OscConfig+0x470>)
 800140a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800140e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	2b00      	cmp	r3, #0
 8001416:	f000 80a1 	beq.w	800155c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800141a:	4b34      	ldr	r3, [pc, #208]	@ (80014ec <HAL_RCC_OscConfig+0x470>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	f003 030c 	and.w	r3, r3, #12
 8001422:	2b08      	cmp	r3, #8
 8001424:	d05c      	beq.n	80014e0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	2b02      	cmp	r3, #2
 800142c:	d141      	bne.n	80014b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800142e:	4b31      	ldr	r3, [pc, #196]	@ (80014f4 <HAL_RCC_OscConfig+0x478>)
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001434:	f7ff fae0 	bl	80009f8 <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800143c:	f7ff fadc 	bl	80009f8 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e087      	b.n	800155e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800144e:	4b27      	ldr	r3, [pc, #156]	@ (80014ec <HAL_RCC_OscConfig+0x470>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1f0      	bne.n	800143c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	69da      	ldr	r2, [r3, #28]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a1b      	ldr	r3, [r3, #32]
 8001462:	431a      	orrs	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001468:	019b      	lsls	r3, r3, #6
 800146a:	431a      	orrs	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001470:	085b      	lsrs	r3, r3, #1
 8001472:	3b01      	subs	r3, #1
 8001474:	041b      	lsls	r3, r3, #16
 8001476:	431a      	orrs	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800147c:	061b      	lsls	r3, r3, #24
 800147e:	491b      	ldr	r1, [pc, #108]	@ (80014ec <HAL_RCC_OscConfig+0x470>)
 8001480:	4313      	orrs	r3, r2
 8001482:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001484:	4b1b      	ldr	r3, [pc, #108]	@ (80014f4 <HAL_RCC_OscConfig+0x478>)
 8001486:	2201      	movs	r2, #1
 8001488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148a:	f7ff fab5 	bl	80009f8 <HAL_GetTick>
 800148e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001490:	e008      	b.n	80014a4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001492:	f7ff fab1 	bl	80009f8 <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b02      	cmp	r3, #2
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e05c      	b.n	800155e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014a4:	4b11      	ldr	r3, [pc, #68]	@ (80014ec <HAL_RCC_OscConfig+0x470>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d0f0      	beq.n	8001492 <HAL_RCC_OscConfig+0x416>
 80014b0:	e054      	b.n	800155c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014b2:	4b10      	ldr	r3, [pc, #64]	@ (80014f4 <HAL_RCC_OscConfig+0x478>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b8:	f7ff fa9e 	bl	80009f8 <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014c0:	f7ff fa9a 	bl	80009f8 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e045      	b.n	800155e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014d2:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <HAL_RCC_OscConfig+0x470>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d1f0      	bne.n	80014c0 <HAL_RCC_OscConfig+0x444>
 80014de:	e03d      	b.n	800155c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d107      	bne.n	80014f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e038      	b.n	800155e <HAL_RCC_OscConfig+0x4e2>
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40007000 	.word	0x40007000
 80014f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001568 <HAL_RCC_OscConfig+0x4ec>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d028      	beq.n	8001558 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001510:	429a      	cmp	r2, r3
 8001512:	d121      	bne.n	8001558 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800151e:	429a      	cmp	r2, r3
 8001520:	d11a      	bne.n	8001558 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001528:	4013      	ands	r3, r2
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800152e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001530:	4293      	cmp	r3, r2
 8001532:	d111      	bne.n	8001558 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800153e:	085b      	lsrs	r3, r3, #1
 8001540:	3b01      	subs	r3, #1
 8001542:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001544:	429a      	cmp	r2, r3
 8001546:	d107      	bne.n	8001558 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001552:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001554:	429a      	cmp	r2, r3
 8001556:	d001      	beq.n	800155c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e000      	b.n	800155e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3718      	adds	r7, #24
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40023800 	.word	0x40023800

0800156c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d101      	bne.n	8001580 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e0cc      	b.n	800171a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001580:	4b68      	ldr	r3, [pc, #416]	@ (8001724 <HAL_RCC_ClockConfig+0x1b8>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 030f 	and.w	r3, r3, #15
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	429a      	cmp	r2, r3
 800158c:	d90c      	bls.n	80015a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800158e:	4b65      	ldr	r3, [pc, #404]	@ (8001724 <HAL_RCC_ClockConfig+0x1b8>)
 8001590:	683a      	ldr	r2, [r7, #0]
 8001592:	b2d2      	uxtb	r2, r2
 8001594:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001596:	4b63      	ldr	r3, [pc, #396]	@ (8001724 <HAL_RCC_ClockConfig+0x1b8>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 030f 	and.w	r3, r3, #15
 800159e:	683a      	ldr	r2, [r7, #0]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d001      	beq.n	80015a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e0b8      	b.n	800171a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d020      	beq.n	80015f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0304 	and.w	r3, r3, #4
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d005      	beq.n	80015cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015c0:	4b59      	ldr	r3, [pc, #356]	@ (8001728 <HAL_RCC_ClockConfig+0x1bc>)
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	4a58      	ldr	r2, [pc, #352]	@ (8001728 <HAL_RCC_ClockConfig+0x1bc>)
 80015c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80015ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0308 	and.w	r3, r3, #8
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d005      	beq.n	80015e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015d8:	4b53      	ldr	r3, [pc, #332]	@ (8001728 <HAL_RCC_ClockConfig+0x1bc>)
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	4a52      	ldr	r2, [pc, #328]	@ (8001728 <HAL_RCC_ClockConfig+0x1bc>)
 80015de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80015e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015e4:	4b50      	ldr	r3, [pc, #320]	@ (8001728 <HAL_RCC_ClockConfig+0x1bc>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	494d      	ldr	r1, [pc, #308]	@ (8001728 <HAL_RCC_ClockConfig+0x1bc>)
 80015f2:	4313      	orrs	r3, r2
 80015f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d044      	beq.n	800168c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d107      	bne.n	800161a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800160a:	4b47      	ldr	r3, [pc, #284]	@ (8001728 <HAL_RCC_ClockConfig+0x1bc>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d119      	bne.n	800164a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e07f      	b.n	800171a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2b02      	cmp	r3, #2
 8001620:	d003      	beq.n	800162a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001626:	2b03      	cmp	r3, #3
 8001628:	d107      	bne.n	800163a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800162a:	4b3f      	ldr	r3, [pc, #252]	@ (8001728 <HAL_RCC_ClockConfig+0x1bc>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d109      	bne.n	800164a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e06f      	b.n	800171a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800163a:	4b3b      	ldr	r3, [pc, #236]	@ (8001728 <HAL_RCC_ClockConfig+0x1bc>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d101      	bne.n	800164a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e067      	b.n	800171a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800164a:	4b37      	ldr	r3, [pc, #220]	@ (8001728 <HAL_RCC_ClockConfig+0x1bc>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f023 0203 	bic.w	r2, r3, #3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	4934      	ldr	r1, [pc, #208]	@ (8001728 <HAL_RCC_ClockConfig+0x1bc>)
 8001658:	4313      	orrs	r3, r2
 800165a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800165c:	f7ff f9cc 	bl	80009f8 <HAL_GetTick>
 8001660:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001662:	e00a      	b.n	800167a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001664:	f7ff f9c8 	bl	80009f8 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001672:	4293      	cmp	r3, r2
 8001674:	d901      	bls.n	800167a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e04f      	b.n	800171a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800167a:	4b2b      	ldr	r3, [pc, #172]	@ (8001728 <HAL_RCC_ClockConfig+0x1bc>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f003 020c 	and.w	r2, r3, #12
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	429a      	cmp	r2, r3
 800168a:	d1eb      	bne.n	8001664 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800168c:	4b25      	ldr	r3, [pc, #148]	@ (8001724 <HAL_RCC_ClockConfig+0x1b8>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 030f 	and.w	r3, r3, #15
 8001694:	683a      	ldr	r2, [r7, #0]
 8001696:	429a      	cmp	r2, r3
 8001698:	d20c      	bcs.n	80016b4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800169a:	4b22      	ldr	r3, [pc, #136]	@ (8001724 <HAL_RCC_ClockConfig+0x1b8>)
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	b2d2      	uxtb	r2, r2
 80016a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016a2:	4b20      	ldr	r3, [pc, #128]	@ (8001724 <HAL_RCC_ClockConfig+0x1b8>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 030f 	and.w	r3, r3, #15
 80016aa:	683a      	ldr	r2, [r7, #0]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d001      	beq.n	80016b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e032      	b.n	800171a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d008      	beq.n	80016d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016c0:	4b19      	ldr	r3, [pc, #100]	@ (8001728 <HAL_RCC_ClockConfig+0x1bc>)
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	4916      	ldr	r1, [pc, #88]	@ (8001728 <HAL_RCC_ClockConfig+0x1bc>)
 80016ce:	4313      	orrs	r3, r2
 80016d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0308 	and.w	r3, r3, #8
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d009      	beq.n	80016f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016de:	4b12      	ldr	r3, [pc, #72]	@ (8001728 <HAL_RCC_ClockConfig+0x1bc>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	691b      	ldr	r3, [r3, #16]
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	490e      	ldr	r1, [pc, #56]	@ (8001728 <HAL_RCC_ClockConfig+0x1bc>)
 80016ee:	4313      	orrs	r3, r2
 80016f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016f2:	f000 f821 	bl	8001738 <HAL_RCC_GetSysClockFreq>
 80016f6:	4602      	mov	r2, r0
 80016f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001728 <HAL_RCC_ClockConfig+0x1bc>)
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	091b      	lsrs	r3, r3, #4
 80016fe:	f003 030f 	and.w	r3, r3, #15
 8001702:	490a      	ldr	r1, [pc, #40]	@ (800172c <HAL_RCC_ClockConfig+0x1c0>)
 8001704:	5ccb      	ldrb	r3, [r1, r3]
 8001706:	fa22 f303 	lsr.w	r3, r2, r3
 800170a:	4a09      	ldr	r2, [pc, #36]	@ (8001730 <HAL_RCC_ClockConfig+0x1c4>)
 800170c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800170e:	4b09      	ldr	r3, [pc, #36]	@ (8001734 <HAL_RCC_ClockConfig+0x1c8>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff f85e 	bl	80007d4 <HAL_InitTick>

  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40023c00 	.word	0x40023c00
 8001728:	40023800 	.word	0x40023800
 800172c:	0800560c 	.word	0x0800560c
 8001730:	20000000 	.word	0x20000000
 8001734:	20000004 	.word	0x20000004

08001738 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001738:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800173c:	b090      	sub	sp, #64	@ 0x40
 800173e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001740:	2300      	movs	r3, #0
 8001742:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001744:	2300      	movs	r3, #0
 8001746:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001748:	2300      	movs	r3, #0
 800174a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800174c:	2300      	movs	r3, #0
 800174e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001750:	4b59      	ldr	r3, [pc, #356]	@ (80018b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f003 030c 	and.w	r3, r3, #12
 8001758:	2b08      	cmp	r3, #8
 800175a:	d00d      	beq.n	8001778 <HAL_RCC_GetSysClockFreq+0x40>
 800175c:	2b08      	cmp	r3, #8
 800175e:	f200 80a1 	bhi.w	80018a4 <HAL_RCC_GetSysClockFreq+0x16c>
 8001762:	2b00      	cmp	r3, #0
 8001764:	d002      	beq.n	800176c <HAL_RCC_GetSysClockFreq+0x34>
 8001766:	2b04      	cmp	r3, #4
 8001768:	d003      	beq.n	8001772 <HAL_RCC_GetSysClockFreq+0x3a>
 800176a:	e09b      	b.n	80018a4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800176c:	4b53      	ldr	r3, [pc, #332]	@ (80018bc <HAL_RCC_GetSysClockFreq+0x184>)
 800176e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001770:	e09b      	b.n	80018aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001772:	4b53      	ldr	r3, [pc, #332]	@ (80018c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001774:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001776:	e098      	b.n	80018aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001778:	4b4f      	ldr	r3, [pc, #316]	@ (80018b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001780:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001782:	4b4d      	ldr	r3, [pc, #308]	@ (80018b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d028      	beq.n	80017e0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800178e:	4b4a      	ldr	r3, [pc, #296]	@ (80018b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	099b      	lsrs	r3, r3, #6
 8001794:	2200      	movs	r2, #0
 8001796:	623b      	str	r3, [r7, #32]
 8001798:	627a      	str	r2, [r7, #36]	@ 0x24
 800179a:	6a3b      	ldr	r3, [r7, #32]
 800179c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80017a0:	2100      	movs	r1, #0
 80017a2:	4b47      	ldr	r3, [pc, #284]	@ (80018c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80017a4:	fb03 f201 	mul.w	r2, r3, r1
 80017a8:	2300      	movs	r3, #0
 80017aa:	fb00 f303 	mul.w	r3, r0, r3
 80017ae:	4413      	add	r3, r2
 80017b0:	4a43      	ldr	r2, [pc, #268]	@ (80018c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80017b2:	fba0 1202 	umull	r1, r2, r0, r2
 80017b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80017b8:	460a      	mov	r2, r1
 80017ba:	62ba      	str	r2, [r7, #40]	@ 0x28
 80017bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017be:	4413      	add	r3, r2
 80017c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017c4:	2200      	movs	r2, #0
 80017c6:	61bb      	str	r3, [r7, #24]
 80017c8:	61fa      	str	r2, [r7, #28]
 80017ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80017d2:	f7fe fd0d 	bl	80001f0 <__aeabi_uldivmod>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	4613      	mov	r3, r2
 80017dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80017de:	e053      	b.n	8001888 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017e0:	4b35      	ldr	r3, [pc, #212]	@ (80018b8 <HAL_RCC_GetSysClockFreq+0x180>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	099b      	lsrs	r3, r3, #6
 80017e6:	2200      	movs	r2, #0
 80017e8:	613b      	str	r3, [r7, #16]
 80017ea:	617a      	str	r2, [r7, #20]
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80017f2:	f04f 0b00 	mov.w	fp, #0
 80017f6:	4652      	mov	r2, sl
 80017f8:	465b      	mov	r3, fp
 80017fa:	f04f 0000 	mov.w	r0, #0
 80017fe:	f04f 0100 	mov.w	r1, #0
 8001802:	0159      	lsls	r1, r3, #5
 8001804:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001808:	0150      	lsls	r0, r2, #5
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	ebb2 080a 	subs.w	r8, r2, sl
 8001812:	eb63 090b 	sbc.w	r9, r3, fp
 8001816:	f04f 0200 	mov.w	r2, #0
 800181a:	f04f 0300 	mov.w	r3, #0
 800181e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001822:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001826:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800182a:	ebb2 0408 	subs.w	r4, r2, r8
 800182e:	eb63 0509 	sbc.w	r5, r3, r9
 8001832:	f04f 0200 	mov.w	r2, #0
 8001836:	f04f 0300 	mov.w	r3, #0
 800183a:	00eb      	lsls	r3, r5, #3
 800183c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001840:	00e2      	lsls	r2, r4, #3
 8001842:	4614      	mov	r4, r2
 8001844:	461d      	mov	r5, r3
 8001846:	eb14 030a 	adds.w	r3, r4, sl
 800184a:	603b      	str	r3, [r7, #0]
 800184c:	eb45 030b 	adc.w	r3, r5, fp
 8001850:	607b      	str	r3, [r7, #4]
 8001852:	f04f 0200 	mov.w	r2, #0
 8001856:	f04f 0300 	mov.w	r3, #0
 800185a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800185e:	4629      	mov	r1, r5
 8001860:	028b      	lsls	r3, r1, #10
 8001862:	4621      	mov	r1, r4
 8001864:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001868:	4621      	mov	r1, r4
 800186a:	028a      	lsls	r2, r1, #10
 800186c:	4610      	mov	r0, r2
 800186e:	4619      	mov	r1, r3
 8001870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001872:	2200      	movs	r2, #0
 8001874:	60bb      	str	r3, [r7, #8]
 8001876:	60fa      	str	r2, [r7, #12]
 8001878:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800187c:	f7fe fcb8 	bl	80001f0 <__aeabi_uldivmod>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	4613      	mov	r3, r2
 8001886:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001888:	4b0b      	ldr	r3, [pc, #44]	@ (80018b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	0c1b      	lsrs	r3, r3, #16
 800188e:	f003 0303 	and.w	r3, r3, #3
 8001892:	3301      	adds	r3, #1
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001898:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800189a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800189c:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80018a2:	e002      	b.n	80018aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018a4:	4b05      	ldr	r3, [pc, #20]	@ (80018bc <HAL_RCC_GetSysClockFreq+0x184>)
 80018a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80018a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3740      	adds	r7, #64	@ 0x40
 80018b0:	46bd      	mov	sp, r7
 80018b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018b6:	bf00      	nop
 80018b8:	40023800 	.word	0x40023800
 80018bc:	00f42400 	.word	0x00f42400
 80018c0:	017d7840 	.word	0x017d7840

080018c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018c8:	4b03      	ldr	r3, [pc, #12]	@ (80018d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80018ca:	681b      	ldr	r3, [r3, #0]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	20000000 	.word	0x20000000

080018dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018e0:	f7ff fff0 	bl	80018c4 <HAL_RCC_GetHCLKFreq>
 80018e4:	4602      	mov	r2, r0
 80018e6:	4b05      	ldr	r3, [pc, #20]	@ (80018fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	0b5b      	lsrs	r3, r3, #13
 80018ec:	f003 0307 	and.w	r3, r3, #7
 80018f0:	4903      	ldr	r1, [pc, #12]	@ (8001900 <HAL_RCC_GetPCLK2Freq+0x24>)
 80018f2:	5ccb      	ldrb	r3, [r1, r3]
 80018f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40023800 	.word	0x40023800
 8001900:	0800561c 	.word	0x0800561c

08001904 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	220f      	movs	r2, #15
 8001912:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001914:	4b12      	ldr	r3, [pc, #72]	@ (8001960 <HAL_RCC_GetClockConfig+0x5c>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f003 0203 	and.w	r2, r3, #3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001920:	4b0f      	ldr	r3, [pc, #60]	@ (8001960 <HAL_RCC_GetClockConfig+0x5c>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800192c:	4b0c      	ldr	r3, [pc, #48]	@ (8001960 <HAL_RCC_GetClockConfig+0x5c>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001938:	4b09      	ldr	r3, [pc, #36]	@ (8001960 <HAL_RCC_GetClockConfig+0x5c>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	08db      	lsrs	r3, r3, #3
 800193e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001946:	4b07      	ldr	r3, [pc, #28]	@ (8001964 <HAL_RCC_GetClockConfig+0x60>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 020f 	and.w	r2, r3, #15
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	601a      	str	r2, [r3, #0]
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	40023800 	.word	0x40023800
 8001964:	40023c00 	.word	0x40023c00

08001968 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e041      	b.n	80019fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d106      	bne.n	8001994 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f000 f839 	bl	8001a06 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2202      	movs	r2, #2
 8001998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3304      	adds	r3, #4
 80019a4:	4619      	mov	r1, r3
 80019a6:	4610      	mov	r0, r2
 80019a8:	f000 f9c0 	bl	8001d2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b083      	sub	sp, #12
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
	...

08001a1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d001      	beq.n	8001a34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e04e      	b.n	8001ad2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2202      	movs	r2, #2
 8001a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68da      	ldr	r2, [r3, #12]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f042 0201 	orr.w	r2, r2, #1
 8001a4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a23      	ldr	r2, [pc, #140]	@ (8001ae0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d022      	beq.n	8001a9c <HAL_TIM_Base_Start_IT+0x80>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a5e:	d01d      	beq.n	8001a9c <HAL_TIM_Base_Start_IT+0x80>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a1f      	ldr	r2, [pc, #124]	@ (8001ae4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d018      	beq.n	8001a9c <HAL_TIM_Base_Start_IT+0x80>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ae8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d013      	beq.n	8001a9c <HAL_TIM_Base_Start_IT+0x80>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a1c      	ldr	r2, [pc, #112]	@ (8001aec <HAL_TIM_Base_Start_IT+0xd0>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d00e      	beq.n	8001a9c <HAL_TIM_Base_Start_IT+0x80>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a1b      	ldr	r2, [pc, #108]	@ (8001af0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d009      	beq.n	8001a9c <HAL_TIM_Base_Start_IT+0x80>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a19      	ldr	r2, [pc, #100]	@ (8001af4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d004      	beq.n	8001a9c <HAL_TIM_Base_Start_IT+0x80>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a18      	ldr	r2, [pc, #96]	@ (8001af8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d111      	bne.n	8001ac0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2b06      	cmp	r3, #6
 8001aac:	d010      	beq.n	8001ad0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f042 0201 	orr.w	r2, r2, #1
 8001abc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001abe:	e007      	b.n	8001ad0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f042 0201 	orr.w	r2, r2, #1
 8001ace:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3714      	adds	r7, #20
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	40010000 	.word	0x40010000
 8001ae4:	40000400 	.word	0x40000400
 8001ae8:	40000800 	.word	0x40000800
 8001aec:	40000c00 	.word	0x40000c00
 8001af0:	40010400 	.word	0x40010400
 8001af4:	40014000 	.word	0x40014000
 8001af8:	40001800 	.word	0x40001800

08001afc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	691b      	ldr	r3, [r3, #16]
 8001b12:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d020      	beq.n	8001b60 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d01b      	beq.n	8001b60 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f06f 0202 	mvn.w	r2, #2
 8001b30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2201      	movs	r2, #1
 8001b36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	f003 0303 	and.w	r3, r3, #3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 f8d2 	bl	8001cf0 <HAL_TIM_IC_CaptureCallback>
 8001b4c:	e005      	b.n	8001b5a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 f8c4 	bl	8001cdc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f000 f8d5 	bl	8001d04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	f003 0304 	and.w	r3, r3, #4
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d020      	beq.n	8001bac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f003 0304 	and.w	r3, r3, #4
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d01b      	beq.n	8001bac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f06f 0204 	mvn.w	r2, #4
 8001b7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2202      	movs	r2, #2
 8001b82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 f8ac 	bl	8001cf0 <HAL_TIM_IC_CaptureCallback>
 8001b98:	e005      	b.n	8001ba6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 f89e 	bl	8001cdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f000 f8af 	bl	8001d04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	f003 0308 	and.w	r3, r3, #8
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d020      	beq.n	8001bf8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f003 0308 	and.w	r3, r3, #8
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d01b      	beq.n	8001bf8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f06f 0208 	mvn.w	r2, #8
 8001bc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2204      	movs	r2, #4
 8001bce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 f886 	bl	8001cf0 <HAL_TIM_IC_CaptureCallback>
 8001be4:	e005      	b.n	8001bf2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 f878 	bl	8001cdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 f889 	bl	8001d04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	f003 0310 	and.w	r3, r3, #16
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d020      	beq.n	8001c44 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f003 0310 	and.w	r3, r3, #16
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d01b      	beq.n	8001c44 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f06f 0210 	mvn.w	r2, #16
 8001c14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2208      	movs	r2, #8
 8001c1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d003      	beq.n	8001c32 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 f860 	bl	8001cf0 <HAL_TIM_IC_CaptureCallback>
 8001c30:	e005      	b.n	8001c3e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 f852 	bl	8001cdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 f863 	bl	8001d04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d00c      	beq.n	8001c68 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d007      	beq.n	8001c68 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f06f 0201 	mvn.w	r2, #1
 8001c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7fe fd72 	bl	800074c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00c      	beq.n	8001c8c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d007      	beq.n	8001c8c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f906 	bl	8001e98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d00c      	beq.n	8001cb0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d007      	beq.n	8001cb0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 f834 	bl	8001d18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	f003 0320 	and.w	r3, r3, #32
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00c      	beq.n	8001cd4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f003 0320 	and.w	r3, r3, #32
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d007      	beq.n	8001cd4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f06f 0220 	mvn.w	r2, #32
 8001ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f8d8 	bl	8001e84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001cd4:	bf00      	nop
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a46      	ldr	r2, [pc, #280]	@ (8001e58 <TIM_Base_SetConfig+0x12c>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d013      	beq.n	8001d6c <TIM_Base_SetConfig+0x40>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d4a:	d00f      	beq.n	8001d6c <TIM_Base_SetConfig+0x40>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a43      	ldr	r2, [pc, #268]	@ (8001e5c <TIM_Base_SetConfig+0x130>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d00b      	beq.n	8001d6c <TIM_Base_SetConfig+0x40>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a42      	ldr	r2, [pc, #264]	@ (8001e60 <TIM_Base_SetConfig+0x134>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d007      	beq.n	8001d6c <TIM_Base_SetConfig+0x40>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4a41      	ldr	r2, [pc, #260]	@ (8001e64 <TIM_Base_SetConfig+0x138>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d003      	beq.n	8001d6c <TIM_Base_SetConfig+0x40>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a40      	ldr	r2, [pc, #256]	@ (8001e68 <TIM_Base_SetConfig+0x13c>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d108      	bne.n	8001d7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	68fa      	ldr	r2, [r7, #12]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a35      	ldr	r2, [pc, #212]	@ (8001e58 <TIM_Base_SetConfig+0x12c>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d02b      	beq.n	8001dde <TIM_Base_SetConfig+0xb2>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d8c:	d027      	beq.n	8001dde <TIM_Base_SetConfig+0xb2>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a32      	ldr	r2, [pc, #200]	@ (8001e5c <TIM_Base_SetConfig+0x130>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d023      	beq.n	8001dde <TIM_Base_SetConfig+0xb2>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a31      	ldr	r2, [pc, #196]	@ (8001e60 <TIM_Base_SetConfig+0x134>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d01f      	beq.n	8001dde <TIM_Base_SetConfig+0xb2>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a30      	ldr	r2, [pc, #192]	@ (8001e64 <TIM_Base_SetConfig+0x138>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d01b      	beq.n	8001dde <TIM_Base_SetConfig+0xb2>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a2f      	ldr	r2, [pc, #188]	@ (8001e68 <TIM_Base_SetConfig+0x13c>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d017      	beq.n	8001dde <TIM_Base_SetConfig+0xb2>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a2e      	ldr	r2, [pc, #184]	@ (8001e6c <TIM_Base_SetConfig+0x140>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d013      	beq.n	8001dde <TIM_Base_SetConfig+0xb2>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a2d      	ldr	r2, [pc, #180]	@ (8001e70 <TIM_Base_SetConfig+0x144>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d00f      	beq.n	8001dde <TIM_Base_SetConfig+0xb2>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a2c      	ldr	r2, [pc, #176]	@ (8001e74 <TIM_Base_SetConfig+0x148>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d00b      	beq.n	8001dde <TIM_Base_SetConfig+0xb2>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a2b      	ldr	r2, [pc, #172]	@ (8001e78 <TIM_Base_SetConfig+0x14c>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d007      	beq.n	8001dde <TIM_Base_SetConfig+0xb2>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a2a      	ldr	r2, [pc, #168]	@ (8001e7c <TIM_Base_SetConfig+0x150>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d003      	beq.n	8001dde <TIM_Base_SetConfig+0xb2>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a29      	ldr	r2, [pc, #164]	@ (8001e80 <TIM_Base_SetConfig+0x154>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d108      	bne.n	8001df0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001de4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a10      	ldr	r2, [pc, #64]	@ (8001e58 <TIM_Base_SetConfig+0x12c>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d003      	beq.n	8001e24 <TIM_Base_SetConfig+0xf8>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a12      	ldr	r2, [pc, #72]	@ (8001e68 <TIM_Base_SetConfig+0x13c>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d103      	bne.n	8001e2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	691a      	ldr	r2, [r3, #16]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d105      	bne.n	8001e4a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	f023 0201 	bic.w	r2, r3, #1
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	611a      	str	r2, [r3, #16]
  }
}
 8001e4a:	bf00      	nop
 8001e4c:	3714      	adds	r7, #20
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	40010000 	.word	0x40010000
 8001e5c:	40000400 	.word	0x40000400
 8001e60:	40000800 	.word	0x40000800
 8001e64:	40000c00 	.word	0x40000c00
 8001e68:	40010400 	.word	0x40010400
 8001e6c:	40014000 	.word	0x40014000
 8001e70:	40014400 	.word	0x40014400
 8001e74:	40014800 	.word	0x40014800
 8001e78:	40001800 	.word	0x40001800
 8001e7c:	40001c00 	.word	0x40001c00
 8001e80:	40002000 	.word	0x40002000

08001e84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <__NVIC_SetPriority>:
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	6039      	str	r1, [r7, #0]
 8001eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	db0a      	blt.n	8001ed6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	490c      	ldr	r1, [pc, #48]	@ (8001ef8 <__NVIC_SetPriority+0x4c>)
 8001ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eca:	0112      	lsls	r2, r2, #4
 8001ecc:	b2d2      	uxtb	r2, r2
 8001ece:	440b      	add	r3, r1
 8001ed0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001ed4:	e00a      	b.n	8001eec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	4908      	ldr	r1, [pc, #32]	@ (8001efc <__NVIC_SetPriority+0x50>)
 8001edc:	79fb      	ldrb	r3, [r7, #7]
 8001ede:	f003 030f 	and.w	r3, r3, #15
 8001ee2:	3b04      	subs	r3, #4
 8001ee4:	0112      	lsls	r2, r2, #4
 8001ee6:	b2d2      	uxtb	r2, r2
 8001ee8:	440b      	add	r3, r1
 8001eea:	761a      	strb	r2, [r3, #24]
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	e000e100 	.word	0xe000e100
 8001efc:	e000ed00 	.word	0xe000ed00

08001f00 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001f04:	4b05      	ldr	r3, [pc, #20]	@ (8001f1c <SysTick_Handler+0x1c>)
 8001f06:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001f08:	f002 f8c2 	bl	8004090 <xTaskGetSchedulerState>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d001      	beq.n	8001f16 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001f12:	f002 ffb9 	bl	8004e88 <xPortSysTickHandler>
  }
}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	e000e010 	.word	0xe000e010

08001f20 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001f24:	2100      	movs	r1, #0
 8001f26:	f06f 0004 	mvn.w	r0, #4
 8001f2a:	f7ff ffbf 	bl	8001eac <__NVIC_SetPriority>
#endif
}
 8001f2e:	bf00      	nop
 8001f30:	bd80      	pop	{r7, pc}
	...

08001f34 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f3a:	f3ef 8305 	mrs	r3, IPSR
 8001f3e:	603b      	str	r3, [r7, #0]
  return(result);
 8001f40:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001f46:	f06f 0305 	mvn.w	r3, #5
 8001f4a:	607b      	str	r3, [r7, #4]
 8001f4c:	e00c      	b.n	8001f68 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f78 <osKernelInitialize+0x44>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d105      	bne.n	8001f62 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001f56:	4b08      	ldr	r3, [pc, #32]	@ (8001f78 <osKernelInitialize+0x44>)
 8001f58:	2201      	movs	r2, #1
 8001f5a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	607b      	str	r3, [r7, #4]
 8001f60:	e002      	b.n	8001f68 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001f62:	f04f 33ff 	mov.w	r3, #4294967295
 8001f66:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001f68:	687b      	ldr	r3, [r7, #4]
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	200000d4 	.word	0x200000d4

08001f7c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f82:	f3ef 8305 	mrs	r3, IPSR
 8001f86:	603b      	str	r3, [r7, #0]
  return(result);
 8001f88:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <osKernelStart+0x1a>
    stat = osErrorISR;
 8001f8e:	f06f 0305 	mvn.w	r3, #5
 8001f92:	607b      	str	r3, [r7, #4]
 8001f94:	e010      	b.n	8001fb8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001f96:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc4 <osKernelStart+0x48>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d109      	bne.n	8001fb2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001f9e:	f7ff ffbf 	bl	8001f20 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001fa2:	4b08      	ldr	r3, [pc, #32]	@ (8001fc4 <osKernelStart+0x48>)
 8001fa4:	2202      	movs	r2, #2
 8001fa6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001fa8:	f001 fc0e 	bl	80037c8 <vTaskStartScheduler>
      stat = osOK;
 8001fac:	2300      	movs	r3, #0
 8001fae:	607b      	str	r3, [r7, #4]
 8001fb0:	e002      	b.n	8001fb8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001fb8:	687b      	ldr	r3, [r7, #4]
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	200000d4 	.word	0x200000d4

08001fc8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08e      	sub	sp, #56	@ 0x38
 8001fcc:	af04      	add	r7, sp, #16
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001fd8:	f3ef 8305 	mrs	r3, IPSR
 8001fdc:	617b      	str	r3, [r7, #20]
  return(result);
 8001fde:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d17e      	bne.n	80020e2 <osThreadNew+0x11a>
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d07b      	beq.n	80020e2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001fea:	2380      	movs	r3, #128	@ 0x80
 8001fec:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001fee:	2318      	movs	r3, #24
 8001ff0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8001ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8001ffa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d045      	beq.n	800208e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d002      	beq.n	8002010 <osThreadNew+0x48>
        name = attr->name;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d002      	beq.n	800201e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d008      	beq.n	8002036 <osThreadNew+0x6e>
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	2b38      	cmp	r3, #56	@ 0x38
 8002028:	d805      	bhi.n	8002036 <osThreadNew+0x6e>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <osThreadNew+0x72>
        return (NULL);
 8002036:	2300      	movs	r3, #0
 8002038:	e054      	b.n	80020e4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	089b      	lsrs	r3, r3, #2
 8002048:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00e      	beq.n	8002070 <osThreadNew+0xa8>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	2ba7      	cmp	r3, #167	@ 0xa7
 8002058:	d90a      	bls.n	8002070 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800205e:	2b00      	cmp	r3, #0
 8002060:	d006      	beq.n	8002070 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d002      	beq.n	8002070 <osThreadNew+0xa8>
        mem = 1;
 800206a:	2301      	movs	r3, #1
 800206c:	61bb      	str	r3, [r7, #24]
 800206e:	e010      	b.n	8002092 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d10c      	bne.n	8002092 <osThreadNew+0xca>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d108      	bne.n	8002092 <osThreadNew+0xca>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d104      	bne.n	8002092 <osThreadNew+0xca>
          mem = 0;
 8002088:	2300      	movs	r3, #0
 800208a:	61bb      	str	r3, [r7, #24]
 800208c:	e001      	b.n	8002092 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800208e:	2300      	movs	r3, #0
 8002090:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d110      	bne.n	80020ba <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80020a0:	9202      	str	r2, [sp, #8]
 80020a2:	9301      	str	r3, [sp, #4]
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	9300      	str	r3, [sp, #0]
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	6a3a      	ldr	r2, [r7, #32]
 80020ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80020ae:	68f8      	ldr	r0, [r7, #12]
 80020b0:	f001 f996 	bl	80033e0 <xTaskCreateStatic>
 80020b4:	4603      	mov	r3, r0
 80020b6:	613b      	str	r3, [r7, #16]
 80020b8:	e013      	b.n	80020e2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d110      	bne.n	80020e2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80020c0:	6a3b      	ldr	r3, [r7, #32]
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	f107 0310 	add.w	r3, r7, #16
 80020c8:	9301      	str	r3, [sp, #4]
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	9300      	str	r3, [sp, #0]
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f001 f9e4 	bl	80034a0 <xTaskCreate>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d001      	beq.n	80020e2 <osThreadNew+0x11a>
            hTask = NULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80020e2:	693b      	ldr	r3, [r7, #16]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3728      	adds	r7, #40	@ 0x28
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80020f4:	f3ef 8305 	mrs	r3, IPSR
 80020f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80020fa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d003      	beq.n	8002108 <osDelay+0x1c>
    stat = osErrorISR;
 8002100:	f06f 0305 	mvn.w	r3, #5
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	e007      	b.n	8002118 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002108:	2300      	movs	r3, #0
 800210a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d002      	beq.n	8002118 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f001 fb22 	bl	800375c <vTaskDelay>
    }
  }

  return (stat);
 8002118:	68fb      	ldr	r3, [r7, #12]
}
 800211a:	4618      	mov	r0, r3
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8002122:	b580      	push	{r7, lr}
 8002124:	b08a      	sub	sp, #40	@ 0x28
 8002126:	af02      	add	r7, sp, #8
 8002128:	60f8      	str	r0, [r7, #12]
 800212a:	60b9      	str	r1, [r7, #8]
 800212c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800212e:	2300      	movs	r3, #0
 8002130:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002132:	f3ef 8305 	mrs	r3, IPSR
 8002136:	613b      	str	r3, [r7, #16]
  return(result);
 8002138:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800213a:	2b00      	cmp	r3, #0
 800213c:	d175      	bne.n	800222a <osSemaphoreNew+0x108>
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d072      	beq.n	800222a <osSemaphoreNew+0x108>
 8002144:	68ba      	ldr	r2, [r7, #8]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	429a      	cmp	r2, r3
 800214a:	d86e      	bhi.n	800222a <osSemaphoreNew+0x108>
    mem = -1;
 800214c:	f04f 33ff 	mov.w	r3, #4294967295
 8002150:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d015      	beq.n	8002184 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d006      	beq.n	800216e <osSemaphoreNew+0x4c>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	2b4f      	cmp	r3, #79	@ 0x4f
 8002166:	d902      	bls.n	800216e <osSemaphoreNew+0x4c>
        mem = 1;
 8002168:	2301      	movs	r3, #1
 800216a:	61bb      	str	r3, [r7, #24]
 800216c:	e00c      	b.n	8002188 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d108      	bne.n	8002188 <osSemaphoreNew+0x66>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d104      	bne.n	8002188 <osSemaphoreNew+0x66>
          mem = 0;
 800217e:	2300      	movs	r3, #0
 8002180:	61bb      	str	r3, [r7, #24]
 8002182:	e001      	b.n	8002188 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8002184:	2300      	movs	r3, #0
 8002186:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800218e:	d04c      	beq.n	800222a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d128      	bne.n	80021e8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d10a      	bne.n	80021b2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	2203      	movs	r2, #3
 80021a2:	9200      	str	r2, [sp, #0]
 80021a4:	2200      	movs	r2, #0
 80021a6:	2100      	movs	r1, #0
 80021a8:	2001      	movs	r0, #1
 80021aa:	f000 f9e7 	bl	800257c <xQueueGenericCreateStatic>
 80021ae:	61f8      	str	r0, [r7, #28]
 80021b0:	e005      	b.n	80021be <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80021b2:	2203      	movs	r2, #3
 80021b4:	2100      	movs	r1, #0
 80021b6:	2001      	movs	r0, #1
 80021b8:	f000 fa5d 	bl	8002676 <xQueueGenericCreate>
 80021bc:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d022      	beq.n	800220a <osSemaphoreNew+0xe8>
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d01f      	beq.n	800220a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80021ca:	2300      	movs	r3, #0
 80021cc:	2200      	movs	r2, #0
 80021ce:	2100      	movs	r1, #0
 80021d0:	69f8      	ldr	r0, [r7, #28]
 80021d2:	f000 fb1d 	bl	8002810 <xQueueGenericSend>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d016      	beq.n	800220a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80021dc:	69f8      	ldr	r0, [r7, #28]
 80021de:	f000 ff2b 	bl	8003038 <vQueueDelete>
            hSemaphore = NULL;
 80021e2:	2300      	movs	r3, #0
 80021e4:	61fb      	str	r3, [r7, #28]
 80021e6:	e010      	b.n	800220a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d108      	bne.n	8002200 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	461a      	mov	r2, r3
 80021f4:	68b9      	ldr	r1, [r7, #8]
 80021f6:	68f8      	ldr	r0, [r7, #12]
 80021f8:	f000 fa9b 	bl	8002732 <xQueueCreateCountingSemaphoreStatic>
 80021fc:	61f8      	str	r0, [r7, #28]
 80021fe:	e004      	b.n	800220a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8002200:	68b9      	ldr	r1, [r7, #8]
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 face 	bl	80027a4 <xQueueCreateCountingSemaphore>
 8002208:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00c      	beq.n	800222a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <osSemaphoreNew+0xfc>
          name = attr->name;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	617b      	str	r3, [r7, #20]
 800221c:	e001      	b.n	8002222 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8002222:	6979      	ldr	r1, [r7, #20]
 8002224:	69f8      	ldr	r0, [r7, #28]
 8002226:	f001 f853 	bl	80032d0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800222a:	69fb      	ldr	r3, [r7, #28]
}
 800222c:	4618      	mov	r0, r3
 800222e:	3720      	adds	r7, #32
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8002242:	2300      	movs	r3, #0
 8002244:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d103      	bne.n	8002254 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800224c:	f06f 0303 	mvn.w	r3, #3
 8002250:	617b      	str	r3, [r7, #20]
 8002252:	e039      	b.n	80022c8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002254:	f3ef 8305 	mrs	r3, IPSR
 8002258:	60fb      	str	r3, [r7, #12]
  return(result);
 800225a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800225c:	2b00      	cmp	r3, #0
 800225e:	d022      	beq.n	80022a6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8002266:	f06f 0303 	mvn.w	r3, #3
 800226a:	617b      	str	r3, [r7, #20]
 800226c:	e02c      	b.n	80022c8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800226e:	2300      	movs	r3, #0
 8002270:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8002272:	f107 0308 	add.w	r3, r7, #8
 8002276:	461a      	mov	r2, r3
 8002278:	2100      	movs	r1, #0
 800227a:	6938      	ldr	r0, [r7, #16]
 800227c:	f000 fe5a 	bl	8002f34 <xQueueReceiveFromISR>
 8002280:	4603      	mov	r3, r0
 8002282:	2b01      	cmp	r3, #1
 8002284:	d003      	beq.n	800228e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8002286:	f06f 0302 	mvn.w	r3, #2
 800228a:	617b      	str	r3, [r7, #20]
 800228c:	e01c      	b.n	80022c8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d019      	beq.n	80022c8 <osSemaphoreAcquire+0x94>
 8002294:	4b0f      	ldr	r3, [pc, #60]	@ (80022d4 <osSemaphoreAcquire+0xa0>)
 8002296:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	f3bf 8f4f 	dsb	sy
 80022a0:	f3bf 8f6f 	isb	sy
 80022a4:	e010      	b.n	80022c8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80022a6:	6839      	ldr	r1, [r7, #0]
 80022a8:	6938      	ldr	r0, [r7, #16]
 80022aa:	f000 fd33 	bl	8002d14 <xQueueSemaphoreTake>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d009      	beq.n	80022c8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d003      	beq.n	80022c2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80022ba:	f06f 0301 	mvn.w	r3, #1
 80022be:	617b      	str	r3, [r7, #20]
 80022c0:	e002      	b.n	80022c8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80022c2:	f06f 0302 	mvn.w	r3, #2
 80022c6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80022c8:	697b      	ldr	r3, [r7, #20]
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3718      	adds	r7, #24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	e000ed04 	.word	0xe000ed04

080022d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4a07      	ldr	r2, [pc, #28]	@ (8002304 <vApplicationGetIdleTaskMemory+0x2c>)
 80022e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	4a06      	ldr	r2, [pc, #24]	@ (8002308 <vApplicationGetIdleTaskMemory+0x30>)
 80022ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2280      	movs	r2, #128	@ 0x80
 80022f4:	601a      	str	r2, [r3, #0]
}
 80022f6:	bf00      	nop
 80022f8:	3714      	adds	r7, #20
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	200000d8 	.word	0x200000d8
 8002308:	20000180 	.word	0x20000180

0800230c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	4a07      	ldr	r2, [pc, #28]	@ (8002338 <vApplicationGetTimerTaskMemory+0x2c>)
 800231c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	4a06      	ldr	r2, [pc, #24]	@ (800233c <vApplicationGetTimerTaskMemory+0x30>)
 8002322:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800232a:	601a      	str	r2, [r3, #0]
}
 800232c:	bf00      	nop
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	20000380 	.word	0x20000380
 800233c:	20000428 	.word	0x20000428

08002340 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f103 0208 	add.w	r2, r3, #8
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f04f 32ff 	mov.w	r2, #4294967295
 8002358:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f103 0208 	add.w	r2, r3, #8
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f103 0208 	add.w	r2, r3, #8
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800239a:	b480      	push	{r7}
 800239c:	b085      	sub	sp, #20
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
 80023a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	1c5a      	adds	r2, r3, #1
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	601a      	str	r2, [r3, #0]
}
 80023d6:	bf00      	nop
 80023d8:	3714      	adds	r7, #20
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80023e2:	b480      	push	{r7}
 80023e4:	b085      	sub	sp, #20
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
 80023ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f8:	d103      	bne.n	8002402 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	e00c      	b.n	800241c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	3308      	adds	r3, #8
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	e002      	b.n	8002410 <vListInsert+0x2e>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	429a      	cmp	r2, r3
 800241a:	d2f6      	bcs.n	800240a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	1c5a      	adds	r2, r3, #1
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	601a      	str	r2, [r3, #0]
}
 8002448:	bf00      	nop
 800244a:	3714      	adds	r7, #20
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	6892      	ldr	r2, [r2, #8]
 800246a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	6852      	ldr	r2, [r2, #4]
 8002474:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	429a      	cmp	r2, r3
 800247e:	d103      	bne.n	8002488 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689a      	ldr	r2, [r3, #8]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	1e5a      	subs	r2, r3, #1
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
}
 800249c:	4618      	mov	r0, r3
 800249e:	3714      	adds	r7, #20
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10b      	bne.n	80024d4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80024bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024c0:	f383 8811 	msr	BASEPRI, r3
 80024c4:	f3bf 8f6f 	isb	sy
 80024c8:	f3bf 8f4f 	dsb	sy
 80024cc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80024ce:	bf00      	nop
 80024d0:	bf00      	nop
 80024d2:	e7fd      	b.n	80024d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80024d4:	f002 fc48 	bl	8004d68 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024e0:	68f9      	ldr	r1, [r7, #12]
 80024e2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80024e4:	fb01 f303 	mul.w	r3, r1, r3
 80024e8:	441a      	add	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002504:	3b01      	subs	r3, #1
 8002506:	68f9      	ldr	r1, [r7, #12]
 8002508:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800250a:	fb01 f303 	mul.w	r3, r1, r3
 800250e:	441a      	add	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	22ff      	movs	r2, #255	@ 0xff
 8002518:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	22ff      	movs	r2, #255	@ 0xff
 8002520:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d114      	bne.n	8002554 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d01a      	beq.n	8002568 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	3310      	adds	r3, #16
 8002536:	4618      	mov	r0, r3
 8002538:	f001 fbe4 	bl	8003d04 <xTaskRemoveFromEventList>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d012      	beq.n	8002568 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002542:	4b0d      	ldr	r3, [pc, #52]	@ (8002578 <xQueueGenericReset+0xd0>)
 8002544:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	f3bf 8f4f 	dsb	sy
 800254e:	f3bf 8f6f 	isb	sy
 8002552:	e009      	b.n	8002568 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	3310      	adds	r3, #16
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff fef1 	bl	8002340 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	3324      	adds	r3, #36	@ 0x24
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff feec 	bl	8002340 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002568:	f002 fc30 	bl	8004dcc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800256c:	2301      	movs	r3, #1
}
 800256e:	4618      	mov	r0, r3
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	e000ed04 	.word	0xe000ed04

0800257c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800257c:	b580      	push	{r7, lr}
 800257e:	b08e      	sub	sp, #56	@ 0x38
 8002580:	af02      	add	r7, sp, #8
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
 8002588:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d10b      	bne.n	80025a8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002594:	f383 8811 	msr	BASEPRI, r3
 8002598:	f3bf 8f6f 	isb	sy
 800259c:	f3bf 8f4f 	dsb	sy
 80025a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80025a2:	bf00      	nop
 80025a4:	bf00      	nop
 80025a6:	e7fd      	b.n	80025a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d10b      	bne.n	80025c6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80025ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025b2:	f383 8811 	msr	BASEPRI, r3
 80025b6:	f3bf 8f6f 	isb	sy
 80025ba:	f3bf 8f4f 	dsb	sy
 80025be:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80025c0:	bf00      	nop
 80025c2:	bf00      	nop
 80025c4:	e7fd      	b.n	80025c2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d002      	beq.n	80025d2 <xQueueGenericCreateStatic+0x56>
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <xQueueGenericCreateStatic+0x5a>
 80025d2:	2301      	movs	r3, #1
 80025d4:	e000      	b.n	80025d8 <xQueueGenericCreateStatic+0x5c>
 80025d6:	2300      	movs	r3, #0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d10b      	bne.n	80025f4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80025dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025e0:	f383 8811 	msr	BASEPRI, r3
 80025e4:	f3bf 8f6f 	isb	sy
 80025e8:	f3bf 8f4f 	dsb	sy
 80025ec:	623b      	str	r3, [r7, #32]
}
 80025ee:	bf00      	nop
 80025f0:	bf00      	nop
 80025f2:	e7fd      	b.n	80025f0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d102      	bne.n	8002600 <xQueueGenericCreateStatic+0x84>
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <xQueueGenericCreateStatic+0x88>
 8002600:	2301      	movs	r3, #1
 8002602:	e000      	b.n	8002606 <xQueueGenericCreateStatic+0x8a>
 8002604:	2300      	movs	r3, #0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10b      	bne.n	8002622 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800260a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800260e:	f383 8811 	msr	BASEPRI, r3
 8002612:	f3bf 8f6f 	isb	sy
 8002616:	f3bf 8f4f 	dsb	sy
 800261a:	61fb      	str	r3, [r7, #28]
}
 800261c:	bf00      	nop
 800261e:	bf00      	nop
 8002620:	e7fd      	b.n	800261e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002622:	2350      	movs	r3, #80	@ 0x50
 8002624:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	2b50      	cmp	r3, #80	@ 0x50
 800262a:	d00b      	beq.n	8002644 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800262c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002630:	f383 8811 	msr	BASEPRI, r3
 8002634:	f3bf 8f6f 	isb	sy
 8002638:	f3bf 8f4f 	dsb	sy
 800263c:	61bb      	str	r3, [r7, #24]
}
 800263e:	bf00      	nop
 8002640:	bf00      	nop
 8002642:	e7fd      	b.n	8002640 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002644:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800264a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00d      	beq.n	800266c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002658:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800265c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	4613      	mov	r3, r2
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	68b9      	ldr	r1, [r7, #8]
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f000 f840 	bl	80026ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800266c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800266e:	4618      	mov	r0, r3
 8002670:	3730      	adds	r7, #48	@ 0x30
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002676:	b580      	push	{r7, lr}
 8002678:	b08a      	sub	sp, #40	@ 0x28
 800267a:	af02      	add	r7, sp, #8
 800267c:	60f8      	str	r0, [r7, #12]
 800267e:	60b9      	str	r1, [r7, #8]
 8002680:	4613      	mov	r3, r2
 8002682:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d10b      	bne.n	80026a2 <xQueueGenericCreate+0x2c>
	__asm volatile
 800268a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800268e:	f383 8811 	msr	BASEPRI, r3
 8002692:	f3bf 8f6f 	isb	sy
 8002696:	f3bf 8f4f 	dsb	sy
 800269a:	613b      	str	r3, [r7, #16]
}
 800269c:	bf00      	nop
 800269e:	bf00      	nop
 80026a0:	e7fd      	b.n	800269e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	68ba      	ldr	r2, [r7, #8]
 80026a6:	fb02 f303 	mul.w	r3, r2, r3
 80026aa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	3350      	adds	r3, #80	@ 0x50
 80026b0:	4618      	mov	r0, r3
 80026b2:	f002 fc7b 	bl	8004fac <pvPortMalloc>
 80026b6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d011      	beq.n	80026e2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	3350      	adds	r3, #80	@ 0x50
 80026c6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80026d0:	79fa      	ldrb	r2, [r7, #7]
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	9300      	str	r3, [sp, #0]
 80026d6:	4613      	mov	r3, r2
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	68b9      	ldr	r1, [r7, #8]
 80026dc:	68f8      	ldr	r0, [r7, #12]
 80026de:	f000 f805 	bl	80026ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80026e2:	69bb      	ldr	r3, [r7, #24]
	}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3720      	adds	r7, #32
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
 80026f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d103      	bne.n	8002708 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	e002      	b.n	800270e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	68ba      	ldr	r2, [r7, #8]
 8002718:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800271a:	2101      	movs	r1, #1
 800271c:	69b8      	ldr	r0, [r7, #24]
 800271e:	f7ff fec3 	bl	80024a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	78fa      	ldrb	r2, [r7, #3]
 8002726:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800272a:	bf00      	nop
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8002732:	b580      	push	{r7, lr}
 8002734:	b08a      	sub	sp, #40	@ 0x28
 8002736:	af02      	add	r7, sp, #8
 8002738:	60f8      	str	r0, [r7, #12]
 800273a:	60b9      	str	r1, [r7, #8]
 800273c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10b      	bne.n	800275c <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8002744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002748:	f383 8811 	msr	BASEPRI, r3
 800274c:	f3bf 8f6f 	isb	sy
 8002750:	f3bf 8f4f 	dsb	sy
 8002754:	61bb      	str	r3, [r7, #24]
}
 8002756:	bf00      	nop
 8002758:	bf00      	nop
 800275a:	e7fd      	b.n	8002758 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800275c:	68ba      	ldr	r2, [r7, #8]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	429a      	cmp	r2, r3
 8002762:	d90b      	bls.n	800277c <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8002764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002768:	f383 8811 	msr	BASEPRI, r3
 800276c:	f3bf 8f6f 	isb	sy
 8002770:	f3bf 8f4f 	dsb	sy
 8002774:	617b      	str	r3, [r7, #20]
}
 8002776:	bf00      	nop
 8002778:	bf00      	nop
 800277a:	e7fd      	b.n	8002778 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800277c:	2302      	movs	r3, #2
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	2100      	movs	r1, #0
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f7ff fef8 	bl	800257c <xQueueGenericCreateStatic>
 800278c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d002      	beq.n	800279a <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	68ba      	ldr	r2, [r7, #8]
 8002798:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800279a:	69fb      	ldr	r3, [r7, #28]
	}
 800279c:	4618      	mov	r0, r3
 800279e:	3720      	adds	r7, #32
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d10b      	bne.n	80027cc <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80027b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027b8:	f383 8811 	msr	BASEPRI, r3
 80027bc:	f3bf 8f6f 	isb	sy
 80027c0:	f3bf 8f4f 	dsb	sy
 80027c4:	613b      	str	r3, [r7, #16]
}
 80027c6:	bf00      	nop
 80027c8:	bf00      	nop
 80027ca:	e7fd      	b.n	80027c8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d90b      	bls.n	80027ec <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80027d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027d8:	f383 8811 	msr	BASEPRI, r3
 80027dc:	f3bf 8f6f 	isb	sy
 80027e0:	f3bf 8f4f 	dsb	sy
 80027e4:	60fb      	str	r3, [r7, #12]
}
 80027e6:	bf00      	nop
 80027e8:	bf00      	nop
 80027ea:	e7fd      	b.n	80027e8 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80027ec:	2202      	movs	r2, #2
 80027ee:	2100      	movs	r1, #0
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f7ff ff40 	bl	8002676 <xQueueGenericCreate>
 80027f6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d002      	beq.n	8002804 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002804:	697b      	ldr	r3, [r7, #20]
	}
 8002806:	4618      	mov	r0, r3
 8002808:	3718      	adds	r7, #24
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
	...

08002810 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b08e      	sub	sp, #56	@ 0x38
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
 800281c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800281e:	2300      	movs	r3, #0
 8002820:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002828:	2b00      	cmp	r3, #0
 800282a:	d10b      	bne.n	8002844 <xQueueGenericSend+0x34>
	__asm volatile
 800282c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002830:	f383 8811 	msr	BASEPRI, r3
 8002834:	f3bf 8f6f 	isb	sy
 8002838:	f3bf 8f4f 	dsb	sy
 800283c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800283e:	bf00      	nop
 8002840:	bf00      	nop
 8002842:	e7fd      	b.n	8002840 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d103      	bne.n	8002852 <xQueueGenericSend+0x42>
 800284a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800284c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <xQueueGenericSend+0x46>
 8002852:	2301      	movs	r3, #1
 8002854:	e000      	b.n	8002858 <xQueueGenericSend+0x48>
 8002856:	2300      	movs	r3, #0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d10b      	bne.n	8002874 <xQueueGenericSend+0x64>
	__asm volatile
 800285c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002860:	f383 8811 	msr	BASEPRI, r3
 8002864:	f3bf 8f6f 	isb	sy
 8002868:	f3bf 8f4f 	dsb	sy
 800286c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800286e:	bf00      	nop
 8002870:	bf00      	nop
 8002872:	e7fd      	b.n	8002870 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	2b02      	cmp	r3, #2
 8002878:	d103      	bne.n	8002882 <xQueueGenericSend+0x72>
 800287a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800287c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800287e:	2b01      	cmp	r3, #1
 8002880:	d101      	bne.n	8002886 <xQueueGenericSend+0x76>
 8002882:	2301      	movs	r3, #1
 8002884:	e000      	b.n	8002888 <xQueueGenericSend+0x78>
 8002886:	2300      	movs	r3, #0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d10b      	bne.n	80028a4 <xQueueGenericSend+0x94>
	__asm volatile
 800288c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002890:	f383 8811 	msr	BASEPRI, r3
 8002894:	f3bf 8f6f 	isb	sy
 8002898:	f3bf 8f4f 	dsb	sy
 800289c:	623b      	str	r3, [r7, #32]
}
 800289e:	bf00      	nop
 80028a0:	bf00      	nop
 80028a2:	e7fd      	b.n	80028a0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80028a4:	f001 fbf4 	bl	8004090 <xTaskGetSchedulerState>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d102      	bne.n	80028b4 <xQueueGenericSend+0xa4>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d101      	bne.n	80028b8 <xQueueGenericSend+0xa8>
 80028b4:	2301      	movs	r3, #1
 80028b6:	e000      	b.n	80028ba <xQueueGenericSend+0xaa>
 80028b8:	2300      	movs	r3, #0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10b      	bne.n	80028d6 <xQueueGenericSend+0xc6>
	__asm volatile
 80028be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028c2:	f383 8811 	msr	BASEPRI, r3
 80028c6:	f3bf 8f6f 	isb	sy
 80028ca:	f3bf 8f4f 	dsb	sy
 80028ce:	61fb      	str	r3, [r7, #28]
}
 80028d0:	bf00      	nop
 80028d2:	bf00      	nop
 80028d4:	e7fd      	b.n	80028d2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80028d6:	f002 fa47 	bl	8004d68 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80028da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d302      	bcc.n	80028ec <xQueueGenericSend+0xdc>
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d129      	bne.n	8002940 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	68b9      	ldr	r1, [r7, #8]
 80028f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80028f2:	f000 fbdd 	bl	80030b0 <prvCopyDataToQueue>
 80028f6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d010      	beq.n	8002922 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002902:	3324      	adds	r3, #36	@ 0x24
 8002904:	4618      	mov	r0, r3
 8002906:	f001 f9fd 	bl	8003d04 <xTaskRemoveFromEventList>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d013      	beq.n	8002938 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002910:	4b3f      	ldr	r3, [pc, #252]	@ (8002a10 <xQueueGenericSend+0x200>)
 8002912:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	f3bf 8f4f 	dsb	sy
 800291c:	f3bf 8f6f 	isb	sy
 8002920:	e00a      	b.n	8002938 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002924:	2b00      	cmp	r3, #0
 8002926:	d007      	beq.n	8002938 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002928:	4b39      	ldr	r3, [pc, #228]	@ (8002a10 <xQueueGenericSend+0x200>)
 800292a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	f3bf 8f4f 	dsb	sy
 8002934:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002938:	f002 fa48 	bl	8004dcc <vPortExitCritical>
				return pdPASS;
 800293c:	2301      	movs	r3, #1
 800293e:	e063      	b.n	8002a08 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d103      	bne.n	800294e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002946:	f002 fa41 	bl	8004dcc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800294a:	2300      	movs	r3, #0
 800294c:	e05c      	b.n	8002a08 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800294e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002950:	2b00      	cmp	r3, #0
 8002952:	d106      	bne.n	8002962 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002954:	f107 0314 	add.w	r3, r7, #20
 8002958:	4618      	mov	r0, r3
 800295a:	f001 fa37 	bl	8003dcc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800295e:	2301      	movs	r3, #1
 8002960:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002962:	f002 fa33 	bl	8004dcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002966:	f000 ff9f 	bl	80038a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800296a:	f002 f9fd 	bl	8004d68 <vPortEnterCritical>
 800296e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002970:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002974:	b25b      	sxtb	r3, r3
 8002976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800297a:	d103      	bne.n	8002984 <xQueueGenericSend+0x174>
 800297c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800297e:	2200      	movs	r2, #0
 8002980:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002986:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800298a:	b25b      	sxtb	r3, r3
 800298c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002990:	d103      	bne.n	800299a <xQueueGenericSend+0x18a>
 8002992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800299a:	f002 fa17 	bl	8004dcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800299e:	1d3a      	adds	r2, r7, #4
 80029a0:	f107 0314 	add.w	r3, r7, #20
 80029a4:	4611      	mov	r1, r2
 80029a6:	4618      	mov	r0, r3
 80029a8:	f001 fa26 	bl	8003df8 <xTaskCheckForTimeOut>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d124      	bne.n	80029fc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80029b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80029b4:	f000 fc74 	bl	80032a0 <prvIsQueueFull>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d018      	beq.n	80029f0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80029be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029c0:	3310      	adds	r3, #16
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	4611      	mov	r1, r2
 80029c6:	4618      	mov	r0, r3
 80029c8:	f001 f94a 	bl	8003c60 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80029cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80029ce:	f000 fbff 	bl	80031d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80029d2:	f000 ff77 	bl	80038c4 <xTaskResumeAll>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f47f af7c 	bne.w	80028d6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80029de:	4b0c      	ldr	r3, [pc, #48]	@ (8002a10 <xQueueGenericSend+0x200>)
 80029e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	f3bf 8f4f 	dsb	sy
 80029ea:	f3bf 8f6f 	isb	sy
 80029ee:	e772      	b.n	80028d6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80029f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80029f2:	f000 fbed 	bl	80031d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80029f6:	f000 ff65 	bl	80038c4 <xTaskResumeAll>
 80029fa:	e76c      	b.n	80028d6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80029fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80029fe:	f000 fbe7 	bl	80031d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002a02:	f000 ff5f 	bl	80038c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002a06:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3738      	adds	r7, #56	@ 0x38
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	e000ed04 	.word	0xe000ed04

08002a14 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b090      	sub	sp, #64	@ 0x40
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
 8002a20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10b      	bne.n	8002a44 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a30:	f383 8811 	msr	BASEPRI, r3
 8002a34:	f3bf 8f6f 	isb	sy
 8002a38:	f3bf 8f4f 	dsb	sy
 8002a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002a3e:	bf00      	nop
 8002a40:	bf00      	nop
 8002a42:	e7fd      	b.n	8002a40 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d103      	bne.n	8002a52 <xQueueGenericSendFromISR+0x3e>
 8002a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <xQueueGenericSendFromISR+0x42>
 8002a52:	2301      	movs	r3, #1
 8002a54:	e000      	b.n	8002a58 <xQueueGenericSendFromISR+0x44>
 8002a56:	2300      	movs	r3, #0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d10b      	bne.n	8002a74 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a60:	f383 8811 	msr	BASEPRI, r3
 8002a64:	f3bf 8f6f 	isb	sy
 8002a68:	f3bf 8f4f 	dsb	sy
 8002a6c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002a6e:	bf00      	nop
 8002a70:	bf00      	nop
 8002a72:	e7fd      	b.n	8002a70 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d103      	bne.n	8002a82 <xQueueGenericSendFromISR+0x6e>
 8002a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d101      	bne.n	8002a86 <xQueueGenericSendFromISR+0x72>
 8002a82:	2301      	movs	r3, #1
 8002a84:	e000      	b.n	8002a88 <xQueueGenericSendFromISR+0x74>
 8002a86:	2300      	movs	r3, #0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d10b      	bne.n	8002aa4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a90:	f383 8811 	msr	BASEPRI, r3
 8002a94:	f3bf 8f6f 	isb	sy
 8002a98:	f3bf 8f4f 	dsb	sy
 8002a9c:	623b      	str	r3, [r7, #32]
}
 8002a9e:	bf00      	nop
 8002aa0:	bf00      	nop
 8002aa2:	e7fd      	b.n	8002aa0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002aa4:	f002 fa40 	bl	8004f28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002aa8:	f3ef 8211 	mrs	r2, BASEPRI
 8002aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ab0:	f383 8811 	msr	BASEPRI, r3
 8002ab4:	f3bf 8f6f 	isb	sy
 8002ab8:	f3bf 8f4f 	dsb	sy
 8002abc:	61fa      	str	r2, [r7, #28]
 8002abe:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002ac0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002ac2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ac6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d302      	bcc.n	8002ad6 <xQueueGenericSendFromISR+0xc2>
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d12f      	bne.n	8002b36 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ad8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002adc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	68b9      	ldr	r1, [r7, #8]
 8002aea:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002aec:	f000 fae0 	bl	80030b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002af0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af8:	d112      	bne.n	8002b20 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d016      	beq.n	8002b30 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b04:	3324      	adds	r3, #36	@ 0x24
 8002b06:	4618      	mov	r0, r3
 8002b08:	f001 f8fc 	bl	8003d04 <xTaskRemoveFromEventList>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00e      	beq.n	8002b30 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00b      	beq.n	8002b30 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	e007      	b.n	8002b30 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002b20:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002b24:	3301      	adds	r3, #1
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	b25a      	sxtb	r2, r3
 8002b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002b30:	2301      	movs	r3, #1
 8002b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002b34:	e001      	b.n	8002b3a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002b36:	2300      	movs	r3, #0
 8002b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b3c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002b44:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002b46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3740      	adds	r7, #64	@ 0x40
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b08c      	sub	sp, #48	@ 0x30
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10b      	bne.n	8002b82 <xQueueReceive+0x32>
	__asm volatile
 8002b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b6e:	f383 8811 	msr	BASEPRI, r3
 8002b72:	f3bf 8f6f 	isb	sy
 8002b76:	f3bf 8f4f 	dsb	sy
 8002b7a:	623b      	str	r3, [r7, #32]
}
 8002b7c:	bf00      	nop
 8002b7e:	bf00      	nop
 8002b80:	e7fd      	b.n	8002b7e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d103      	bne.n	8002b90 <xQueueReceive+0x40>
 8002b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d101      	bne.n	8002b94 <xQueueReceive+0x44>
 8002b90:	2301      	movs	r3, #1
 8002b92:	e000      	b.n	8002b96 <xQueueReceive+0x46>
 8002b94:	2300      	movs	r3, #0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10b      	bne.n	8002bb2 <xQueueReceive+0x62>
	__asm volatile
 8002b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b9e:	f383 8811 	msr	BASEPRI, r3
 8002ba2:	f3bf 8f6f 	isb	sy
 8002ba6:	f3bf 8f4f 	dsb	sy
 8002baa:	61fb      	str	r3, [r7, #28]
}
 8002bac:	bf00      	nop
 8002bae:	bf00      	nop
 8002bb0:	e7fd      	b.n	8002bae <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002bb2:	f001 fa6d 	bl	8004090 <xTaskGetSchedulerState>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d102      	bne.n	8002bc2 <xQueueReceive+0x72>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <xQueueReceive+0x76>
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e000      	b.n	8002bc8 <xQueueReceive+0x78>
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10b      	bne.n	8002be4 <xQueueReceive+0x94>
	__asm volatile
 8002bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bd0:	f383 8811 	msr	BASEPRI, r3
 8002bd4:	f3bf 8f6f 	isb	sy
 8002bd8:	f3bf 8f4f 	dsb	sy
 8002bdc:	61bb      	str	r3, [r7, #24]
}
 8002bde:	bf00      	nop
 8002be0:	bf00      	nop
 8002be2:	e7fd      	b.n	8002be0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002be4:	f002 f8c0 	bl	8004d68 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bec:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d01f      	beq.n	8002c34 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002bf4:	68b9      	ldr	r1, [r7, #8]
 8002bf6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002bf8:	f000 fac4 	bl	8003184 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfe:	1e5a      	subs	r2, r3, #1
 8002c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c02:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00f      	beq.n	8002c2c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c0e:	3310      	adds	r3, #16
 8002c10:	4618      	mov	r0, r3
 8002c12:	f001 f877 	bl	8003d04 <xTaskRemoveFromEventList>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d007      	beq.n	8002c2c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002c1c:	4b3c      	ldr	r3, [pc, #240]	@ (8002d10 <xQueueReceive+0x1c0>)
 8002c1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	f3bf 8f4f 	dsb	sy
 8002c28:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002c2c:	f002 f8ce 	bl	8004dcc <vPortExitCritical>
				return pdPASS;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e069      	b.n	8002d08 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d103      	bne.n	8002c42 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c3a:	f002 f8c7 	bl	8004dcc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	e062      	b.n	8002d08 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d106      	bne.n	8002c56 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c48:	f107 0310 	add.w	r3, r7, #16
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f001 f8bd 	bl	8003dcc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c52:	2301      	movs	r3, #1
 8002c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c56:	f002 f8b9 	bl	8004dcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c5a:	f000 fe25 	bl	80038a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c5e:	f002 f883 	bl	8004d68 <vPortEnterCritical>
 8002c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c64:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002c68:	b25b      	sxtb	r3, r3
 8002c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c6e:	d103      	bne.n	8002c78 <xQueueReceive+0x128>
 8002c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c7a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002c7e:	b25b      	sxtb	r3, r3
 8002c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c84:	d103      	bne.n	8002c8e <xQueueReceive+0x13e>
 8002c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002c8e:	f002 f89d 	bl	8004dcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c92:	1d3a      	adds	r2, r7, #4
 8002c94:	f107 0310 	add.w	r3, r7, #16
 8002c98:	4611      	mov	r1, r2
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f001 f8ac 	bl	8003df8 <xTaskCheckForTimeOut>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d123      	bne.n	8002cee <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ca6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002ca8:	f000 fae4 	bl	8003274 <prvIsQueueEmpty>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d017      	beq.n	8002ce2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cb4:	3324      	adds	r3, #36	@ 0x24
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	4611      	mov	r1, r2
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f000 ffd0 	bl	8003c60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002cc0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002cc2:	f000 fa85 	bl	80031d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002cc6:	f000 fdfd 	bl	80038c4 <xTaskResumeAll>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d189      	bne.n	8002be4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8002d10 <xQueueReceive+0x1c0>)
 8002cd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	f3bf 8f4f 	dsb	sy
 8002cdc:	f3bf 8f6f 	isb	sy
 8002ce0:	e780      	b.n	8002be4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002ce2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002ce4:	f000 fa74 	bl	80031d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ce8:	f000 fdec 	bl	80038c4 <xTaskResumeAll>
 8002cec:	e77a      	b.n	8002be4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002cee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002cf0:	f000 fa6e 	bl	80031d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002cf4:	f000 fde6 	bl	80038c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002cf8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002cfa:	f000 fabb 	bl	8003274 <prvIsQueueEmpty>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f43f af6f 	beq.w	8002be4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002d06:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3730      	adds	r7, #48	@ 0x30
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	e000ed04 	.word	0xe000ed04

08002d14 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b08e      	sub	sp, #56	@ 0x38
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002d26:	2300      	movs	r3, #0
 8002d28:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002d2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10b      	bne.n	8002d48 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8002d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d34:	f383 8811 	msr	BASEPRI, r3
 8002d38:	f3bf 8f6f 	isb	sy
 8002d3c:	f3bf 8f4f 	dsb	sy
 8002d40:	623b      	str	r3, [r7, #32]
}
 8002d42:	bf00      	nop
 8002d44:	bf00      	nop
 8002d46:	e7fd      	b.n	8002d44 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002d48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00b      	beq.n	8002d68 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8002d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d54:	f383 8811 	msr	BASEPRI, r3
 8002d58:	f3bf 8f6f 	isb	sy
 8002d5c:	f3bf 8f4f 	dsb	sy
 8002d60:	61fb      	str	r3, [r7, #28]
}
 8002d62:	bf00      	nop
 8002d64:	bf00      	nop
 8002d66:	e7fd      	b.n	8002d64 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d68:	f001 f992 	bl	8004090 <xTaskGetSchedulerState>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d102      	bne.n	8002d78 <xQueueSemaphoreTake+0x64>
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d101      	bne.n	8002d7c <xQueueSemaphoreTake+0x68>
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e000      	b.n	8002d7e <xQueueSemaphoreTake+0x6a>
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10b      	bne.n	8002d9a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8002d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d86:	f383 8811 	msr	BASEPRI, r3
 8002d8a:	f3bf 8f6f 	isb	sy
 8002d8e:	f3bf 8f4f 	dsb	sy
 8002d92:	61bb      	str	r3, [r7, #24]
}
 8002d94:	bf00      	nop
 8002d96:	bf00      	nop
 8002d98:	e7fd      	b.n	8002d96 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d9a:	f001 ffe5 	bl	8004d68 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002da2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d024      	beq.n	8002df4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dac:	1e5a      	subs	r2, r3, #1
 8002dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002db0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d104      	bne.n	8002dc4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002dba:	f001 fae3 	bl	8004384 <pvTaskIncrementMutexHeldCount>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dc2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00f      	beq.n	8002dec <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dce:	3310      	adds	r3, #16
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f000 ff97 	bl	8003d04 <xTaskRemoveFromEventList>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d007      	beq.n	8002dec <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002ddc:	4b54      	ldr	r3, [pc, #336]	@ (8002f30 <xQueueSemaphoreTake+0x21c>)
 8002dde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	f3bf 8f4f 	dsb	sy
 8002de8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002dec:	f001 ffee 	bl	8004dcc <vPortExitCritical>
				return pdPASS;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e098      	b.n	8002f26 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d112      	bne.n	8002e20 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00b      	beq.n	8002e18 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8002e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e04:	f383 8811 	msr	BASEPRI, r3
 8002e08:	f3bf 8f6f 	isb	sy
 8002e0c:	f3bf 8f4f 	dsb	sy
 8002e10:	617b      	str	r3, [r7, #20]
}
 8002e12:	bf00      	nop
 8002e14:	bf00      	nop
 8002e16:	e7fd      	b.n	8002e14 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002e18:	f001 ffd8 	bl	8004dcc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	e082      	b.n	8002f26 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d106      	bne.n	8002e34 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e26:	f107 030c 	add.w	r3, r7, #12
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 ffce 	bl	8003dcc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e30:	2301      	movs	r3, #1
 8002e32:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e34:	f001 ffca 	bl	8004dcc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e38:	f000 fd36 	bl	80038a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e3c:	f001 ff94 	bl	8004d68 <vPortEnterCritical>
 8002e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e42:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002e46:	b25b      	sxtb	r3, r3
 8002e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e4c:	d103      	bne.n	8002e56 <xQueueSemaphoreTake+0x142>
 8002e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002e5c:	b25b      	sxtb	r3, r3
 8002e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e62:	d103      	bne.n	8002e6c <xQueueSemaphoreTake+0x158>
 8002e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e6c:	f001 ffae 	bl	8004dcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e70:	463a      	mov	r2, r7
 8002e72:	f107 030c 	add.w	r3, r7, #12
 8002e76:	4611      	mov	r1, r2
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f000 ffbd 	bl	8003df8 <xTaskCheckForTimeOut>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d132      	bne.n	8002eea <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e84:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002e86:	f000 f9f5 	bl	8003274 <prvIsQueueEmpty>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d026      	beq.n	8002ede <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d109      	bne.n	8002eac <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8002e98:	f001 ff66 	bl	8004d68 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f001 f913 	bl	80040cc <xTaskPriorityInherit>
 8002ea6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8002ea8:	f001 ff90 	bl	8004dcc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eae:	3324      	adds	r3, #36	@ 0x24
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	4611      	mov	r1, r2
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f000 fed3 	bl	8003c60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002eba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002ebc:	f000 f988 	bl	80031d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002ec0:	f000 fd00 	bl	80038c4 <xTaskResumeAll>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f47f af67 	bne.w	8002d9a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8002ecc:	4b18      	ldr	r3, [pc, #96]	@ (8002f30 <xQueueSemaphoreTake+0x21c>)
 8002ece:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	f3bf 8f4f 	dsb	sy
 8002ed8:	f3bf 8f6f 	isb	sy
 8002edc:	e75d      	b.n	8002d9a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002ede:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002ee0:	f000 f976 	bl	80031d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ee4:	f000 fcee 	bl	80038c4 <xTaskResumeAll>
 8002ee8:	e757      	b.n	8002d9a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002eea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002eec:	f000 f970 	bl	80031d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002ef0:	f000 fce8 	bl	80038c4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ef4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002ef6:	f000 f9bd 	bl	8003274 <prvIsQueueEmpty>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f43f af4c 	beq.w	8002d9a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00d      	beq.n	8002f24 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8002f08:	f001 ff2e 	bl	8004d68 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002f0c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002f0e:	f000 f8b7 	bl	8003080 <prvGetDisinheritPriorityAfterTimeout>
 8002f12:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f001 f9ae 	bl	800427c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002f20:	f001 ff54 	bl	8004dcc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002f24:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3738      	adds	r7, #56	@ 0x38
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	e000ed04 	.word	0xe000ed04

08002f34 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b08e      	sub	sp, #56	@ 0x38
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10b      	bne.n	8002f62 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8002f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f4e:	f383 8811 	msr	BASEPRI, r3
 8002f52:	f3bf 8f6f 	isb	sy
 8002f56:	f3bf 8f4f 	dsb	sy
 8002f5a:	623b      	str	r3, [r7, #32]
}
 8002f5c:	bf00      	nop
 8002f5e:	bf00      	nop
 8002f60:	e7fd      	b.n	8002f5e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d103      	bne.n	8002f70 <xQueueReceiveFromISR+0x3c>
 8002f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d101      	bne.n	8002f74 <xQueueReceiveFromISR+0x40>
 8002f70:	2301      	movs	r3, #1
 8002f72:	e000      	b.n	8002f76 <xQueueReceiveFromISR+0x42>
 8002f74:	2300      	movs	r3, #0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10b      	bne.n	8002f92 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8002f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f7e:	f383 8811 	msr	BASEPRI, r3
 8002f82:	f3bf 8f6f 	isb	sy
 8002f86:	f3bf 8f4f 	dsb	sy
 8002f8a:	61fb      	str	r3, [r7, #28]
}
 8002f8c:	bf00      	nop
 8002f8e:	bf00      	nop
 8002f90:	e7fd      	b.n	8002f8e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f92:	f001 ffc9 	bl	8004f28 <vPortValidateInterruptPriority>
	__asm volatile
 8002f96:	f3ef 8211 	mrs	r2, BASEPRI
 8002f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f9e:	f383 8811 	msr	BASEPRI, r3
 8002fa2:	f3bf 8f6f 	isb	sy
 8002fa6:	f3bf 8f4f 	dsb	sy
 8002faa:	61ba      	str	r2, [r7, #24]
 8002fac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002fae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fb6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d02f      	beq.n	800301e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fc0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002fc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002fc8:	68b9      	ldr	r1, [r7, #8]
 8002fca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002fcc:	f000 f8da 	bl	8003184 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fd2:	1e5a      	subs	r2, r3, #1
 8002fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fd6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002fd8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe0:	d112      	bne.n	8003008 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d016      	beq.n	8003018 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fec:	3310      	adds	r3, #16
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f000 fe88 	bl	8003d04 <xTaskRemoveFromEventList>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00e      	beq.n	8003018 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00b      	beq.n	8003018 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	e007      	b.n	8003018 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003008:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800300c:	3301      	adds	r3, #1
 800300e:	b2db      	uxtb	r3, r3
 8003010:	b25a      	sxtb	r2, r3
 8003012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003014:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8003018:	2301      	movs	r3, #1
 800301a:	637b      	str	r3, [r7, #52]	@ 0x34
 800301c:	e001      	b.n	8003022 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800301e:	2300      	movs	r3, #0
 8003020:	637b      	str	r3, [r7, #52]	@ 0x34
 8003022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003024:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	f383 8811 	msr	BASEPRI, r3
}
 800302c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800302e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003030:	4618      	mov	r0, r3
 8003032:	3738      	adds	r7, #56	@ 0x38
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10b      	bne.n	8003062 <vQueueDelete+0x2a>
	__asm volatile
 800304a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800304e:	f383 8811 	msr	BASEPRI, r3
 8003052:	f3bf 8f6f 	isb	sy
 8003056:	f3bf 8f4f 	dsb	sy
 800305a:	60bb      	str	r3, [r7, #8]
}
 800305c:	bf00      	nop
 800305e:	bf00      	nop
 8003060:	e7fd      	b.n	800305e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f000 f95e 	bl	8003324 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800306e:	2b00      	cmp	r3, #0
 8003070:	d102      	bne.n	8003078 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f002 f868 	bl	8005148 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8003078:	bf00      	nop
 800307a:	3710      	adds	r7, #16
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800308c:	2b00      	cmp	r3, #0
 800308e:	d006      	beq.n	800309e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	e001      	b.n	80030a2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800309e:	2300      	movs	r3, #0
 80030a0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80030a2:	68fb      	ldr	r3, [r7, #12]
	}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3714      	adds	r7, #20
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80030bc:	2300      	movs	r3, #0
 80030be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10d      	bne.n	80030ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d14d      	bne.n	8003172 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	4618      	mov	r0, r3
 80030dc:	f001 f85e 	bl	800419c <xTaskPriorityDisinherit>
 80030e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	609a      	str	r2, [r3, #8]
 80030e8:	e043      	b.n	8003172 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d119      	bne.n	8003124 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6858      	ldr	r0, [r3, #4]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f8:	461a      	mov	r2, r3
 80030fa:	68b9      	ldr	r1, [r7, #8]
 80030fc:	f002 f9c8 	bl	8005490 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003108:	441a      	add	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	429a      	cmp	r2, r3
 8003118:	d32b      	bcc.n	8003172 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	605a      	str	r2, [r3, #4]
 8003122:	e026      	b.n	8003172 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	68d8      	ldr	r0, [r3, #12]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312c:	461a      	mov	r2, r3
 800312e:	68b9      	ldr	r1, [r7, #8]
 8003130:	f002 f9ae 	bl	8005490 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	68da      	ldr	r2, [r3, #12]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313c:	425b      	negs	r3, r3
 800313e:	441a      	add	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	68da      	ldr	r2, [r3, #12]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	429a      	cmp	r2, r3
 800314e:	d207      	bcs.n	8003160 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003158:	425b      	negs	r3, r3
 800315a:	441a      	add	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b02      	cmp	r3, #2
 8003164:	d105      	bne.n	8003172 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d002      	beq.n	8003172 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	3b01      	subs	r3, #1
 8003170:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1c5a      	adds	r2, r3, #1
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800317a:	697b      	ldr	r3, [r7, #20]
}
 800317c:	4618      	mov	r0, r3
 800317e:	3718      	adds	r7, #24
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003192:	2b00      	cmp	r3, #0
 8003194:	d018      	beq.n	80031c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68da      	ldr	r2, [r3, #12]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319e:	441a      	add	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68da      	ldr	r2, [r3, #12]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d303      	bcc.n	80031b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68d9      	ldr	r1, [r3, #12]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c0:	461a      	mov	r2, r3
 80031c2:	6838      	ldr	r0, [r7, #0]
 80031c4:	f002 f964 	bl	8005490 <memcpy>
	}
}
 80031c8:	bf00      	nop
 80031ca:	3708      	adds	r7, #8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80031d8:	f001 fdc6 	bl	8004d68 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80031e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80031e4:	e011      	b.n	800320a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d012      	beq.n	8003214 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	3324      	adds	r3, #36	@ 0x24
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 fd86 	bl	8003d04 <xTaskRemoveFromEventList>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80031fe:	f000 fe5f 	bl	8003ec0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003202:	7bfb      	ldrb	r3, [r7, #15]
 8003204:	3b01      	subs	r3, #1
 8003206:	b2db      	uxtb	r3, r3
 8003208:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800320a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800320e:	2b00      	cmp	r3, #0
 8003210:	dce9      	bgt.n	80031e6 <prvUnlockQueue+0x16>
 8003212:	e000      	b.n	8003216 <prvUnlockQueue+0x46>
					break;
 8003214:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	22ff      	movs	r2, #255	@ 0xff
 800321a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800321e:	f001 fdd5 	bl	8004dcc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003222:	f001 fda1 	bl	8004d68 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800322c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800322e:	e011      	b.n	8003254 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d012      	beq.n	800325e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3310      	adds	r3, #16
 800323c:	4618      	mov	r0, r3
 800323e:	f000 fd61 	bl	8003d04 <xTaskRemoveFromEventList>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003248:	f000 fe3a 	bl	8003ec0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800324c:	7bbb      	ldrb	r3, [r7, #14]
 800324e:	3b01      	subs	r3, #1
 8003250:	b2db      	uxtb	r3, r3
 8003252:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003254:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003258:	2b00      	cmp	r3, #0
 800325a:	dce9      	bgt.n	8003230 <prvUnlockQueue+0x60>
 800325c:	e000      	b.n	8003260 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800325e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	22ff      	movs	r2, #255	@ 0xff
 8003264:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003268:	f001 fdb0 	bl	8004dcc <vPortExitCritical>
}
 800326c:	bf00      	nop
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800327c:	f001 fd74 	bl	8004d68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003284:	2b00      	cmp	r3, #0
 8003286:	d102      	bne.n	800328e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003288:	2301      	movs	r3, #1
 800328a:	60fb      	str	r3, [r7, #12]
 800328c:	e001      	b.n	8003292 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800328e:	2300      	movs	r3, #0
 8003290:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003292:	f001 fd9b 	bl	8004dcc <vPortExitCritical>

	return xReturn;
 8003296:	68fb      	ldr	r3, [r7, #12]
}
 8003298:	4618      	mov	r0, r3
 800329a:	3710      	adds	r7, #16
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80032a8:	f001 fd5e 	bl	8004d68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d102      	bne.n	80032be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80032b8:	2301      	movs	r3, #1
 80032ba:	60fb      	str	r3, [r7, #12]
 80032bc:	e001      	b.n	80032c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80032be:	2300      	movs	r3, #0
 80032c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80032c2:	f001 fd83 	bl	8004dcc <vPortExitCritical>

	return xReturn;
 80032c6:	68fb      	ldr	r3, [r7, #12]
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80032d0:	b480      	push	{r7}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80032da:	2300      	movs	r3, #0
 80032dc:	60fb      	str	r3, [r7, #12]
 80032de:	e014      	b.n	800330a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80032e0:	4a0f      	ldr	r2, [pc, #60]	@ (8003320 <vQueueAddToRegistry+0x50>)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d10b      	bne.n	8003304 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80032ec:	490c      	ldr	r1, [pc, #48]	@ (8003320 <vQueueAddToRegistry+0x50>)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80032f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003320 <vQueueAddToRegistry+0x50>)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	4413      	add	r3, r2
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003302:	e006      	b.n	8003312 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	3301      	adds	r3, #1
 8003308:	60fb      	str	r3, [r7, #12]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2b07      	cmp	r3, #7
 800330e:	d9e7      	bls.n	80032e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003310:	bf00      	nop
 8003312:	bf00      	nop
 8003314:	3714      	adds	r7, #20
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	20000828 	.word	0x20000828

08003324 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800332c:	2300      	movs	r3, #0
 800332e:	60fb      	str	r3, [r7, #12]
 8003330:	e016      	b.n	8003360 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8003332:	4a10      	ldr	r2, [pc, #64]	@ (8003374 <vQueueUnregisterQueue+0x50>)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	4413      	add	r3, r2
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	429a      	cmp	r2, r3
 8003340:	d10b      	bne.n	800335a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8003342:	4a0c      	ldr	r2, [pc, #48]	@ (8003374 <vQueueUnregisterQueue+0x50>)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2100      	movs	r1, #0
 8003348:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800334c:	4a09      	ldr	r2, [pc, #36]	@ (8003374 <vQueueUnregisterQueue+0x50>)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	00db      	lsls	r3, r3, #3
 8003352:	4413      	add	r3, r2
 8003354:	2200      	movs	r2, #0
 8003356:	605a      	str	r2, [r3, #4]
				break;
 8003358:	e006      	b.n	8003368 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	3301      	adds	r3, #1
 800335e:	60fb      	str	r3, [r7, #12]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2b07      	cmp	r3, #7
 8003364:	d9e5      	bls.n	8003332 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8003366:	bf00      	nop
 8003368:	bf00      	nop
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	20000828 	.word	0x20000828

08003378 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003378:	b580      	push	{r7, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003388:	f001 fcee 	bl	8004d68 <vPortEnterCritical>
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003392:	b25b      	sxtb	r3, r3
 8003394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003398:	d103      	bne.n	80033a2 <vQueueWaitForMessageRestricted+0x2a>
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80033a8:	b25b      	sxtb	r3, r3
 80033aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ae:	d103      	bne.n	80033b8 <vQueueWaitForMessageRestricted+0x40>
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80033b8:	f001 fd08 	bl	8004dcc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d106      	bne.n	80033d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	3324      	adds	r3, #36	@ 0x24
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	68b9      	ldr	r1, [r7, #8]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f000 fc6d 	bl	8003cac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80033d2:	6978      	ldr	r0, [r7, #20]
 80033d4:	f7ff fefc 	bl	80031d0 <prvUnlockQueue>
	}
 80033d8:	bf00      	nop
 80033da:	3718      	adds	r7, #24
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b08e      	sub	sp, #56	@ 0x38
 80033e4:	af04      	add	r7, sp, #16
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
 80033ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80033ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d10b      	bne.n	800340c <xTaskCreateStatic+0x2c>
	__asm volatile
 80033f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033f8:	f383 8811 	msr	BASEPRI, r3
 80033fc:	f3bf 8f6f 	isb	sy
 8003400:	f3bf 8f4f 	dsb	sy
 8003404:	623b      	str	r3, [r7, #32]
}
 8003406:	bf00      	nop
 8003408:	bf00      	nop
 800340a:	e7fd      	b.n	8003408 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800340c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10b      	bne.n	800342a <xTaskCreateStatic+0x4a>
	__asm volatile
 8003412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003416:	f383 8811 	msr	BASEPRI, r3
 800341a:	f3bf 8f6f 	isb	sy
 800341e:	f3bf 8f4f 	dsb	sy
 8003422:	61fb      	str	r3, [r7, #28]
}
 8003424:	bf00      	nop
 8003426:	bf00      	nop
 8003428:	e7fd      	b.n	8003426 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800342a:	23a8      	movs	r3, #168	@ 0xa8
 800342c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	2ba8      	cmp	r3, #168	@ 0xa8
 8003432:	d00b      	beq.n	800344c <xTaskCreateStatic+0x6c>
	__asm volatile
 8003434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003438:	f383 8811 	msr	BASEPRI, r3
 800343c:	f3bf 8f6f 	isb	sy
 8003440:	f3bf 8f4f 	dsb	sy
 8003444:	61bb      	str	r3, [r7, #24]
}
 8003446:	bf00      	nop
 8003448:	bf00      	nop
 800344a:	e7fd      	b.n	8003448 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800344c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800344e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003450:	2b00      	cmp	r3, #0
 8003452:	d01e      	beq.n	8003492 <xTaskCreateStatic+0xb2>
 8003454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003456:	2b00      	cmp	r3, #0
 8003458:	d01b      	beq.n	8003492 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800345a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800345c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800345e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003460:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003462:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003466:	2202      	movs	r2, #2
 8003468:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800346c:	2300      	movs	r3, #0
 800346e:	9303      	str	r3, [sp, #12]
 8003470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003472:	9302      	str	r3, [sp, #8]
 8003474:	f107 0314 	add.w	r3, r7, #20
 8003478:	9301      	str	r3, [sp, #4]
 800347a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800347c:	9300      	str	r3, [sp, #0]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	68b9      	ldr	r1, [r7, #8]
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f000 f851 	bl	800352c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800348a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800348c:	f000 f8f6 	bl	800367c <prvAddNewTaskToReadyList>
 8003490:	e001      	b.n	8003496 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003492:	2300      	movs	r3, #0
 8003494:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003496:	697b      	ldr	r3, [r7, #20]
	}
 8003498:	4618      	mov	r0, r3
 800349a:	3728      	adds	r7, #40	@ 0x28
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b08c      	sub	sp, #48	@ 0x30
 80034a4:	af04      	add	r7, sp, #16
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	603b      	str	r3, [r7, #0]
 80034ac:	4613      	mov	r3, r2
 80034ae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80034b0:	88fb      	ldrh	r3, [r7, #6]
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	4618      	mov	r0, r3
 80034b6:	f001 fd79 	bl	8004fac <pvPortMalloc>
 80034ba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00e      	beq.n	80034e0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80034c2:	20a8      	movs	r0, #168	@ 0xa8
 80034c4:	f001 fd72 	bl	8004fac <pvPortMalloc>
 80034c8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d003      	beq.n	80034d8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80034d6:	e005      	b.n	80034e4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80034d8:	6978      	ldr	r0, [r7, #20]
 80034da:	f001 fe35 	bl	8005148 <vPortFree>
 80034de:	e001      	b.n	80034e4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80034e0:	2300      	movs	r3, #0
 80034e2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d017      	beq.n	800351a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80034f2:	88fa      	ldrh	r2, [r7, #6]
 80034f4:	2300      	movs	r3, #0
 80034f6:	9303      	str	r3, [sp, #12]
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	9302      	str	r3, [sp, #8]
 80034fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034fe:	9301      	str	r3, [sp, #4]
 8003500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003502:	9300      	str	r3, [sp, #0]
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	68b9      	ldr	r1, [r7, #8]
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f000 f80f 	bl	800352c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800350e:	69f8      	ldr	r0, [r7, #28]
 8003510:	f000 f8b4 	bl	800367c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003514:	2301      	movs	r3, #1
 8003516:	61bb      	str	r3, [r7, #24]
 8003518:	e002      	b.n	8003520 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800351a:	f04f 33ff 	mov.w	r3, #4294967295
 800351e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003520:	69bb      	ldr	r3, [r7, #24]
	}
 8003522:	4618      	mov	r0, r3
 8003524:	3720      	adds	r7, #32
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
	...

0800352c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b088      	sub	sp, #32
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
 8003538:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800353a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800353c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	461a      	mov	r2, r3
 8003544:	21a5      	movs	r1, #165	@ 0xa5
 8003546:	f001 ff1f 	bl	8005388 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800354a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800354c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003554:	3b01      	subs	r3, #1
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	4413      	add	r3, r2
 800355a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	f023 0307 	bic.w	r3, r3, #7
 8003562:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	f003 0307 	and.w	r3, r3, #7
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00b      	beq.n	8003586 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800356e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003572:	f383 8811 	msr	BASEPRI, r3
 8003576:	f3bf 8f6f 	isb	sy
 800357a:	f3bf 8f4f 	dsb	sy
 800357e:	617b      	str	r3, [r7, #20]
}
 8003580:	bf00      	nop
 8003582:	bf00      	nop
 8003584:	e7fd      	b.n	8003582 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d01f      	beq.n	80035cc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800358c:	2300      	movs	r3, #0
 800358e:	61fb      	str	r3, [r7, #28]
 8003590:	e012      	b.n	80035b8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003592:	68ba      	ldr	r2, [r7, #8]
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	4413      	add	r3, r2
 8003598:	7819      	ldrb	r1, [r3, #0]
 800359a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	4413      	add	r3, r2
 80035a0:	3334      	adds	r3, #52	@ 0x34
 80035a2:	460a      	mov	r2, r1
 80035a4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80035a6:	68ba      	ldr	r2, [r7, #8]
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	4413      	add	r3, r2
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d006      	beq.n	80035c0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	3301      	adds	r3, #1
 80035b6:	61fb      	str	r3, [r7, #28]
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	2b0f      	cmp	r3, #15
 80035bc:	d9e9      	bls.n	8003592 <prvInitialiseNewTask+0x66>
 80035be:	e000      	b.n	80035c2 <prvInitialiseNewTask+0x96>
			{
				break;
 80035c0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80035c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80035ca:	e003      	b.n	80035d4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80035cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80035d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035d6:	2b37      	cmp	r3, #55	@ 0x37
 80035d8:	d901      	bls.n	80035de <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80035da:	2337      	movs	r3, #55	@ 0x37
 80035dc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80035de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80035e2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80035e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80035e8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80035ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ec:	2200      	movs	r2, #0
 80035ee:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80035f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035f2:	3304      	adds	r3, #4
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7fe fec3 	bl	8002380 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80035fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035fc:	3318      	adds	r3, #24
 80035fe:	4618      	mov	r0, r3
 8003600:	f7fe febe 	bl	8002380 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003606:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003608:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800360a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800360c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003612:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003616:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003618:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800361a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800361c:	2200      	movs	r2, #0
 800361e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003624:	2200      	movs	r2, #0
 8003626:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800362a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800362c:	3354      	adds	r3, #84	@ 0x54
 800362e:	224c      	movs	r2, #76	@ 0x4c
 8003630:	2100      	movs	r1, #0
 8003632:	4618      	mov	r0, r3
 8003634:	f001 fea8 	bl	8005388 <memset>
 8003638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800363a:	4a0d      	ldr	r2, [pc, #52]	@ (8003670 <prvInitialiseNewTask+0x144>)
 800363c:	659a      	str	r2, [r3, #88]	@ 0x58
 800363e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003640:	4a0c      	ldr	r2, [pc, #48]	@ (8003674 <prvInitialiseNewTask+0x148>)
 8003642:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003646:	4a0c      	ldr	r2, [pc, #48]	@ (8003678 <prvInitialiseNewTask+0x14c>)
 8003648:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	68f9      	ldr	r1, [r7, #12]
 800364e:	69b8      	ldr	r0, [r7, #24]
 8003650:	f001 fa5a 	bl	8004b08 <pxPortInitialiseStack>
 8003654:	4602      	mov	r2, r0
 8003656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003658:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800365a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800365c:	2b00      	cmp	r3, #0
 800365e:	d002      	beq.n	8003666 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003662:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003664:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003666:	bf00      	nop
 8003668:	3720      	adds	r7, #32
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	20004abc 	.word	0x20004abc
 8003674:	20004b24 	.word	0x20004b24
 8003678:	20004b8c 	.word	0x20004b8c

0800367c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003684:	f001 fb70 	bl	8004d68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003688:	4b2d      	ldr	r3, [pc, #180]	@ (8003740 <prvAddNewTaskToReadyList+0xc4>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	3301      	adds	r3, #1
 800368e:	4a2c      	ldr	r2, [pc, #176]	@ (8003740 <prvAddNewTaskToReadyList+0xc4>)
 8003690:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003692:	4b2c      	ldr	r3, [pc, #176]	@ (8003744 <prvAddNewTaskToReadyList+0xc8>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d109      	bne.n	80036ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800369a:	4a2a      	ldr	r2, [pc, #168]	@ (8003744 <prvAddNewTaskToReadyList+0xc8>)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80036a0:	4b27      	ldr	r3, [pc, #156]	@ (8003740 <prvAddNewTaskToReadyList+0xc4>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d110      	bne.n	80036ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80036a8:	f000 fc2e 	bl	8003f08 <prvInitialiseTaskLists>
 80036ac:	e00d      	b.n	80036ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80036ae:	4b26      	ldr	r3, [pc, #152]	@ (8003748 <prvAddNewTaskToReadyList+0xcc>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d109      	bne.n	80036ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80036b6:	4b23      	ldr	r3, [pc, #140]	@ (8003744 <prvAddNewTaskToReadyList+0xc8>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d802      	bhi.n	80036ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80036c4:	4a1f      	ldr	r2, [pc, #124]	@ (8003744 <prvAddNewTaskToReadyList+0xc8>)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80036ca:	4b20      	ldr	r3, [pc, #128]	@ (800374c <prvAddNewTaskToReadyList+0xd0>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	3301      	adds	r3, #1
 80036d0:	4a1e      	ldr	r2, [pc, #120]	@ (800374c <prvAddNewTaskToReadyList+0xd0>)
 80036d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80036d4:	4b1d      	ldr	r3, [pc, #116]	@ (800374c <prvAddNewTaskToReadyList+0xd0>)
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003750 <prvAddNewTaskToReadyList+0xd4>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d903      	bls.n	80036f0 <prvAddNewTaskToReadyList+0x74>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ec:	4a18      	ldr	r2, [pc, #96]	@ (8003750 <prvAddNewTaskToReadyList+0xd4>)
 80036ee:	6013      	str	r3, [r2, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036f4:	4613      	mov	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	4413      	add	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4a15      	ldr	r2, [pc, #84]	@ (8003754 <prvAddNewTaskToReadyList+0xd8>)
 80036fe:	441a      	add	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	3304      	adds	r3, #4
 8003704:	4619      	mov	r1, r3
 8003706:	4610      	mov	r0, r2
 8003708:	f7fe fe47 	bl	800239a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800370c:	f001 fb5e 	bl	8004dcc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003710:	4b0d      	ldr	r3, [pc, #52]	@ (8003748 <prvAddNewTaskToReadyList+0xcc>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00e      	beq.n	8003736 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003718:	4b0a      	ldr	r3, [pc, #40]	@ (8003744 <prvAddNewTaskToReadyList+0xc8>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003722:	429a      	cmp	r2, r3
 8003724:	d207      	bcs.n	8003736 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003726:	4b0c      	ldr	r3, [pc, #48]	@ (8003758 <prvAddNewTaskToReadyList+0xdc>)
 8003728:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	f3bf 8f4f 	dsb	sy
 8003732:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003736:	bf00      	nop
 8003738:	3708      	adds	r7, #8
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	20000d3c 	.word	0x20000d3c
 8003744:	20000868 	.word	0x20000868
 8003748:	20000d48 	.word	0x20000d48
 800374c:	20000d58 	.word	0x20000d58
 8003750:	20000d44 	.word	0x20000d44
 8003754:	2000086c 	.word	0x2000086c
 8003758:	e000ed04 	.word	0xe000ed04

0800375c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003764:	2300      	movs	r3, #0
 8003766:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d018      	beq.n	80037a0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800376e:	4b14      	ldr	r3, [pc, #80]	@ (80037c0 <vTaskDelay+0x64>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00b      	beq.n	800378e <vTaskDelay+0x32>
	__asm volatile
 8003776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800377a:	f383 8811 	msr	BASEPRI, r3
 800377e:	f3bf 8f6f 	isb	sy
 8003782:	f3bf 8f4f 	dsb	sy
 8003786:	60bb      	str	r3, [r7, #8]
}
 8003788:	bf00      	nop
 800378a:	bf00      	nop
 800378c:	e7fd      	b.n	800378a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800378e:	f000 f88b 	bl	80038a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003792:	2100      	movs	r1, #0
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 fe09 	bl	80043ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800379a:	f000 f893 	bl	80038c4 <xTaskResumeAll>
 800379e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d107      	bne.n	80037b6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80037a6:	4b07      	ldr	r3, [pc, #28]	@ (80037c4 <vTaskDelay+0x68>)
 80037a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037ac:	601a      	str	r2, [r3, #0]
 80037ae:	f3bf 8f4f 	dsb	sy
 80037b2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80037b6:	bf00      	nop
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	20000d64 	.word	0x20000d64
 80037c4:	e000ed04 	.word	0xe000ed04

080037c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b08a      	sub	sp, #40	@ 0x28
 80037cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80037ce:	2300      	movs	r3, #0
 80037d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80037d2:	2300      	movs	r3, #0
 80037d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80037d6:	463a      	mov	r2, r7
 80037d8:	1d39      	adds	r1, r7, #4
 80037da:	f107 0308 	add.w	r3, r7, #8
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fe fd7a 	bl	80022d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80037e4:	6839      	ldr	r1, [r7, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68ba      	ldr	r2, [r7, #8]
 80037ea:	9202      	str	r2, [sp, #8]
 80037ec:	9301      	str	r3, [sp, #4]
 80037ee:	2300      	movs	r3, #0
 80037f0:	9300      	str	r3, [sp, #0]
 80037f2:	2300      	movs	r3, #0
 80037f4:	460a      	mov	r2, r1
 80037f6:	4924      	ldr	r1, [pc, #144]	@ (8003888 <vTaskStartScheduler+0xc0>)
 80037f8:	4824      	ldr	r0, [pc, #144]	@ (800388c <vTaskStartScheduler+0xc4>)
 80037fa:	f7ff fdf1 	bl	80033e0 <xTaskCreateStatic>
 80037fe:	4603      	mov	r3, r0
 8003800:	4a23      	ldr	r2, [pc, #140]	@ (8003890 <vTaskStartScheduler+0xc8>)
 8003802:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003804:	4b22      	ldr	r3, [pc, #136]	@ (8003890 <vTaskStartScheduler+0xc8>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d002      	beq.n	8003812 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800380c:	2301      	movs	r3, #1
 800380e:	617b      	str	r3, [r7, #20]
 8003810:	e001      	b.n	8003816 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003812:	2300      	movs	r3, #0
 8003814:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d102      	bne.n	8003822 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800381c:	f000 fe1a 	bl	8004454 <xTimerCreateTimerTask>
 8003820:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d11b      	bne.n	8003860 <vTaskStartScheduler+0x98>
	__asm volatile
 8003828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800382c:	f383 8811 	msr	BASEPRI, r3
 8003830:	f3bf 8f6f 	isb	sy
 8003834:	f3bf 8f4f 	dsb	sy
 8003838:	613b      	str	r3, [r7, #16]
}
 800383a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800383c:	4b15      	ldr	r3, [pc, #84]	@ (8003894 <vTaskStartScheduler+0xcc>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	3354      	adds	r3, #84	@ 0x54
 8003842:	4a15      	ldr	r2, [pc, #84]	@ (8003898 <vTaskStartScheduler+0xd0>)
 8003844:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003846:	4b15      	ldr	r3, [pc, #84]	@ (800389c <vTaskStartScheduler+0xd4>)
 8003848:	f04f 32ff 	mov.w	r2, #4294967295
 800384c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800384e:	4b14      	ldr	r3, [pc, #80]	@ (80038a0 <vTaskStartScheduler+0xd8>)
 8003850:	2201      	movs	r2, #1
 8003852:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003854:	4b13      	ldr	r3, [pc, #76]	@ (80038a4 <vTaskStartScheduler+0xdc>)
 8003856:	2200      	movs	r2, #0
 8003858:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800385a:	f001 f9e1 	bl	8004c20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800385e:	e00f      	b.n	8003880 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003866:	d10b      	bne.n	8003880 <vTaskStartScheduler+0xb8>
	__asm volatile
 8003868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800386c:	f383 8811 	msr	BASEPRI, r3
 8003870:	f3bf 8f6f 	isb	sy
 8003874:	f3bf 8f4f 	dsb	sy
 8003878:	60fb      	str	r3, [r7, #12]
}
 800387a:	bf00      	nop
 800387c:	bf00      	nop
 800387e:	e7fd      	b.n	800387c <vTaskStartScheduler+0xb4>
}
 8003880:	bf00      	nop
 8003882:	3718      	adds	r7, #24
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	0800559c 	.word	0x0800559c
 800388c:	08003ed9 	.word	0x08003ed9
 8003890:	20000d60 	.word	0x20000d60
 8003894:	20000868 	.word	0x20000868
 8003898:	20000010 	.word	0x20000010
 800389c:	20000d5c 	.word	0x20000d5c
 80038a0:	20000d48 	.word	0x20000d48
 80038a4:	20000d40 	.word	0x20000d40

080038a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80038ac:	4b04      	ldr	r3, [pc, #16]	@ (80038c0 <vTaskSuspendAll+0x18>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	3301      	adds	r3, #1
 80038b2:	4a03      	ldr	r2, [pc, #12]	@ (80038c0 <vTaskSuspendAll+0x18>)
 80038b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80038b6:	bf00      	nop
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr
 80038c0:	20000d64 	.word	0x20000d64

080038c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80038ca:	2300      	movs	r3, #0
 80038cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80038ce:	2300      	movs	r3, #0
 80038d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80038d2:	4b42      	ldr	r3, [pc, #264]	@ (80039dc <xTaskResumeAll+0x118>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d10b      	bne.n	80038f2 <xTaskResumeAll+0x2e>
	__asm volatile
 80038da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038de:	f383 8811 	msr	BASEPRI, r3
 80038e2:	f3bf 8f6f 	isb	sy
 80038e6:	f3bf 8f4f 	dsb	sy
 80038ea:	603b      	str	r3, [r7, #0]
}
 80038ec:	bf00      	nop
 80038ee:	bf00      	nop
 80038f0:	e7fd      	b.n	80038ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80038f2:	f001 fa39 	bl	8004d68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80038f6:	4b39      	ldr	r3, [pc, #228]	@ (80039dc <xTaskResumeAll+0x118>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	3b01      	subs	r3, #1
 80038fc:	4a37      	ldr	r2, [pc, #220]	@ (80039dc <xTaskResumeAll+0x118>)
 80038fe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003900:	4b36      	ldr	r3, [pc, #216]	@ (80039dc <xTaskResumeAll+0x118>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d162      	bne.n	80039ce <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003908:	4b35      	ldr	r3, [pc, #212]	@ (80039e0 <xTaskResumeAll+0x11c>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d05e      	beq.n	80039ce <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003910:	e02f      	b.n	8003972 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003912:	4b34      	ldr	r3, [pc, #208]	@ (80039e4 <xTaskResumeAll+0x120>)
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	3318      	adds	r3, #24
 800391e:	4618      	mov	r0, r3
 8003920:	f7fe fd98 	bl	8002454 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	3304      	adds	r3, #4
 8003928:	4618      	mov	r0, r3
 800392a:	f7fe fd93 	bl	8002454 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003932:	4b2d      	ldr	r3, [pc, #180]	@ (80039e8 <xTaskResumeAll+0x124>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	429a      	cmp	r2, r3
 8003938:	d903      	bls.n	8003942 <xTaskResumeAll+0x7e>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800393e:	4a2a      	ldr	r2, [pc, #168]	@ (80039e8 <xTaskResumeAll+0x124>)
 8003940:	6013      	str	r3, [r2, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003946:	4613      	mov	r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	4413      	add	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	4a27      	ldr	r2, [pc, #156]	@ (80039ec <xTaskResumeAll+0x128>)
 8003950:	441a      	add	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	3304      	adds	r3, #4
 8003956:	4619      	mov	r1, r3
 8003958:	4610      	mov	r0, r2
 800395a:	f7fe fd1e 	bl	800239a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003962:	4b23      	ldr	r3, [pc, #140]	@ (80039f0 <xTaskResumeAll+0x12c>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003968:	429a      	cmp	r2, r3
 800396a:	d302      	bcc.n	8003972 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800396c:	4b21      	ldr	r3, [pc, #132]	@ (80039f4 <xTaskResumeAll+0x130>)
 800396e:	2201      	movs	r2, #1
 8003970:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003972:	4b1c      	ldr	r3, [pc, #112]	@ (80039e4 <xTaskResumeAll+0x120>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1cb      	bne.n	8003912 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003980:	f000 fb66 	bl	8004050 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003984:	4b1c      	ldr	r3, [pc, #112]	@ (80039f8 <xTaskResumeAll+0x134>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d010      	beq.n	80039b2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003990:	f000 f846 	bl	8003a20 <xTaskIncrementTick>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d002      	beq.n	80039a0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800399a:	4b16      	ldr	r3, [pc, #88]	@ (80039f4 <xTaskResumeAll+0x130>)
 800399c:	2201      	movs	r2, #1
 800399e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3b01      	subs	r3, #1
 80039a4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1f1      	bne.n	8003990 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80039ac:	4b12      	ldr	r3, [pc, #72]	@ (80039f8 <xTaskResumeAll+0x134>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80039b2:	4b10      	ldr	r3, [pc, #64]	@ (80039f4 <xTaskResumeAll+0x130>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d009      	beq.n	80039ce <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80039ba:	2301      	movs	r3, #1
 80039bc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80039be:	4b0f      	ldr	r3, [pc, #60]	@ (80039fc <xTaskResumeAll+0x138>)
 80039c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039c4:	601a      	str	r2, [r3, #0]
 80039c6:	f3bf 8f4f 	dsb	sy
 80039ca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80039ce:	f001 f9fd 	bl	8004dcc <vPortExitCritical>

	return xAlreadyYielded;
 80039d2:	68bb      	ldr	r3, [r7, #8]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3710      	adds	r7, #16
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	20000d64 	.word	0x20000d64
 80039e0:	20000d3c 	.word	0x20000d3c
 80039e4:	20000cfc 	.word	0x20000cfc
 80039e8:	20000d44 	.word	0x20000d44
 80039ec:	2000086c 	.word	0x2000086c
 80039f0:	20000868 	.word	0x20000868
 80039f4:	20000d50 	.word	0x20000d50
 80039f8:	20000d4c 	.word	0x20000d4c
 80039fc:	e000ed04 	.word	0xe000ed04

08003a00 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003a06:	4b05      	ldr	r3, [pc, #20]	@ (8003a1c <xTaskGetTickCount+0x1c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003a0c:	687b      	ldr	r3, [r7, #4]
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	20000d40 	.word	0x20000d40

08003a20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b086      	sub	sp, #24
 8003a24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003a26:	2300      	movs	r3, #0
 8003a28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a2a:	4b4f      	ldr	r3, [pc, #316]	@ (8003b68 <xTaskIncrementTick+0x148>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f040 8090 	bne.w	8003b54 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003a34:	4b4d      	ldr	r3, [pc, #308]	@ (8003b6c <xTaskIncrementTick+0x14c>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	3301      	adds	r3, #1
 8003a3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003a3c:	4a4b      	ldr	r2, [pc, #300]	@ (8003b6c <xTaskIncrementTick+0x14c>)
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d121      	bne.n	8003a8c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003a48:	4b49      	ldr	r3, [pc, #292]	@ (8003b70 <xTaskIncrementTick+0x150>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00b      	beq.n	8003a6a <xTaskIncrementTick+0x4a>
	__asm volatile
 8003a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a56:	f383 8811 	msr	BASEPRI, r3
 8003a5a:	f3bf 8f6f 	isb	sy
 8003a5e:	f3bf 8f4f 	dsb	sy
 8003a62:	603b      	str	r3, [r7, #0]
}
 8003a64:	bf00      	nop
 8003a66:	bf00      	nop
 8003a68:	e7fd      	b.n	8003a66 <xTaskIncrementTick+0x46>
 8003a6a:	4b41      	ldr	r3, [pc, #260]	@ (8003b70 <xTaskIncrementTick+0x150>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	60fb      	str	r3, [r7, #12]
 8003a70:	4b40      	ldr	r3, [pc, #256]	@ (8003b74 <xTaskIncrementTick+0x154>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a3e      	ldr	r2, [pc, #248]	@ (8003b70 <xTaskIncrementTick+0x150>)
 8003a76:	6013      	str	r3, [r2, #0]
 8003a78:	4a3e      	ldr	r2, [pc, #248]	@ (8003b74 <xTaskIncrementTick+0x154>)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6013      	str	r3, [r2, #0]
 8003a7e:	4b3e      	ldr	r3, [pc, #248]	@ (8003b78 <xTaskIncrementTick+0x158>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	3301      	adds	r3, #1
 8003a84:	4a3c      	ldr	r2, [pc, #240]	@ (8003b78 <xTaskIncrementTick+0x158>)
 8003a86:	6013      	str	r3, [r2, #0]
 8003a88:	f000 fae2 	bl	8004050 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003a8c:	4b3b      	ldr	r3, [pc, #236]	@ (8003b7c <xTaskIncrementTick+0x15c>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d349      	bcc.n	8003b2a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a96:	4b36      	ldr	r3, [pc, #216]	@ (8003b70 <xTaskIncrementTick+0x150>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d104      	bne.n	8003aaa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003aa0:	4b36      	ldr	r3, [pc, #216]	@ (8003b7c <xTaskIncrementTick+0x15c>)
 8003aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8003aa6:	601a      	str	r2, [r3, #0]
					break;
 8003aa8:	e03f      	b.n	8003b2a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003aaa:	4b31      	ldr	r3, [pc, #196]	@ (8003b70 <xTaskIncrementTick+0x150>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d203      	bcs.n	8003aca <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003ac2:	4a2e      	ldr	r2, [pc, #184]	@ (8003b7c <xTaskIncrementTick+0x15c>)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003ac8:	e02f      	b.n	8003b2a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	3304      	adds	r3, #4
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7fe fcc0 	bl	8002454 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d004      	beq.n	8003ae6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	3318      	adds	r3, #24
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7fe fcb7 	bl	8002454 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003aea:	4b25      	ldr	r3, [pc, #148]	@ (8003b80 <xTaskIncrementTick+0x160>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d903      	bls.n	8003afa <xTaskIncrementTick+0xda>
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003af6:	4a22      	ldr	r2, [pc, #136]	@ (8003b80 <xTaskIncrementTick+0x160>)
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003afe:	4613      	mov	r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	4413      	add	r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	4a1f      	ldr	r2, [pc, #124]	@ (8003b84 <xTaskIncrementTick+0x164>)
 8003b08:	441a      	add	r2, r3
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	3304      	adds	r3, #4
 8003b0e:	4619      	mov	r1, r3
 8003b10:	4610      	mov	r0, r2
 8003b12:	f7fe fc42 	bl	800239a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b1a:	4b1b      	ldr	r3, [pc, #108]	@ (8003b88 <xTaskIncrementTick+0x168>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d3b8      	bcc.n	8003a96 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003b24:	2301      	movs	r3, #1
 8003b26:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b28:	e7b5      	b.n	8003a96 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b2a:	4b17      	ldr	r3, [pc, #92]	@ (8003b88 <xTaskIncrementTick+0x168>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b30:	4914      	ldr	r1, [pc, #80]	@ (8003b84 <xTaskIncrementTick+0x164>)
 8003b32:	4613      	mov	r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4413      	add	r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	440b      	add	r3, r1
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d901      	bls.n	8003b46 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003b42:	2301      	movs	r3, #1
 8003b44:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003b46:	4b11      	ldr	r3, [pc, #68]	@ (8003b8c <xTaskIncrementTick+0x16c>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d007      	beq.n	8003b5e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	617b      	str	r3, [r7, #20]
 8003b52:	e004      	b.n	8003b5e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003b54:	4b0e      	ldr	r3, [pc, #56]	@ (8003b90 <xTaskIncrementTick+0x170>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	3301      	adds	r3, #1
 8003b5a:	4a0d      	ldr	r2, [pc, #52]	@ (8003b90 <xTaskIncrementTick+0x170>)
 8003b5c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003b5e:	697b      	ldr	r3, [r7, #20]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3718      	adds	r7, #24
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	20000d64 	.word	0x20000d64
 8003b6c:	20000d40 	.word	0x20000d40
 8003b70:	20000cf4 	.word	0x20000cf4
 8003b74:	20000cf8 	.word	0x20000cf8
 8003b78:	20000d54 	.word	0x20000d54
 8003b7c:	20000d5c 	.word	0x20000d5c
 8003b80:	20000d44 	.word	0x20000d44
 8003b84:	2000086c 	.word	0x2000086c
 8003b88:	20000868 	.word	0x20000868
 8003b8c:	20000d50 	.word	0x20000d50
 8003b90:	20000d4c 	.word	0x20000d4c

08003b94 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003b9a:	4b2b      	ldr	r3, [pc, #172]	@ (8003c48 <vTaskSwitchContext+0xb4>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d003      	beq.n	8003baa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003ba2:	4b2a      	ldr	r3, [pc, #168]	@ (8003c4c <vTaskSwitchContext+0xb8>)
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003ba8:	e047      	b.n	8003c3a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8003baa:	4b28      	ldr	r3, [pc, #160]	@ (8003c4c <vTaskSwitchContext+0xb8>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bb0:	4b27      	ldr	r3, [pc, #156]	@ (8003c50 <vTaskSwitchContext+0xbc>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	60fb      	str	r3, [r7, #12]
 8003bb6:	e011      	b.n	8003bdc <vTaskSwitchContext+0x48>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10b      	bne.n	8003bd6 <vTaskSwitchContext+0x42>
	__asm volatile
 8003bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bc2:	f383 8811 	msr	BASEPRI, r3
 8003bc6:	f3bf 8f6f 	isb	sy
 8003bca:	f3bf 8f4f 	dsb	sy
 8003bce:	607b      	str	r3, [r7, #4]
}
 8003bd0:	bf00      	nop
 8003bd2:	bf00      	nop
 8003bd4:	e7fd      	b.n	8003bd2 <vTaskSwitchContext+0x3e>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	60fb      	str	r3, [r7, #12]
 8003bdc:	491d      	ldr	r1, [pc, #116]	@ (8003c54 <vTaskSwitchContext+0xc0>)
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	4613      	mov	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4413      	add	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	440b      	add	r3, r1
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d0e3      	beq.n	8003bb8 <vTaskSwitchContext+0x24>
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	4413      	add	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	4a16      	ldr	r2, [pc, #88]	@ (8003c54 <vTaskSwitchContext+0xc0>)
 8003bfc:	4413      	add	r3, r2
 8003bfe:	60bb      	str	r3, [r7, #8]
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	605a      	str	r2, [r3, #4]
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	3308      	adds	r3, #8
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d104      	bne.n	8003c20 <vTaskSwitchContext+0x8c>
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	605a      	str	r2, [r3, #4]
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	4a0c      	ldr	r2, [pc, #48]	@ (8003c58 <vTaskSwitchContext+0xc4>)
 8003c28:	6013      	str	r3, [r2, #0]
 8003c2a:	4a09      	ldr	r2, [pc, #36]	@ (8003c50 <vTaskSwitchContext+0xbc>)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003c30:	4b09      	ldr	r3, [pc, #36]	@ (8003c58 <vTaskSwitchContext+0xc4>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	3354      	adds	r3, #84	@ 0x54
 8003c36:	4a09      	ldr	r2, [pc, #36]	@ (8003c5c <vTaskSwitchContext+0xc8>)
 8003c38:	6013      	str	r3, [r2, #0]
}
 8003c3a:	bf00      	nop
 8003c3c:	3714      	adds	r7, #20
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	20000d64 	.word	0x20000d64
 8003c4c:	20000d50 	.word	0x20000d50
 8003c50:	20000d44 	.word	0x20000d44
 8003c54:	2000086c 	.word	0x2000086c
 8003c58:	20000868 	.word	0x20000868
 8003c5c:	20000010 	.word	0x20000010

08003c60 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10b      	bne.n	8003c88 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c74:	f383 8811 	msr	BASEPRI, r3
 8003c78:	f3bf 8f6f 	isb	sy
 8003c7c:	f3bf 8f4f 	dsb	sy
 8003c80:	60fb      	str	r3, [r7, #12]
}
 8003c82:	bf00      	nop
 8003c84:	bf00      	nop
 8003c86:	e7fd      	b.n	8003c84 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c88:	4b07      	ldr	r3, [pc, #28]	@ (8003ca8 <vTaskPlaceOnEventList+0x48>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	3318      	adds	r3, #24
 8003c8e:	4619      	mov	r1, r3
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f7fe fba6 	bl	80023e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003c96:	2101      	movs	r1, #1
 8003c98:	6838      	ldr	r0, [r7, #0]
 8003c9a:	f000 fb87 	bl	80043ac <prvAddCurrentTaskToDelayedList>
}
 8003c9e:	bf00      	nop
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	20000868 	.word	0x20000868

08003cac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10b      	bne.n	8003cd6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cc2:	f383 8811 	msr	BASEPRI, r3
 8003cc6:	f3bf 8f6f 	isb	sy
 8003cca:	f3bf 8f4f 	dsb	sy
 8003cce:	617b      	str	r3, [r7, #20]
}
 8003cd0:	bf00      	nop
 8003cd2:	bf00      	nop
 8003cd4:	e7fd      	b.n	8003cd2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8003d00 <vTaskPlaceOnEventListRestricted+0x54>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	3318      	adds	r3, #24
 8003cdc:	4619      	mov	r1, r3
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	f7fe fb5b 	bl	800239a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d002      	beq.n	8003cf0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003cea:	f04f 33ff 	mov.w	r3, #4294967295
 8003cee:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003cf0:	6879      	ldr	r1, [r7, #4]
 8003cf2:	68b8      	ldr	r0, [r7, #8]
 8003cf4:	f000 fb5a 	bl	80043ac <prvAddCurrentTaskToDelayedList>
	}
 8003cf8:	bf00      	nop
 8003cfa:	3718      	adds	r7, #24
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	20000868 	.word	0x20000868

08003d04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d10b      	bne.n	8003d32 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d1e:	f383 8811 	msr	BASEPRI, r3
 8003d22:	f3bf 8f6f 	isb	sy
 8003d26:	f3bf 8f4f 	dsb	sy
 8003d2a:	60fb      	str	r3, [r7, #12]
}
 8003d2c:	bf00      	nop
 8003d2e:	bf00      	nop
 8003d30:	e7fd      	b.n	8003d2e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	3318      	adds	r3, #24
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7fe fb8c 	bl	8002454 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d3c:	4b1d      	ldr	r3, [pc, #116]	@ (8003db4 <xTaskRemoveFromEventList+0xb0>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d11d      	bne.n	8003d80 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	3304      	adds	r3, #4
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7fe fb83 	bl	8002454 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d52:	4b19      	ldr	r3, [pc, #100]	@ (8003db8 <xTaskRemoveFromEventList+0xb4>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d903      	bls.n	8003d62 <xTaskRemoveFromEventList+0x5e>
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d5e:	4a16      	ldr	r2, [pc, #88]	@ (8003db8 <xTaskRemoveFromEventList+0xb4>)
 8003d60:	6013      	str	r3, [r2, #0]
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d66:	4613      	mov	r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	4413      	add	r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	4a13      	ldr	r2, [pc, #76]	@ (8003dbc <xTaskRemoveFromEventList+0xb8>)
 8003d70:	441a      	add	r2, r3
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	3304      	adds	r3, #4
 8003d76:	4619      	mov	r1, r3
 8003d78:	4610      	mov	r0, r2
 8003d7a:	f7fe fb0e 	bl	800239a <vListInsertEnd>
 8003d7e:	e005      	b.n	8003d8c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	3318      	adds	r3, #24
 8003d84:	4619      	mov	r1, r3
 8003d86:	480e      	ldr	r0, [pc, #56]	@ (8003dc0 <xTaskRemoveFromEventList+0xbc>)
 8003d88:	f7fe fb07 	bl	800239a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d90:	4b0c      	ldr	r3, [pc, #48]	@ (8003dc4 <xTaskRemoveFromEventList+0xc0>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d905      	bls.n	8003da6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8003dc8 <xTaskRemoveFromEventList+0xc4>)
 8003da0:	2201      	movs	r2, #1
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	e001      	b.n	8003daa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003da6:	2300      	movs	r3, #0
 8003da8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003daa:	697b      	ldr	r3, [r7, #20]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3718      	adds	r7, #24
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	20000d64 	.word	0x20000d64
 8003db8:	20000d44 	.word	0x20000d44
 8003dbc:	2000086c 	.word	0x2000086c
 8003dc0:	20000cfc 	.word	0x20000cfc
 8003dc4:	20000868 	.word	0x20000868
 8003dc8:	20000d50 	.word	0x20000d50

08003dcc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003dd4:	4b06      	ldr	r3, [pc, #24]	@ (8003df0 <vTaskInternalSetTimeOutState+0x24>)
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003ddc:	4b05      	ldr	r3, [pc, #20]	@ (8003df4 <vTaskInternalSetTimeOutState+0x28>)
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	605a      	str	r2, [r3, #4]
}
 8003de4:	bf00      	nop
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	20000d54 	.word	0x20000d54
 8003df4:	20000d40 	.word	0x20000d40

08003df8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b088      	sub	sp, #32
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d10b      	bne.n	8003e20 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e0c:	f383 8811 	msr	BASEPRI, r3
 8003e10:	f3bf 8f6f 	isb	sy
 8003e14:	f3bf 8f4f 	dsb	sy
 8003e18:	613b      	str	r3, [r7, #16]
}
 8003e1a:	bf00      	nop
 8003e1c:	bf00      	nop
 8003e1e:	e7fd      	b.n	8003e1c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10b      	bne.n	8003e3e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e2a:	f383 8811 	msr	BASEPRI, r3
 8003e2e:	f3bf 8f6f 	isb	sy
 8003e32:	f3bf 8f4f 	dsb	sy
 8003e36:	60fb      	str	r3, [r7, #12]
}
 8003e38:	bf00      	nop
 8003e3a:	bf00      	nop
 8003e3c:	e7fd      	b.n	8003e3a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003e3e:	f000 ff93 	bl	8004d68 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003e42:	4b1d      	ldr	r3, [pc, #116]	@ (8003eb8 <xTaskCheckForTimeOut+0xc0>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e5a:	d102      	bne.n	8003e62 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	61fb      	str	r3, [r7, #28]
 8003e60:	e023      	b.n	8003eaa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	4b15      	ldr	r3, [pc, #84]	@ (8003ebc <xTaskCheckForTimeOut+0xc4>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d007      	beq.n	8003e7e <xTaskCheckForTimeOut+0x86>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	69ba      	ldr	r2, [r7, #24]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d302      	bcc.n	8003e7e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	61fb      	str	r3, [r7, #28]
 8003e7c:	e015      	b.n	8003eaa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d20b      	bcs.n	8003ea0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	1ad2      	subs	r2, r2, r3
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f7ff ff99 	bl	8003dcc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	61fb      	str	r3, [r7, #28]
 8003e9e:	e004      	b.n	8003eaa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003eaa:	f000 ff8f 	bl	8004dcc <vPortExitCritical>

	return xReturn;
 8003eae:	69fb      	ldr	r3, [r7, #28]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3720      	adds	r7, #32
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	20000d40 	.word	0x20000d40
 8003ebc:	20000d54 	.word	0x20000d54

08003ec0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003ec4:	4b03      	ldr	r3, [pc, #12]	@ (8003ed4 <vTaskMissedYield+0x14>)
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	601a      	str	r2, [r3, #0]
}
 8003eca:	bf00      	nop
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr
 8003ed4:	20000d50 	.word	0x20000d50

08003ed8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003ee0:	f000 f852 	bl	8003f88 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003ee4:	4b06      	ldr	r3, [pc, #24]	@ (8003f00 <prvIdleTask+0x28>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d9f9      	bls.n	8003ee0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003eec:	4b05      	ldr	r3, [pc, #20]	@ (8003f04 <prvIdleTask+0x2c>)
 8003eee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ef2:	601a      	str	r2, [r3, #0]
 8003ef4:	f3bf 8f4f 	dsb	sy
 8003ef8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003efc:	e7f0      	b.n	8003ee0 <prvIdleTask+0x8>
 8003efe:	bf00      	nop
 8003f00:	2000086c 	.word	0x2000086c
 8003f04:	e000ed04 	.word	0xe000ed04

08003f08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f0e:	2300      	movs	r3, #0
 8003f10:	607b      	str	r3, [r7, #4]
 8003f12:	e00c      	b.n	8003f2e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	4613      	mov	r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	4413      	add	r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	4a12      	ldr	r2, [pc, #72]	@ (8003f68 <prvInitialiseTaskLists+0x60>)
 8003f20:	4413      	add	r3, r2
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7fe fa0c 	bl	8002340 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	607b      	str	r3, [r7, #4]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2b37      	cmp	r3, #55	@ 0x37
 8003f32:	d9ef      	bls.n	8003f14 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003f34:	480d      	ldr	r0, [pc, #52]	@ (8003f6c <prvInitialiseTaskLists+0x64>)
 8003f36:	f7fe fa03 	bl	8002340 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003f3a:	480d      	ldr	r0, [pc, #52]	@ (8003f70 <prvInitialiseTaskLists+0x68>)
 8003f3c:	f7fe fa00 	bl	8002340 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003f40:	480c      	ldr	r0, [pc, #48]	@ (8003f74 <prvInitialiseTaskLists+0x6c>)
 8003f42:	f7fe f9fd 	bl	8002340 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003f46:	480c      	ldr	r0, [pc, #48]	@ (8003f78 <prvInitialiseTaskLists+0x70>)
 8003f48:	f7fe f9fa 	bl	8002340 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003f4c:	480b      	ldr	r0, [pc, #44]	@ (8003f7c <prvInitialiseTaskLists+0x74>)
 8003f4e:	f7fe f9f7 	bl	8002340 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003f52:	4b0b      	ldr	r3, [pc, #44]	@ (8003f80 <prvInitialiseTaskLists+0x78>)
 8003f54:	4a05      	ldr	r2, [pc, #20]	@ (8003f6c <prvInitialiseTaskLists+0x64>)
 8003f56:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003f58:	4b0a      	ldr	r3, [pc, #40]	@ (8003f84 <prvInitialiseTaskLists+0x7c>)
 8003f5a:	4a05      	ldr	r2, [pc, #20]	@ (8003f70 <prvInitialiseTaskLists+0x68>)
 8003f5c:	601a      	str	r2, [r3, #0]
}
 8003f5e:	bf00      	nop
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	2000086c 	.word	0x2000086c
 8003f6c:	20000ccc 	.word	0x20000ccc
 8003f70:	20000ce0 	.word	0x20000ce0
 8003f74:	20000cfc 	.word	0x20000cfc
 8003f78:	20000d10 	.word	0x20000d10
 8003f7c:	20000d28 	.word	0x20000d28
 8003f80:	20000cf4 	.word	0x20000cf4
 8003f84:	20000cf8 	.word	0x20000cf8

08003f88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f8e:	e019      	b.n	8003fc4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003f90:	f000 feea 	bl	8004d68 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f94:	4b10      	ldr	r3, [pc, #64]	@ (8003fd8 <prvCheckTasksWaitingTermination+0x50>)
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	3304      	adds	r3, #4
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7fe fa57 	bl	8002454 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8003fdc <prvCheckTasksWaitingTermination+0x54>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	3b01      	subs	r3, #1
 8003fac:	4a0b      	ldr	r2, [pc, #44]	@ (8003fdc <prvCheckTasksWaitingTermination+0x54>)
 8003fae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8003fe0 <prvCheckTasksWaitingTermination+0x58>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	4a0a      	ldr	r2, [pc, #40]	@ (8003fe0 <prvCheckTasksWaitingTermination+0x58>)
 8003fb8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003fba:	f000 ff07 	bl	8004dcc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 f810 	bl	8003fe4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003fc4:	4b06      	ldr	r3, [pc, #24]	@ (8003fe0 <prvCheckTasksWaitingTermination+0x58>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1e1      	bne.n	8003f90 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003fcc:	bf00      	nop
 8003fce:	bf00      	nop
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	20000d10 	.word	0x20000d10
 8003fdc:	20000d3c 	.word	0x20000d3c
 8003fe0:	20000d24 	.word	0x20000d24

08003fe4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	3354      	adds	r3, #84	@ 0x54
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f001 f9d1 	bl	8005398 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d108      	bne.n	8004012 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004004:	4618      	mov	r0, r3
 8004006:	f001 f89f 	bl	8005148 <vPortFree>
				vPortFree( pxTCB );
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f001 f89c 	bl	8005148 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004010:	e019      	b.n	8004046 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004018:	2b01      	cmp	r3, #1
 800401a:	d103      	bne.n	8004024 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f001 f893 	bl	8005148 <vPortFree>
	}
 8004022:	e010      	b.n	8004046 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800402a:	2b02      	cmp	r3, #2
 800402c:	d00b      	beq.n	8004046 <prvDeleteTCB+0x62>
	__asm volatile
 800402e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004032:	f383 8811 	msr	BASEPRI, r3
 8004036:	f3bf 8f6f 	isb	sy
 800403a:	f3bf 8f4f 	dsb	sy
 800403e:	60fb      	str	r3, [r7, #12]
}
 8004040:	bf00      	nop
 8004042:	bf00      	nop
 8004044:	e7fd      	b.n	8004042 <prvDeleteTCB+0x5e>
	}
 8004046:	bf00      	nop
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
	...

08004050 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004056:	4b0c      	ldr	r3, [pc, #48]	@ (8004088 <prvResetNextTaskUnblockTime+0x38>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d104      	bne.n	800406a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004060:	4b0a      	ldr	r3, [pc, #40]	@ (800408c <prvResetNextTaskUnblockTime+0x3c>)
 8004062:	f04f 32ff 	mov.w	r2, #4294967295
 8004066:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004068:	e008      	b.n	800407c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800406a:	4b07      	ldr	r3, [pc, #28]	@ (8004088 <prvResetNextTaskUnblockTime+0x38>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	4a04      	ldr	r2, [pc, #16]	@ (800408c <prvResetNextTaskUnblockTime+0x3c>)
 800407a:	6013      	str	r3, [r2, #0]
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr
 8004088:	20000cf4 	.word	0x20000cf4
 800408c:	20000d5c 	.word	0x20000d5c

08004090 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004096:	4b0b      	ldr	r3, [pc, #44]	@ (80040c4 <xTaskGetSchedulerState+0x34>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d102      	bne.n	80040a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800409e:	2301      	movs	r3, #1
 80040a0:	607b      	str	r3, [r7, #4]
 80040a2:	e008      	b.n	80040b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040a4:	4b08      	ldr	r3, [pc, #32]	@ (80040c8 <xTaskGetSchedulerState+0x38>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d102      	bne.n	80040b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80040ac:	2302      	movs	r3, #2
 80040ae:	607b      	str	r3, [r7, #4]
 80040b0:	e001      	b.n	80040b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80040b2:	2300      	movs	r3, #0
 80040b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80040b6:	687b      	ldr	r3, [r7, #4]
	}
 80040b8:	4618      	mov	r0, r3
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr
 80040c4:	20000d48 	.word	0x20000d48
 80040c8:	20000d64 	.word	0x20000d64

080040cc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80040d8:	2300      	movs	r3, #0
 80040da:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d051      	beq.n	8004186 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040e6:	4b2a      	ldr	r3, [pc, #168]	@ (8004190 <xTaskPriorityInherit+0xc4>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d241      	bcs.n	8004174 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	db06      	blt.n	8004106 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040f8:	4b25      	ldr	r3, [pc, #148]	@ (8004190 <xTaskPriorityInherit+0xc4>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040fe:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	6959      	ldr	r1, [r3, #20]
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800410e:	4613      	mov	r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	4413      	add	r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	4a1f      	ldr	r2, [pc, #124]	@ (8004194 <xTaskPriorityInherit+0xc8>)
 8004118:	4413      	add	r3, r2
 800411a:	4299      	cmp	r1, r3
 800411c:	d122      	bne.n	8004164 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	3304      	adds	r3, #4
 8004122:	4618      	mov	r0, r3
 8004124:	f7fe f996 	bl	8002454 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004128:	4b19      	ldr	r3, [pc, #100]	@ (8004190 <xTaskPriorityInherit+0xc4>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004136:	4b18      	ldr	r3, [pc, #96]	@ (8004198 <xTaskPriorityInherit+0xcc>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	429a      	cmp	r2, r3
 800413c:	d903      	bls.n	8004146 <xTaskPriorityInherit+0x7a>
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004142:	4a15      	ldr	r2, [pc, #84]	@ (8004198 <xTaskPriorityInherit+0xcc>)
 8004144:	6013      	str	r3, [r2, #0]
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800414a:	4613      	mov	r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4413      	add	r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	4a10      	ldr	r2, [pc, #64]	@ (8004194 <xTaskPriorityInherit+0xc8>)
 8004154:	441a      	add	r2, r3
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	3304      	adds	r3, #4
 800415a:	4619      	mov	r1, r3
 800415c:	4610      	mov	r0, r2
 800415e:	f7fe f91c 	bl	800239a <vListInsertEnd>
 8004162:	e004      	b.n	800416e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004164:	4b0a      	ldr	r3, [pc, #40]	@ (8004190 <xTaskPriorityInherit+0xc4>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800416e:	2301      	movs	r3, #1
 8004170:	60fb      	str	r3, [r7, #12]
 8004172:	e008      	b.n	8004186 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004178:	4b05      	ldr	r3, [pc, #20]	@ (8004190 <xTaskPriorityInherit+0xc4>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800417e:	429a      	cmp	r2, r3
 8004180:	d201      	bcs.n	8004186 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004182:	2301      	movs	r3, #1
 8004184:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004186:	68fb      	ldr	r3, [r7, #12]
	}
 8004188:	4618      	mov	r0, r3
 800418a:	3710      	adds	r7, #16
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	20000868 	.word	0x20000868
 8004194:	2000086c 	.word	0x2000086c
 8004198:	20000d44 	.word	0x20000d44

0800419c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80041a8:	2300      	movs	r3, #0
 80041aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d058      	beq.n	8004264 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80041b2:	4b2f      	ldr	r3, [pc, #188]	@ (8004270 <xTaskPriorityDisinherit+0xd4>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d00b      	beq.n	80041d4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80041bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c0:	f383 8811 	msr	BASEPRI, r3
 80041c4:	f3bf 8f6f 	isb	sy
 80041c8:	f3bf 8f4f 	dsb	sy
 80041cc:	60fb      	str	r3, [r7, #12]
}
 80041ce:	bf00      	nop
 80041d0:	bf00      	nop
 80041d2:	e7fd      	b.n	80041d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d10b      	bne.n	80041f4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80041dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041e0:	f383 8811 	msr	BASEPRI, r3
 80041e4:	f3bf 8f6f 	isb	sy
 80041e8:	f3bf 8f4f 	dsb	sy
 80041ec:	60bb      	str	r3, [r7, #8]
}
 80041ee:	bf00      	nop
 80041f0:	bf00      	nop
 80041f2:	e7fd      	b.n	80041f0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041f8:	1e5a      	subs	r2, r3, #1
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004206:	429a      	cmp	r2, r3
 8004208:	d02c      	beq.n	8004264 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800420e:	2b00      	cmp	r3, #0
 8004210:	d128      	bne.n	8004264 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	3304      	adds	r3, #4
 8004216:	4618      	mov	r0, r3
 8004218:	f7fe f91c 	bl	8002454 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004228:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004234:	4b0f      	ldr	r3, [pc, #60]	@ (8004274 <xTaskPriorityDisinherit+0xd8>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	429a      	cmp	r2, r3
 800423a:	d903      	bls.n	8004244 <xTaskPriorityDisinherit+0xa8>
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004240:	4a0c      	ldr	r2, [pc, #48]	@ (8004274 <xTaskPriorityDisinherit+0xd8>)
 8004242:	6013      	str	r3, [r2, #0]
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004248:	4613      	mov	r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	4413      	add	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4a09      	ldr	r2, [pc, #36]	@ (8004278 <xTaskPriorityDisinherit+0xdc>)
 8004252:	441a      	add	r2, r3
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	3304      	adds	r3, #4
 8004258:	4619      	mov	r1, r3
 800425a:	4610      	mov	r0, r2
 800425c:	f7fe f89d 	bl	800239a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004260:	2301      	movs	r3, #1
 8004262:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004264:	697b      	ldr	r3, [r7, #20]
	}
 8004266:	4618      	mov	r0, r3
 8004268:	3718      	adds	r7, #24
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	20000868 	.word	0x20000868
 8004274:	20000d44 	.word	0x20000d44
 8004278:	2000086c 	.word	0x2000086c

0800427c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800427c:	b580      	push	{r7, lr}
 800427e:	b088      	sub	sp, #32
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800428a:	2301      	movs	r3, #1
 800428c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d06c      	beq.n	800436e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004298:	2b00      	cmp	r3, #0
 800429a:	d10b      	bne.n	80042b4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800429c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042a0:	f383 8811 	msr	BASEPRI, r3
 80042a4:	f3bf 8f6f 	isb	sy
 80042a8:	f3bf 8f4f 	dsb	sy
 80042ac:	60fb      	str	r3, [r7, #12]
}
 80042ae:	bf00      	nop
 80042b0:	bf00      	nop
 80042b2:	e7fd      	b.n	80042b0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042b8:	683a      	ldr	r2, [r7, #0]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d902      	bls.n	80042c4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	61fb      	str	r3, [r7, #28]
 80042c2:	e002      	b.n	80042ca <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042c8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ce:	69fa      	ldr	r2, [r7, #28]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d04c      	beq.n	800436e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042d8:	697a      	ldr	r2, [r7, #20]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d147      	bne.n	800436e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80042de:	4b26      	ldr	r3, [pc, #152]	@ (8004378 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	69ba      	ldr	r2, [r7, #24]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d10b      	bne.n	8004300 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80042e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ec:	f383 8811 	msr	BASEPRI, r3
 80042f0:	f3bf 8f6f 	isb	sy
 80042f4:	f3bf 8f4f 	dsb	sy
 80042f8:	60bb      	str	r3, [r7, #8]
}
 80042fa:	bf00      	nop
 80042fc:	bf00      	nop
 80042fe:	e7fd      	b.n	80042fc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004304:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	69fa      	ldr	r2, [r7, #28]
 800430a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	2b00      	cmp	r3, #0
 8004312:	db04      	blt.n	800431e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	6959      	ldr	r1, [r3, #20]
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	4613      	mov	r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	4413      	add	r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4a13      	ldr	r2, [pc, #76]	@ (800437c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800432e:	4413      	add	r3, r2
 8004330:	4299      	cmp	r1, r3
 8004332:	d11c      	bne.n	800436e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	3304      	adds	r3, #4
 8004338:	4618      	mov	r0, r3
 800433a:	f7fe f88b 	bl	8002454 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004342:	4b0f      	ldr	r3, [pc, #60]	@ (8004380 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	429a      	cmp	r2, r3
 8004348:	d903      	bls.n	8004352 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800434e:	4a0c      	ldr	r2, [pc, #48]	@ (8004380 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004350:	6013      	str	r3, [r2, #0]
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004356:	4613      	mov	r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	4413      	add	r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	4a07      	ldr	r2, [pc, #28]	@ (800437c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004360:	441a      	add	r2, r3
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	3304      	adds	r3, #4
 8004366:	4619      	mov	r1, r3
 8004368:	4610      	mov	r0, r2
 800436a:	f7fe f816 	bl	800239a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800436e:	bf00      	nop
 8004370:	3720      	adds	r7, #32
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	20000868 	.word	0x20000868
 800437c:	2000086c 	.word	0x2000086c
 8004380:	20000d44 	.word	0x20000d44

08004384 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004388:	4b07      	ldr	r3, [pc, #28]	@ (80043a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d004      	beq.n	800439a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004390:	4b05      	ldr	r3, [pc, #20]	@ (80043a8 <pvTaskIncrementMutexHeldCount+0x24>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004396:	3201      	adds	r2, #1
 8004398:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800439a:	4b03      	ldr	r3, [pc, #12]	@ (80043a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800439c:	681b      	ldr	r3, [r3, #0]
	}
 800439e:	4618      	mov	r0, r3
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr
 80043a8:	20000868 	.word	0x20000868

080043ac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80043b6:	4b21      	ldr	r3, [pc, #132]	@ (800443c <prvAddCurrentTaskToDelayedList+0x90>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043bc:	4b20      	ldr	r3, [pc, #128]	@ (8004440 <prvAddCurrentTaskToDelayedList+0x94>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	3304      	adds	r3, #4
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7fe f846 	bl	8002454 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ce:	d10a      	bne.n	80043e6 <prvAddCurrentTaskToDelayedList+0x3a>
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d007      	beq.n	80043e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043d6:	4b1a      	ldr	r3, [pc, #104]	@ (8004440 <prvAddCurrentTaskToDelayedList+0x94>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	3304      	adds	r3, #4
 80043dc:	4619      	mov	r1, r3
 80043de:	4819      	ldr	r0, [pc, #100]	@ (8004444 <prvAddCurrentTaskToDelayedList+0x98>)
 80043e0:	f7fd ffdb 	bl	800239a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80043e4:	e026      	b.n	8004434 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4413      	add	r3, r2
 80043ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80043ee:	4b14      	ldr	r3, [pc, #80]	@ (8004440 <prvAddCurrentTaskToDelayedList+0x94>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68ba      	ldr	r2, [r7, #8]
 80043f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80043f6:	68ba      	ldr	r2, [r7, #8]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d209      	bcs.n	8004412 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043fe:	4b12      	ldr	r3, [pc, #72]	@ (8004448 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	4b0f      	ldr	r3, [pc, #60]	@ (8004440 <prvAddCurrentTaskToDelayedList+0x94>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	3304      	adds	r3, #4
 8004408:	4619      	mov	r1, r3
 800440a:	4610      	mov	r0, r2
 800440c:	f7fd ffe9 	bl	80023e2 <vListInsert>
}
 8004410:	e010      	b.n	8004434 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004412:	4b0e      	ldr	r3, [pc, #56]	@ (800444c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	4b0a      	ldr	r3, [pc, #40]	@ (8004440 <prvAddCurrentTaskToDelayedList+0x94>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	3304      	adds	r3, #4
 800441c:	4619      	mov	r1, r3
 800441e:	4610      	mov	r0, r2
 8004420:	f7fd ffdf 	bl	80023e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004424:	4b0a      	ldr	r3, [pc, #40]	@ (8004450 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68ba      	ldr	r2, [r7, #8]
 800442a:	429a      	cmp	r2, r3
 800442c:	d202      	bcs.n	8004434 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800442e:	4a08      	ldr	r2, [pc, #32]	@ (8004450 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	6013      	str	r3, [r2, #0]
}
 8004434:	bf00      	nop
 8004436:	3710      	adds	r7, #16
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	20000d40 	.word	0x20000d40
 8004440:	20000868 	.word	0x20000868
 8004444:	20000d28 	.word	0x20000d28
 8004448:	20000cf8 	.word	0x20000cf8
 800444c:	20000cf4 	.word	0x20000cf4
 8004450:	20000d5c 	.word	0x20000d5c

08004454 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b08a      	sub	sp, #40	@ 0x28
 8004458:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800445a:	2300      	movs	r3, #0
 800445c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800445e:	f000 fb13 	bl	8004a88 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004462:	4b1d      	ldr	r3, [pc, #116]	@ (80044d8 <xTimerCreateTimerTask+0x84>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d021      	beq.n	80044ae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800446a:	2300      	movs	r3, #0
 800446c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800446e:	2300      	movs	r3, #0
 8004470:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004472:	1d3a      	adds	r2, r7, #4
 8004474:	f107 0108 	add.w	r1, r7, #8
 8004478:	f107 030c 	add.w	r3, r7, #12
 800447c:	4618      	mov	r0, r3
 800447e:	f7fd ff45 	bl	800230c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004482:	6879      	ldr	r1, [r7, #4]
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	9202      	str	r2, [sp, #8]
 800448a:	9301      	str	r3, [sp, #4]
 800448c:	2302      	movs	r3, #2
 800448e:	9300      	str	r3, [sp, #0]
 8004490:	2300      	movs	r3, #0
 8004492:	460a      	mov	r2, r1
 8004494:	4911      	ldr	r1, [pc, #68]	@ (80044dc <xTimerCreateTimerTask+0x88>)
 8004496:	4812      	ldr	r0, [pc, #72]	@ (80044e0 <xTimerCreateTimerTask+0x8c>)
 8004498:	f7fe ffa2 	bl	80033e0 <xTaskCreateStatic>
 800449c:	4603      	mov	r3, r0
 800449e:	4a11      	ldr	r2, [pc, #68]	@ (80044e4 <xTimerCreateTimerTask+0x90>)
 80044a0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80044a2:	4b10      	ldr	r3, [pc, #64]	@ (80044e4 <xTimerCreateTimerTask+0x90>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d001      	beq.n	80044ae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80044aa:	2301      	movs	r3, #1
 80044ac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10b      	bne.n	80044cc <xTimerCreateTimerTask+0x78>
	__asm volatile
 80044b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044b8:	f383 8811 	msr	BASEPRI, r3
 80044bc:	f3bf 8f6f 	isb	sy
 80044c0:	f3bf 8f4f 	dsb	sy
 80044c4:	613b      	str	r3, [r7, #16]
}
 80044c6:	bf00      	nop
 80044c8:	bf00      	nop
 80044ca:	e7fd      	b.n	80044c8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80044cc:	697b      	ldr	r3, [r7, #20]
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3718      	adds	r7, #24
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	20000d98 	.word	0x20000d98
 80044dc:	080055a4 	.word	0x080055a4
 80044e0:	08004621 	.word	0x08004621
 80044e4:	20000d9c 	.word	0x20000d9c

080044e8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b08a      	sub	sp, #40	@ 0x28
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
 80044f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80044f6:	2300      	movs	r3, #0
 80044f8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d10b      	bne.n	8004518 <xTimerGenericCommand+0x30>
	__asm volatile
 8004500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004504:	f383 8811 	msr	BASEPRI, r3
 8004508:	f3bf 8f6f 	isb	sy
 800450c:	f3bf 8f4f 	dsb	sy
 8004510:	623b      	str	r3, [r7, #32]
}
 8004512:	bf00      	nop
 8004514:	bf00      	nop
 8004516:	e7fd      	b.n	8004514 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004518:	4b19      	ldr	r3, [pc, #100]	@ (8004580 <xTimerGenericCommand+0x98>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d02a      	beq.n	8004576 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	2b05      	cmp	r3, #5
 8004530:	dc18      	bgt.n	8004564 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004532:	f7ff fdad 	bl	8004090 <xTaskGetSchedulerState>
 8004536:	4603      	mov	r3, r0
 8004538:	2b02      	cmp	r3, #2
 800453a:	d109      	bne.n	8004550 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800453c:	4b10      	ldr	r3, [pc, #64]	@ (8004580 <xTimerGenericCommand+0x98>)
 800453e:	6818      	ldr	r0, [r3, #0]
 8004540:	f107 0110 	add.w	r1, r7, #16
 8004544:	2300      	movs	r3, #0
 8004546:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004548:	f7fe f962 	bl	8002810 <xQueueGenericSend>
 800454c:	6278      	str	r0, [r7, #36]	@ 0x24
 800454e:	e012      	b.n	8004576 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004550:	4b0b      	ldr	r3, [pc, #44]	@ (8004580 <xTimerGenericCommand+0x98>)
 8004552:	6818      	ldr	r0, [r3, #0]
 8004554:	f107 0110 	add.w	r1, r7, #16
 8004558:	2300      	movs	r3, #0
 800455a:	2200      	movs	r2, #0
 800455c:	f7fe f958 	bl	8002810 <xQueueGenericSend>
 8004560:	6278      	str	r0, [r7, #36]	@ 0x24
 8004562:	e008      	b.n	8004576 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004564:	4b06      	ldr	r3, [pc, #24]	@ (8004580 <xTimerGenericCommand+0x98>)
 8004566:	6818      	ldr	r0, [r3, #0]
 8004568:	f107 0110 	add.w	r1, r7, #16
 800456c:	2300      	movs	r3, #0
 800456e:	683a      	ldr	r2, [r7, #0]
 8004570:	f7fe fa50 	bl	8002a14 <xQueueGenericSendFromISR>
 8004574:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004578:	4618      	mov	r0, r3
 800457a:	3728      	adds	r7, #40	@ 0x28
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	20000d98 	.word	0x20000d98

08004584 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b088      	sub	sp, #32
 8004588:	af02      	add	r7, sp, #8
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800458e:	4b23      	ldr	r3, [pc, #140]	@ (800461c <prvProcessExpiredTimer+0x98>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	3304      	adds	r3, #4
 800459c:	4618      	mov	r0, r3
 800459e:	f7fd ff59 	bl	8002454 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80045a8:	f003 0304 	and.w	r3, r3, #4
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d023      	beq.n	80045f8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	699a      	ldr	r2, [r3, #24]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	18d1      	adds	r1, r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	683a      	ldr	r2, [r7, #0]
 80045bc:	6978      	ldr	r0, [r7, #20]
 80045be:	f000 f8d5 	bl	800476c <prvInsertTimerInActiveList>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d020      	beq.n	800460a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80045c8:	2300      	movs	r3, #0
 80045ca:	9300      	str	r3, [sp, #0]
 80045cc:	2300      	movs	r3, #0
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	2100      	movs	r1, #0
 80045d2:	6978      	ldr	r0, [r7, #20]
 80045d4:	f7ff ff88 	bl	80044e8 <xTimerGenericCommand>
 80045d8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d114      	bne.n	800460a <prvProcessExpiredTimer+0x86>
	__asm volatile
 80045e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045e4:	f383 8811 	msr	BASEPRI, r3
 80045e8:	f3bf 8f6f 	isb	sy
 80045ec:	f3bf 8f4f 	dsb	sy
 80045f0:	60fb      	str	r3, [r7, #12]
}
 80045f2:	bf00      	nop
 80045f4:	bf00      	nop
 80045f6:	e7fd      	b.n	80045f4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80045fe:	f023 0301 	bic.w	r3, r3, #1
 8004602:	b2da      	uxtb	r2, r3
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	6978      	ldr	r0, [r7, #20]
 8004610:	4798      	blx	r3
}
 8004612:	bf00      	nop
 8004614:	3718      	adds	r7, #24
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	20000d90 	.word	0x20000d90

08004620 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004628:	f107 0308 	add.w	r3, r7, #8
 800462c:	4618      	mov	r0, r3
 800462e:	f000 f859 	bl	80046e4 <prvGetNextExpireTime>
 8004632:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	4619      	mov	r1, r3
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	f000 f805 	bl	8004648 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800463e:	f000 f8d7 	bl	80047f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004642:	bf00      	nop
 8004644:	e7f0      	b.n	8004628 <prvTimerTask+0x8>
	...

08004648 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004652:	f7ff f929 	bl	80038a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004656:	f107 0308 	add.w	r3, r7, #8
 800465a:	4618      	mov	r0, r3
 800465c:	f000 f866 	bl	800472c <prvSampleTimeNow>
 8004660:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d130      	bne.n	80046ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10a      	bne.n	8004684 <prvProcessTimerOrBlockTask+0x3c>
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	429a      	cmp	r2, r3
 8004674:	d806      	bhi.n	8004684 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004676:	f7ff f925 	bl	80038c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800467a:	68f9      	ldr	r1, [r7, #12]
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f7ff ff81 	bl	8004584 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004682:	e024      	b.n	80046ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d008      	beq.n	800469c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800468a:	4b13      	ldr	r3, [pc, #76]	@ (80046d8 <prvProcessTimerOrBlockTask+0x90>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d101      	bne.n	8004698 <prvProcessTimerOrBlockTask+0x50>
 8004694:	2301      	movs	r3, #1
 8004696:	e000      	b.n	800469a <prvProcessTimerOrBlockTask+0x52>
 8004698:	2300      	movs	r3, #0
 800469a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800469c:	4b0f      	ldr	r3, [pc, #60]	@ (80046dc <prvProcessTimerOrBlockTask+0x94>)
 800469e:	6818      	ldr	r0, [r3, #0]
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	683a      	ldr	r2, [r7, #0]
 80046a8:	4619      	mov	r1, r3
 80046aa:	f7fe fe65 	bl	8003378 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80046ae:	f7ff f909 	bl	80038c4 <xTaskResumeAll>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d10a      	bne.n	80046ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80046b8:	4b09      	ldr	r3, [pc, #36]	@ (80046e0 <prvProcessTimerOrBlockTask+0x98>)
 80046ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	f3bf 8f4f 	dsb	sy
 80046c4:	f3bf 8f6f 	isb	sy
}
 80046c8:	e001      	b.n	80046ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80046ca:	f7ff f8fb 	bl	80038c4 <xTaskResumeAll>
}
 80046ce:	bf00      	nop
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	20000d94 	.word	0x20000d94
 80046dc:	20000d98 	.word	0x20000d98
 80046e0:	e000ed04 	.word	0xe000ed04

080046e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80046ec:	4b0e      	ldr	r3, [pc, #56]	@ (8004728 <prvGetNextExpireTime+0x44>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <prvGetNextExpireTime+0x16>
 80046f6:	2201      	movs	r2, #1
 80046f8:	e000      	b.n	80046fc <prvGetNextExpireTime+0x18>
 80046fa:	2200      	movs	r2, #0
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d105      	bne.n	8004714 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004708:	4b07      	ldr	r3, [pc, #28]	@ (8004728 <prvGetNextExpireTime+0x44>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	60fb      	str	r3, [r7, #12]
 8004712:	e001      	b.n	8004718 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004714:	2300      	movs	r3, #0
 8004716:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004718:	68fb      	ldr	r3, [r7, #12]
}
 800471a:	4618      	mov	r0, r3
 800471c:	3714      	adds	r7, #20
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	20000d90 	.word	0x20000d90

0800472c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004734:	f7ff f964 	bl	8003a00 <xTaskGetTickCount>
 8004738:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800473a:	4b0b      	ldr	r3, [pc, #44]	@ (8004768 <prvSampleTimeNow+0x3c>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	429a      	cmp	r2, r3
 8004742:	d205      	bcs.n	8004750 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004744:	f000 f93a 	bl	80049bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	601a      	str	r2, [r3, #0]
 800474e:	e002      	b.n	8004756 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004756:	4a04      	ldr	r2, [pc, #16]	@ (8004768 <prvSampleTimeNow+0x3c>)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800475c:	68fb      	ldr	r3, [r7, #12]
}
 800475e:	4618      	mov	r0, r3
 8004760:	3710      	adds	r7, #16
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	20000da0 	.word	0x20000da0

0800476c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
 8004778:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800477a:	2300      	movs	r3, #0
 800477c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	68ba      	ldr	r2, [r7, #8]
 8004782:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800478a:	68ba      	ldr	r2, [r7, #8]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	429a      	cmp	r2, r3
 8004790:	d812      	bhi.n	80047b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	1ad2      	subs	r2, r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	429a      	cmp	r2, r3
 800479e:	d302      	bcc.n	80047a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80047a0:	2301      	movs	r3, #1
 80047a2:	617b      	str	r3, [r7, #20]
 80047a4:	e01b      	b.n	80047de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80047a6:	4b10      	ldr	r3, [pc, #64]	@ (80047e8 <prvInsertTimerInActiveList+0x7c>)
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	3304      	adds	r3, #4
 80047ae:	4619      	mov	r1, r3
 80047b0:	4610      	mov	r0, r2
 80047b2:	f7fd fe16 	bl	80023e2 <vListInsert>
 80047b6:	e012      	b.n	80047de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d206      	bcs.n	80047ce <prvInsertTimerInActiveList+0x62>
 80047c0:	68ba      	ldr	r2, [r7, #8]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d302      	bcc.n	80047ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80047c8:	2301      	movs	r3, #1
 80047ca:	617b      	str	r3, [r7, #20]
 80047cc:	e007      	b.n	80047de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80047ce:	4b07      	ldr	r3, [pc, #28]	@ (80047ec <prvInsertTimerInActiveList+0x80>)
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	3304      	adds	r3, #4
 80047d6:	4619      	mov	r1, r3
 80047d8:	4610      	mov	r0, r2
 80047da:	f7fd fe02 	bl	80023e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80047de:	697b      	ldr	r3, [r7, #20]
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3718      	adds	r7, #24
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	20000d94 	.word	0x20000d94
 80047ec:	20000d90 	.word	0x20000d90

080047f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b08e      	sub	sp, #56	@ 0x38
 80047f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80047f6:	e0ce      	b.n	8004996 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	da19      	bge.n	8004832 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80047fe:	1d3b      	adds	r3, r7, #4
 8004800:	3304      	adds	r3, #4
 8004802:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004806:	2b00      	cmp	r3, #0
 8004808:	d10b      	bne.n	8004822 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800480a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800480e:	f383 8811 	msr	BASEPRI, r3
 8004812:	f3bf 8f6f 	isb	sy
 8004816:	f3bf 8f4f 	dsb	sy
 800481a:	61fb      	str	r3, [r7, #28]
}
 800481c:	bf00      	nop
 800481e:	bf00      	nop
 8004820:	e7fd      	b.n	800481e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004828:	6850      	ldr	r0, [r2, #4]
 800482a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800482c:	6892      	ldr	r2, [r2, #8]
 800482e:	4611      	mov	r1, r2
 8004830:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2b00      	cmp	r3, #0
 8004836:	f2c0 80ae 	blt.w	8004996 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800483e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d004      	beq.n	8004850 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004848:	3304      	adds	r3, #4
 800484a:	4618      	mov	r0, r3
 800484c:	f7fd fe02 	bl	8002454 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004850:	463b      	mov	r3, r7
 8004852:	4618      	mov	r0, r3
 8004854:	f7ff ff6a 	bl	800472c <prvSampleTimeNow>
 8004858:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2b09      	cmp	r3, #9
 800485e:	f200 8097 	bhi.w	8004990 <prvProcessReceivedCommands+0x1a0>
 8004862:	a201      	add	r2, pc, #4	@ (adr r2, 8004868 <prvProcessReceivedCommands+0x78>)
 8004864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004868:	08004891 	.word	0x08004891
 800486c:	08004891 	.word	0x08004891
 8004870:	08004891 	.word	0x08004891
 8004874:	08004907 	.word	0x08004907
 8004878:	0800491b 	.word	0x0800491b
 800487c:	08004967 	.word	0x08004967
 8004880:	08004891 	.word	0x08004891
 8004884:	08004891 	.word	0x08004891
 8004888:	08004907 	.word	0x08004907
 800488c:	0800491b 	.word	0x0800491b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004892:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004896:	f043 0301 	orr.w	r3, r3, #1
 800489a:	b2da      	uxtb	r2, r3
 800489c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800489e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80048a2:	68ba      	ldr	r2, [r7, #8]
 80048a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	18d1      	adds	r1, r2, r3
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80048b0:	f7ff ff5c 	bl	800476c <prvInsertTimerInActiveList>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d06c      	beq.n	8004994 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80048c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80048c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048c8:	f003 0304 	and.w	r3, r3, #4
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d061      	beq.n	8004994 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80048d0:	68ba      	ldr	r2, [r7, #8]
 80048d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	441a      	add	r2, r3
 80048d8:	2300      	movs	r3, #0
 80048da:	9300      	str	r3, [sp, #0]
 80048dc:	2300      	movs	r3, #0
 80048de:	2100      	movs	r1, #0
 80048e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80048e2:	f7ff fe01 	bl	80044e8 <xTimerGenericCommand>
 80048e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80048e8:	6a3b      	ldr	r3, [r7, #32]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d152      	bne.n	8004994 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80048ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048f2:	f383 8811 	msr	BASEPRI, r3
 80048f6:	f3bf 8f6f 	isb	sy
 80048fa:	f3bf 8f4f 	dsb	sy
 80048fe:	61bb      	str	r3, [r7, #24]
}
 8004900:	bf00      	nop
 8004902:	bf00      	nop
 8004904:	e7fd      	b.n	8004902 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004908:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800490c:	f023 0301 	bic.w	r3, r3, #1
 8004910:	b2da      	uxtb	r2, r3
 8004912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004914:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004918:	e03d      	b.n	8004996 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800491a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800491c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004920:	f043 0301 	orr.w	r3, r3, #1
 8004924:	b2da      	uxtb	r2, r3
 8004926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004928:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800492c:	68ba      	ldr	r2, [r7, #8]
 800492e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004930:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10b      	bne.n	8004952 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800493a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800493e:	f383 8811 	msr	BASEPRI, r3
 8004942:	f3bf 8f6f 	isb	sy
 8004946:	f3bf 8f4f 	dsb	sy
 800494a:	617b      	str	r3, [r7, #20]
}
 800494c:	bf00      	nop
 800494e:	bf00      	nop
 8004950:	e7fd      	b.n	800494e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004954:	699a      	ldr	r2, [r3, #24]
 8004956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004958:	18d1      	adds	r1, r2, r3
 800495a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800495e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004960:	f7ff ff04 	bl	800476c <prvInsertTimerInActiveList>
					break;
 8004964:	e017      	b.n	8004996 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004968:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d103      	bne.n	800497c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004974:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004976:	f000 fbe7 	bl	8005148 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800497a:	e00c      	b.n	8004996 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800497c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800497e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004982:	f023 0301 	bic.w	r3, r3, #1
 8004986:	b2da      	uxtb	r2, r3
 8004988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800498a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800498e:	e002      	b.n	8004996 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004990:	bf00      	nop
 8004992:	e000      	b.n	8004996 <prvProcessReceivedCommands+0x1a6>
					break;
 8004994:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004996:	4b08      	ldr	r3, [pc, #32]	@ (80049b8 <prvProcessReceivedCommands+0x1c8>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	1d39      	adds	r1, r7, #4
 800499c:	2200      	movs	r2, #0
 800499e:	4618      	mov	r0, r3
 80049a0:	f7fe f8d6 	bl	8002b50 <xQueueReceive>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	f47f af26 	bne.w	80047f8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80049ac:	bf00      	nop
 80049ae:	bf00      	nop
 80049b0:	3730      	adds	r7, #48	@ 0x30
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	20000d98 	.word	0x20000d98

080049bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b088      	sub	sp, #32
 80049c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80049c2:	e049      	b.n	8004a58 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80049c4:	4b2e      	ldr	r3, [pc, #184]	@ (8004a80 <prvSwitchTimerLists+0xc4>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049ce:	4b2c      	ldr	r3, [pc, #176]	@ (8004a80 <prvSwitchTimerLists+0xc4>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	3304      	adds	r3, #4
 80049dc:	4618      	mov	r0, r3
 80049de:	f7fd fd39 	bl	8002454 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80049f0:	f003 0304 	and.w	r3, r3, #4
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d02f      	beq.n	8004a58 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	4413      	add	r3, r2
 8004a00:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004a02:	68ba      	ldr	r2, [r7, #8]
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d90e      	bls.n	8004a28 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	68ba      	ldr	r2, [r7, #8]
 8004a0e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004a16:	4b1a      	ldr	r3, [pc, #104]	@ (8004a80 <prvSwitchTimerLists+0xc4>)
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	3304      	adds	r3, #4
 8004a1e:	4619      	mov	r1, r3
 8004a20:	4610      	mov	r0, r2
 8004a22:	f7fd fcde 	bl	80023e2 <vListInsert>
 8004a26:	e017      	b.n	8004a58 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a28:	2300      	movs	r3, #0
 8004a2a:	9300      	str	r3, [sp, #0]
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	2100      	movs	r1, #0
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f7ff fd58 	bl	80044e8 <xTimerGenericCommand>
 8004a38:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d10b      	bne.n	8004a58 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a44:	f383 8811 	msr	BASEPRI, r3
 8004a48:	f3bf 8f6f 	isb	sy
 8004a4c:	f3bf 8f4f 	dsb	sy
 8004a50:	603b      	str	r3, [r7, #0]
}
 8004a52:	bf00      	nop
 8004a54:	bf00      	nop
 8004a56:	e7fd      	b.n	8004a54 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a58:	4b09      	ldr	r3, [pc, #36]	@ (8004a80 <prvSwitchTimerLists+0xc4>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1b0      	bne.n	80049c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004a62:	4b07      	ldr	r3, [pc, #28]	@ (8004a80 <prvSwitchTimerLists+0xc4>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004a68:	4b06      	ldr	r3, [pc, #24]	@ (8004a84 <prvSwitchTimerLists+0xc8>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a04      	ldr	r2, [pc, #16]	@ (8004a80 <prvSwitchTimerLists+0xc4>)
 8004a6e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004a70:	4a04      	ldr	r2, [pc, #16]	@ (8004a84 <prvSwitchTimerLists+0xc8>)
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	6013      	str	r3, [r2, #0]
}
 8004a76:	bf00      	nop
 8004a78:	3718      	adds	r7, #24
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	20000d90 	.word	0x20000d90
 8004a84:	20000d94 	.word	0x20000d94

08004a88 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004a8e:	f000 f96b 	bl	8004d68 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004a92:	4b15      	ldr	r3, [pc, #84]	@ (8004ae8 <prvCheckForValidListAndQueue+0x60>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d120      	bne.n	8004adc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004a9a:	4814      	ldr	r0, [pc, #80]	@ (8004aec <prvCheckForValidListAndQueue+0x64>)
 8004a9c:	f7fd fc50 	bl	8002340 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004aa0:	4813      	ldr	r0, [pc, #76]	@ (8004af0 <prvCheckForValidListAndQueue+0x68>)
 8004aa2:	f7fd fc4d 	bl	8002340 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004aa6:	4b13      	ldr	r3, [pc, #76]	@ (8004af4 <prvCheckForValidListAndQueue+0x6c>)
 8004aa8:	4a10      	ldr	r2, [pc, #64]	@ (8004aec <prvCheckForValidListAndQueue+0x64>)
 8004aaa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004aac:	4b12      	ldr	r3, [pc, #72]	@ (8004af8 <prvCheckForValidListAndQueue+0x70>)
 8004aae:	4a10      	ldr	r2, [pc, #64]	@ (8004af0 <prvCheckForValidListAndQueue+0x68>)
 8004ab0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	9300      	str	r3, [sp, #0]
 8004ab6:	4b11      	ldr	r3, [pc, #68]	@ (8004afc <prvCheckForValidListAndQueue+0x74>)
 8004ab8:	4a11      	ldr	r2, [pc, #68]	@ (8004b00 <prvCheckForValidListAndQueue+0x78>)
 8004aba:	2110      	movs	r1, #16
 8004abc:	200a      	movs	r0, #10
 8004abe:	f7fd fd5d 	bl	800257c <xQueueGenericCreateStatic>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	4a08      	ldr	r2, [pc, #32]	@ (8004ae8 <prvCheckForValidListAndQueue+0x60>)
 8004ac6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004ac8:	4b07      	ldr	r3, [pc, #28]	@ (8004ae8 <prvCheckForValidListAndQueue+0x60>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d005      	beq.n	8004adc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004ad0:	4b05      	ldr	r3, [pc, #20]	@ (8004ae8 <prvCheckForValidListAndQueue+0x60>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	490b      	ldr	r1, [pc, #44]	@ (8004b04 <prvCheckForValidListAndQueue+0x7c>)
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7fe fbfa 	bl	80032d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004adc:	f000 f976 	bl	8004dcc <vPortExitCritical>
}
 8004ae0:	bf00      	nop
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	20000d98 	.word	0x20000d98
 8004aec:	20000d68 	.word	0x20000d68
 8004af0:	20000d7c 	.word	0x20000d7c
 8004af4:	20000d90 	.word	0x20000d90
 8004af8:	20000d94 	.word	0x20000d94
 8004afc:	20000e44 	.word	0x20000e44
 8004b00:	20000da4 	.word	0x20000da4
 8004b04:	080055ac 	.word	0x080055ac

08004b08 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	3b04      	subs	r3, #4
 8004b18:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004b20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	3b04      	subs	r3, #4
 8004b26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	f023 0201 	bic.w	r2, r3, #1
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	3b04      	subs	r3, #4
 8004b36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004b38:	4a0c      	ldr	r2, [pc, #48]	@ (8004b6c <pxPortInitialiseStack+0x64>)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	3b14      	subs	r3, #20
 8004b42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	3b04      	subs	r3, #4
 8004b4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f06f 0202 	mvn.w	r2, #2
 8004b56:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	3b20      	subs	r3, #32
 8004b5c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr
 8004b6c:	08004b71 	.word	0x08004b71

08004b70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004b76:	2300      	movs	r3, #0
 8004b78:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004b7a:	4b13      	ldr	r3, [pc, #76]	@ (8004bc8 <prvTaskExitError+0x58>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b82:	d00b      	beq.n	8004b9c <prvTaskExitError+0x2c>
	__asm volatile
 8004b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b88:	f383 8811 	msr	BASEPRI, r3
 8004b8c:	f3bf 8f6f 	isb	sy
 8004b90:	f3bf 8f4f 	dsb	sy
 8004b94:	60fb      	str	r3, [r7, #12]
}
 8004b96:	bf00      	nop
 8004b98:	bf00      	nop
 8004b9a:	e7fd      	b.n	8004b98 <prvTaskExitError+0x28>
	__asm volatile
 8004b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ba0:	f383 8811 	msr	BASEPRI, r3
 8004ba4:	f3bf 8f6f 	isb	sy
 8004ba8:	f3bf 8f4f 	dsb	sy
 8004bac:	60bb      	str	r3, [r7, #8]
}
 8004bae:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004bb0:	bf00      	nop
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d0fc      	beq.n	8004bb2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004bb8:	bf00      	nop
 8004bba:	bf00      	nop
 8004bbc:	3714      	adds	r7, #20
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	2000000c 	.word	0x2000000c
 8004bcc:	00000000 	.word	0x00000000

08004bd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004bd0:	4b07      	ldr	r3, [pc, #28]	@ (8004bf0 <pxCurrentTCBConst2>)
 8004bd2:	6819      	ldr	r1, [r3, #0]
 8004bd4:	6808      	ldr	r0, [r1, #0]
 8004bd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bda:	f380 8809 	msr	PSP, r0
 8004bde:	f3bf 8f6f 	isb	sy
 8004be2:	f04f 0000 	mov.w	r0, #0
 8004be6:	f380 8811 	msr	BASEPRI, r0
 8004bea:	4770      	bx	lr
 8004bec:	f3af 8000 	nop.w

08004bf0 <pxCurrentTCBConst2>:
 8004bf0:	20000868 	.word	0x20000868
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004bf4:	bf00      	nop
 8004bf6:	bf00      	nop

08004bf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004bf8:	4808      	ldr	r0, [pc, #32]	@ (8004c1c <prvPortStartFirstTask+0x24>)
 8004bfa:	6800      	ldr	r0, [r0, #0]
 8004bfc:	6800      	ldr	r0, [r0, #0]
 8004bfe:	f380 8808 	msr	MSP, r0
 8004c02:	f04f 0000 	mov.w	r0, #0
 8004c06:	f380 8814 	msr	CONTROL, r0
 8004c0a:	b662      	cpsie	i
 8004c0c:	b661      	cpsie	f
 8004c0e:	f3bf 8f4f 	dsb	sy
 8004c12:	f3bf 8f6f 	isb	sy
 8004c16:	df00      	svc	0
 8004c18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004c1a:	bf00      	nop
 8004c1c:	e000ed08 	.word	0xe000ed08

08004c20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b086      	sub	sp, #24
 8004c24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004c26:	4b47      	ldr	r3, [pc, #284]	@ (8004d44 <xPortStartScheduler+0x124>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a47      	ldr	r2, [pc, #284]	@ (8004d48 <xPortStartScheduler+0x128>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d10b      	bne.n	8004c48 <xPortStartScheduler+0x28>
	__asm volatile
 8004c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c34:	f383 8811 	msr	BASEPRI, r3
 8004c38:	f3bf 8f6f 	isb	sy
 8004c3c:	f3bf 8f4f 	dsb	sy
 8004c40:	613b      	str	r3, [r7, #16]
}
 8004c42:	bf00      	nop
 8004c44:	bf00      	nop
 8004c46:	e7fd      	b.n	8004c44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004c48:	4b3e      	ldr	r3, [pc, #248]	@ (8004d44 <xPortStartScheduler+0x124>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a3f      	ldr	r2, [pc, #252]	@ (8004d4c <xPortStartScheduler+0x12c>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d10b      	bne.n	8004c6a <xPortStartScheduler+0x4a>
	__asm volatile
 8004c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c56:	f383 8811 	msr	BASEPRI, r3
 8004c5a:	f3bf 8f6f 	isb	sy
 8004c5e:	f3bf 8f4f 	dsb	sy
 8004c62:	60fb      	str	r3, [r7, #12]
}
 8004c64:	bf00      	nop
 8004c66:	bf00      	nop
 8004c68:	e7fd      	b.n	8004c66 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c6a:	4b39      	ldr	r3, [pc, #228]	@ (8004d50 <xPortStartScheduler+0x130>)
 8004c6c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	22ff      	movs	r2, #255	@ 0xff
 8004c7a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c84:	78fb      	ldrb	r3, [r7, #3]
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004c8c:	b2da      	uxtb	r2, r3
 8004c8e:	4b31      	ldr	r3, [pc, #196]	@ (8004d54 <xPortStartScheduler+0x134>)
 8004c90:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004c92:	4b31      	ldr	r3, [pc, #196]	@ (8004d58 <xPortStartScheduler+0x138>)
 8004c94:	2207      	movs	r2, #7
 8004c96:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c98:	e009      	b.n	8004cae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004c9a:	4b2f      	ldr	r3, [pc, #188]	@ (8004d58 <xPortStartScheduler+0x138>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	4a2d      	ldr	r2, [pc, #180]	@ (8004d58 <xPortStartScheduler+0x138>)
 8004ca2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ca4:	78fb      	ldrb	r3, [r7, #3]
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	005b      	lsls	r3, r3, #1
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cae:	78fb      	ldrb	r3, [r7, #3]
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cb6:	2b80      	cmp	r3, #128	@ 0x80
 8004cb8:	d0ef      	beq.n	8004c9a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004cba:	4b27      	ldr	r3, [pc, #156]	@ (8004d58 <xPortStartScheduler+0x138>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f1c3 0307 	rsb	r3, r3, #7
 8004cc2:	2b04      	cmp	r3, #4
 8004cc4:	d00b      	beq.n	8004cde <xPortStartScheduler+0xbe>
	__asm volatile
 8004cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cca:	f383 8811 	msr	BASEPRI, r3
 8004cce:	f3bf 8f6f 	isb	sy
 8004cd2:	f3bf 8f4f 	dsb	sy
 8004cd6:	60bb      	str	r3, [r7, #8]
}
 8004cd8:	bf00      	nop
 8004cda:	bf00      	nop
 8004cdc:	e7fd      	b.n	8004cda <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004cde:	4b1e      	ldr	r3, [pc, #120]	@ (8004d58 <xPortStartScheduler+0x138>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	021b      	lsls	r3, r3, #8
 8004ce4:	4a1c      	ldr	r2, [pc, #112]	@ (8004d58 <xPortStartScheduler+0x138>)
 8004ce6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004ce8:	4b1b      	ldr	r3, [pc, #108]	@ (8004d58 <xPortStartScheduler+0x138>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004cf0:	4a19      	ldr	r2, [pc, #100]	@ (8004d58 <xPortStartScheduler+0x138>)
 8004cf2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	b2da      	uxtb	r2, r3
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004cfc:	4b17      	ldr	r3, [pc, #92]	@ (8004d5c <xPortStartScheduler+0x13c>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a16      	ldr	r2, [pc, #88]	@ (8004d5c <xPortStartScheduler+0x13c>)
 8004d02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004d06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004d08:	4b14      	ldr	r3, [pc, #80]	@ (8004d5c <xPortStartScheduler+0x13c>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a13      	ldr	r2, [pc, #76]	@ (8004d5c <xPortStartScheduler+0x13c>)
 8004d0e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004d12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004d14:	f000 f8da 	bl	8004ecc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004d18:	4b11      	ldr	r3, [pc, #68]	@ (8004d60 <xPortStartScheduler+0x140>)
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004d1e:	f000 f8f9 	bl	8004f14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004d22:	4b10      	ldr	r3, [pc, #64]	@ (8004d64 <xPortStartScheduler+0x144>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a0f      	ldr	r2, [pc, #60]	@ (8004d64 <xPortStartScheduler+0x144>)
 8004d28:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004d2c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004d2e:	f7ff ff63 	bl	8004bf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004d32:	f7fe ff2f 	bl	8003b94 <vTaskSwitchContext>
	prvTaskExitError();
 8004d36:	f7ff ff1b 	bl	8004b70 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3718      	adds	r7, #24
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	e000ed00 	.word	0xe000ed00
 8004d48:	410fc271 	.word	0x410fc271
 8004d4c:	410fc270 	.word	0x410fc270
 8004d50:	e000e400 	.word	0xe000e400
 8004d54:	20000e94 	.word	0x20000e94
 8004d58:	20000e98 	.word	0x20000e98
 8004d5c:	e000ed20 	.word	0xe000ed20
 8004d60:	2000000c 	.word	0x2000000c
 8004d64:	e000ef34 	.word	0xe000ef34

08004d68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
	__asm volatile
 8004d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d72:	f383 8811 	msr	BASEPRI, r3
 8004d76:	f3bf 8f6f 	isb	sy
 8004d7a:	f3bf 8f4f 	dsb	sy
 8004d7e:	607b      	str	r3, [r7, #4]
}
 8004d80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004d82:	4b10      	ldr	r3, [pc, #64]	@ (8004dc4 <vPortEnterCritical+0x5c>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	3301      	adds	r3, #1
 8004d88:	4a0e      	ldr	r2, [pc, #56]	@ (8004dc4 <vPortEnterCritical+0x5c>)
 8004d8a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004d8c:	4b0d      	ldr	r3, [pc, #52]	@ (8004dc4 <vPortEnterCritical+0x5c>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d110      	bne.n	8004db6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004d94:	4b0c      	ldr	r3, [pc, #48]	@ (8004dc8 <vPortEnterCritical+0x60>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00b      	beq.n	8004db6 <vPortEnterCritical+0x4e>
	__asm volatile
 8004d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004da2:	f383 8811 	msr	BASEPRI, r3
 8004da6:	f3bf 8f6f 	isb	sy
 8004daa:	f3bf 8f4f 	dsb	sy
 8004dae:	603b      	str	r3, [r7, #0]
}
 8004db0:	bf00      	nop
 8004db2:	bf00      	nop
 8004db4:	e7fd      	b.n	8004db2 <vPortEnterCritical+0x4a>
	}
}
 8004db6:	bf00      	nop
 8004db8:	370c      	adds	r7, #12
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	2000000c 	.word	0x2000000c
 8004dc8:	e000ed04 	.word	0xe000ed04

08004dcc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004dd2:	4b12      	ldr	r3, [pc, #72]	@ (8004e1c <vPortExitCritical+0x50>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d10b      	bne.n	8004df2 <vPortExitCritical+0x26>
	__asm volatile
 8004dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dde:	f383 8811 	msr	BASEPRI, r3
 8004de2:	f3bf 8f6f 	isb	sy
 8004de6:	f3bf 8f4f 	dsb	sy
 8004dea:	607b      	str	r3, [r7, #4]
}
 8004dec:	bf00      	nop
 8004dee:	bf00      	nop
 8004df0:	e7fd      	b.n	8004dee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004df2:	4b0a      	ldr	r3, [pc, #40]	@ (8004e1c <vPortExitCritical+0x50>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	3b01      	subs	r3, #1
 8004df8:	4a08      	ldr	r2, [pc, #32]	@ (8004e1c <vPortExitCritical+0x50>)
 8004dfa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004dfc:	4b07      	ldr	r3, [pc, #28]	@ (8004e1c <vPortExitCritical+0x50>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d105      	bne.n	8004e10 <vPortExitCritical+0x44>
 8004e04:	2300      	movs	r3, #0
 8004e06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	f383 8811 	msr	BASEPRI, r3
}
 8004e0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004e10:	bf00      	nop
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr
 8004e1c:	2000000c 	.word	0x2000000c

08004e20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004e20:	f3ef 8009 	mrs	r0, PSP
 8004e24:	f3bf 8f6f 	isb	sy
 8004e28:	4b15      	ldr	r3, [pc, #84]	@ (8004e80 <pxCurrentTCBConst>)
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	f01e 0f10 	tst.w	lr, #16
 8004e30:	bf08      	it	eq
 8004e32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004e36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e3a:	6010      	str	r0, [r2, #0]
 8004e3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004e40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004e44:	f380 8811 	msr	BASEPRI, r0
 8004e48:	f3bf 8f4f 	dsb	sy
 8004e4c:	f3bf 8f6f 	isb	sy
 8004e50:	f7fe fea0 	bl	8003b94 <vTaskSwitchContext>
 8004e54:	f04f 0000 	mov.w	r0, #0
 8004e58:	f380 8811 	msr	BASEPRI, r0
 8004e5c:	bc09      	pop	{r0, r3}
 8004e5e:	6819      	ldr	r1, [r3, #0]
 8004e60:	6808      	ldr	r0, [r1, #0]
 8004e62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e66:	f01e 0f10 	tst.w	lr, #16
 8004e6a:	bf08      	it	eq
 8004e6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004e70:	f380 8809 	msr	PSP, r0
 8004e74:	f3bf 8f6f 	isb	sy
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	f3af 8000 	nop.w

08004e80 <pxCurrentTCBConst>:
 8004e80:	20000868 	.word	0x20000868
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004e84:	bf00      	nop
 8004e86:	bf00      	nop

08004e88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
	__asm volatile
 8004e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e92:	f383 8811 	msr	BASEPRI, r3
 8004e96:	f3bf 8f6f 	isb	sy
 8004e9a:	f3bf 8f4f 	dsb	sy
 8004e9e:	607b      	str	r3, [r7, #4]
}
 8004ea0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ea2:	f7fe fdbd 	bl	8003a20 <xTaskIncrementTick>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d003      	beq.n	8004eb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004eac:	4b06      	ldr	r3, [pc, #24]	@ (8004ec8 <xPortSysTickHandler+0x40>)
 8004eae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	f383 8811 	msr	BASEPRI, r3
}
 8004ebe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004ec0:	bf00      	nop
 8004ec2:	3708      	adds	r7, #8
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	e000ed04 	.word	0xe000ed04

08004ecc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004ecc:	b480      	push	{r7}
 8004ece:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8004f00 <vPortSetupTimerInterrupt+0x34>)
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8004f04 <vPortSetupTimerInterrupt+0x38>)
 8004ed8:	2200      	movs	r2, #0
 8004eda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004edc:	4b0a      	ldr	r3, [pc, #40]	@ (8004f08 <vPortSetupTimerInterrupt+0x3c>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a0a      	ldr	r2, [pc, #40]	@ (8004f0c <vPortSetupTimerInterrupt+0x40>)
 8004ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee6:	099b      	lsrs	r3, r3, #6
 8004ee8:	4a09      	ldr	r2, [pc, #36]	@ (8004f10 <vPortSetupTimerInterrupt+0x44>)
 8004eea:	3b01      	subs	r3, #1
 8004eec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004eee:	4b04      	ldr	r3, [pc, #16]	@ (8004f00 <vPortSetupTimerInterrupt+0x34>)
 8004ef0:	2207      	movs	r2, #7
 8004ef2:	601a      	str	r2, [r3, #0]
}
 8004ef4:	bf00      	nop
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	e000e010 	.word	0xe000e010
 8004f04:	e000e018 	.word	0xe000e018
 8004f08:	20000000 	.word	0x20000000
 8004f0c:	10624dd3 	.word	0x10624dd3
 8004f10:	e000e014 	.word	0xe000e014

08004f14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004f14:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004f24 <vPortEnableVFP+0x10>
 8004f18:	6801      	ldr	r1, [r0, #0]
 8004f1a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004f1e:	6001      	str	r1, [r0, #0]
 8004f20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004f22:	bf00      	nop
 8004f24:	e000ed88 	.word	0xe000ed88

08004f28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004f2e:	f3ef 8305 	mrs	r3, IPSR
 8004f32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2b0f      	cmp	r3, #15
 8004f38:	d915      	bls.n	8004f66 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004f3a:	4a18      	ldr	r2, [pc, #96]	@ (8004f9c <vPortValidateInterruptPriority+0x74>)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	4413      	add	r3, r2
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004f44:	4b16      	ldr	r3, [pc, #88]	@ (8004fa0 <vPortValidateInterruptPriority+0x78>)
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	7afa      	ldrb	r2, [r7, #11]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d20b      	bcs.n	8004f66 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f52:	f383 8811 	msr	BASEPRI, r3
 8004f56:	f3bf 8f6f 	isb	sy
 8004f5a:	f3bf 8f4f 	dsb	sy
 8004f5e:	607b      	str	r3, [r7, #4]
}
 8004f60:	bf00      	nop
 8004f62:	bf00      	nop
 8004f64:	e7fd      	b.n	8004f62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004f66:	4b0f      	ldr	r3, [pc, #60]	@ (8004fa4 <vPortValidateInterruptPriority+0x7c>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8004fa8 <vPortValidateInterruptPriority+0x80>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d90b      	bls.n	8004f8e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f7a:	f383 8811 	msr	BASEPRI, r3
 8004f7e:	f3bf 8f6f 	isb	sy
 8004f82:	f3bf 8f4f 	dsb	sy
 8004f86:	603b      	str	r3, [r7, #0]
}
 8004f88:	bf00      	nop
 8004f8a:	bf00      	nop
 8004f8c:	e7fd      	b.n	8004f8a <vPortValidateInterruptPriority+0x62>
	}
 8004f8e:	bf00      	nop
 8004f90:	3714      	adds	r7, #20
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	e000e3f0 	.word	0xe000e3f0
 8004fa0:	20000e94 	.word	0x20000e94
 8004fa4:	e000ed0c 	.word	0xe000ed0c
 8004fa8:	20000e98 	.word	0x20000e98

08004fac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b08a      	sub	sp, #40	@ 0x28
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004fb8:	f7fe fc76 	bl	80038a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004fbc:	4b5c      	ldr	r3, [pc, #368]	@ (8005130 <pvPortMalloc+0x184>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d101      	bne.n	8004fc8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004fc4:	f000 f924 	bl	8005210 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004fc8:	4b5a      	ldr	r3, [pc, #360]	@ (8005134 <pvPortMalloc+0x188>)
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4013      	ands	r3, r2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f040 8095 	bne.w	8005100 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d01e      	beq.n	800501a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004fdc:	2208      	movs	r2, #8
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f003 0307 	and.w	r3, r3, #7
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d015      	beq.n	800501a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f023 0307 	bic.w	r3, r3, #7
 8004ff4:	3308      	adds	r3, #8
 8004ff6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f003 0307 	and.w	r3, r3, #7
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00b      	beq.n	800501a <pvPortMalloc+0x6e>
	__asm volatile
 8005002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005006:	f383 8811 	msr	BASEPRI, r3
 800500a:	f3bf 8f6f 	isb	sy
 800500e:	f3bf 8f4f 	dsb	sy
 8005012:	617b      	str	r3, [r7, #20]
}
 8005014:	bf00      	nop
 8005016:	bf00      	nop
 8005018:	e7fd      	b.n	8005016 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d06f      	beq.n	8005100 <pvPortMalloc+0x154>
 8005020:	4b45      	ldr	r3, [pc, #276]	@ (8005138 <pvPortMalloc+0x18c>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	429a      	cmp	r2, r3
 8005028:	d86a      	bhi.n	8005100 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800502a:	4b44      	ldr	r3, [pc, #272]	@ (800513c <pvPortMalloc+0x190>)
 800502c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800502e:	4b43      	ldr	r3, [pc, #268]	@ (800513c <pvPortMalloc+0x190>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005034:	e004      	b.n	8005040 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005038:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800503a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	429a      	cmp	r2, r3
 8005048:	d903      	bls.n	8005052 <pvPortMalloc+0xa6>
 800504a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1f1      	bne.n	8005036 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005052:	4b37      	ldr	r3, [pc, #220]	@ (8005130 <pvPortMalloc+0x184>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005058:	429a      	cmp	r2, r3
 800505a:	d051      	beq.n	8005100 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800505c:	6a3b      	ldr	r3, [r7, #32]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2208      	movs	r2, #8
 8005062:	4413      	add	r3, r2
 8005064:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	6a3b      	ldr	r3, [r7, #32]
 800506c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800506e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005070:	685a      	ldr	r2, [r3, #4]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	1ad2      	subs	r2, r2, r3
 8005076:	2308      	movs	r3, #8
 8005078:	005b      	lsls	r3, r3, #1
 800507a:	429a      	cmp	r2, r3
 800507c:	d920      	bls.n	80050c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800507e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4413      	add	r3, r2
 8005084:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	f003 0307 	and.w	r3, r3, #7
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00b      	beq.n	80050a8 <pvPortMalloc+0xfc>
	__asm volatile
 8005090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005094:	f383 8811 	msr	BASEPRI, r3
 8005098:	f3bf 8f6f 	isb	sy
 800509c:	f3bf 8f4f 	dsb	sy
 80050a0:	613b      	str	r3, [r7, #16]
}
 80050a2:	bf00      	nop
 80050a4:	bf00      	nop
 80050a6:	e7fd      	b.n	80050a4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80050a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050aa:	685a      	ldr	r2, [r3, #4]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	1ad2      	subs	r2, r2, r3
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80050b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80050ba:	69b8      	ldr	r0, [r7, #24]
 80050bc:	f000 f90a 	bl	80052d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80050c0:	4b1d      	ldr	r3, [pc, #116]	@ (8005138 <pvPortMalloc+0x18c>)
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	4a1b      	ldr	r2, [pc, #108]	@ (8005138 <pvPortMalloc+0x18c>)
 80050cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80050ce:	4b1a      	ldr	r3, [pc, #104]	@ (8005138 <pvPortMalloc+0x18c>)
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	4b1b      	ldr	r3, [pc, #108]	@ (8005140 <pvPortMalloc+0x194>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d203      	bcs.n	80050e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80050da:	4b17      	ldr	r3, [pc, #92]	@ (8005138 <pvPortMalloc+0x18c>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a18      	ldr	r2, [pc, #96]	@ (8005140 <pvPortMalloc+0x194>)
 80050e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80050e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e4:	685a      	ldr	r2, [r3, #4]
 80050e6:	4b13      	ldr	r3, [pc, #76]	@ (8005134 <pvPortMalloc+0x188>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	431a      	orrs	r2, r3
 80050ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80050f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f2:	2200      	movs	r2, #0
 80050f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80050f6:	4b13      	ldr	r3, [pc, #76]	@ (8005144 <pvPortMalloc+0x198>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	3301      	adds	r3, #1
 80050fc:	4a11      	ldr	r2, [pc, #68]	@ (8005144 <pvPortMalloc+0x198>)
 80050fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005100:	f7fe fbe0 	bl	80038c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	f003 0307 	and.w	r3, r3, #7
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00b      	beq.n	8005126 <pvPortMalloc+0x17a>
	__asm volatile
 800510e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005112:	f383 8811 	msr	BASEPRI, r3
 8005116:	f3bf 8f6f 	isb	sy
 800511a:	f3bf 8f4f 	dsb	sy
 800511e:	60fb      	str	r3, [r7, #12]
}
 8005120:	bf00      	nop
 8005122:	bf00      	nop
 8005124:	e7fd      	b.n	8005122 <pvPortMalloc+0x176>
	return pvReturn;
 8005126:	69fb      	ldr	r3, [r7, #28]
}
 8005128:	4618      	mov	r0, r3
 800512a:	3728      	adds	r7, #40	@ 0x28
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	20004aa4 	.word	0x20004aa4
 8005134:	20004ab8 	.word	0x20004ab8
 8005138:	20004aa8 	.word	0x20004aa8
 800513c:	20004a9c 	.word	0x20004a9c
 8005140:	20004aac 	.word	0x20004aac
 8005144:	20004ab0 	.word	0x20004ab0

08005148 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b086      	sub	sp, #24
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d04f      	beq.n	80051fa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800515a:	2308      	movs	r3, #8
 800515c:	425b      	negs	r3, r3
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	4413      	add	r3, r2
 8005162:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	4b25      	ldr	r3, [pc, #148]	@ (8005204 <vPortFree+0xbc>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4013      	ands	r3, r2
 8005172:	2b00      	cmp	r3, #0
 8005174:	d10b      	bne.n	800518e <vPortFree+0x46>
	__asm volatile
 8005176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800517a:	f383 8811 	msr	BASEPRI, r3
 800517e:	f3bf 8f6f 	isb	sy
 8005182:	f3bf 8f4f 	dsb	sy
 8005186:	60fb      	str	r3, [r7, #12]
}
 8005188:	bf00      	nop
 800518a:	bf00      	nop
 800518c:	e7fd      	b.n	800518a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00b      	beq.n	80051ae <vPortFree+0x66>
	__asm volatile
 8005196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800519a:	f383 8811 	msr	BASEPRI, r3
 800519e:	f3bf 8f6f 	isb	sy
 80051a2:	f3bf 8f4f 	dsb	sy
 80051a6:	60bb      	str	r3, [r7, #8]
}
 80051a8:	bf00      	nop
 80051aa:	bf00      	nop
 80051ac:	e7fd      	b.n	80051aa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	685a      	ldr	r2, [r3, #4]
 80051b2:	4b14      	ldr	r3, [pc, #80]	@ (8005204 <vPortFree+0xbc>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4013      	ands	r3, r2
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d01e      	beq.n	80051fa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d11a      	bne.n	80051fa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	685a      	ldr	r2, [r3, #4]
 80051c8:	4b0e      	ldr	r3, [pc, #56]	@ (8005204 <vPortFree+0xbc>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	43db      	mvns	r3, r3
 80051ce:	401a      	ands	r2, r3
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80051d4:	f7fe fb68 	bl	80038a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005208 <vPortFree+0xc0>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4413      	add	r3, r2
 80051e2:	4a09      	ldr	r2, [pc, #36]	@ (8005208 <vPortFree+0xc0>)
 80051e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80051e6:	6938      	ldr	r0, [r7, #16]
 80051e8:	f000 f874 	bl	80052d4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80051ec:	4b07      	ldr	r3, [pc, #28]	@ (800520c <vPortFree+0xc4>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	3301      	adds	r3, #1
 80051f2:	4a06      	ldr	r2, [pc, #24]	@ (800520c <vPortFree+0xc4>)
 80051f4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80051f6:	f7fe fb65 	bl	80038c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80051fa:	bf00      	nop
 80051fc:	3718      	adds	r7, #24
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	20004ab8 	.word	0x20004ab8
 8005208:	20004aa8 	.word	0x20004aa8
 800520c:	20004ab4 	.word	0x20004ab4

08005210 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005216:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800521a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800521c:	4b27      	ldr	r3, [pc, #156]	@ (80052bc <prvHeapInit+0xac>)
 800521e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f003 0307 	and.w	r3, r3, #7
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00c      	beq.n	8005244 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	3307      	adds	r3, #7
 800522e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f023 0307 	bic.w	r3, r3, #7
 8005236:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005238:	68ba      	ldr	r2, [r7, #8]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	4a1f      	ldr	r2, [pc, #124]	@ (80052bc <prvHeapInit+0xac>)
 8005240:	4413      	add	r3, r2
 8005242:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005248:	4a1d      	ldr	r2, [pc, #116]	@ (80052c0 <prvHeapInit+0xb0>)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800524e:	4b1c      	ldr	r3, [pc, #112]	@ (80052c0 <prvHeapInit+0xb0>)
 8005250:	2200      	movs	r2, #0
 8005252:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	68ba      	ldr	r2, [r7, #8]
 8005258:	4413      	add	r3, r2
 800525a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800525c:	2208      	movs	r2, #8
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	1a9b      	subs	r3, r3, r2
 8005262:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f023 0307 	bic.w	r3, r3, #7
 800526a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	4a15      	ldr	r2, [pc, #84]	@ (80052c4 <prvHeapInit+0xb4>)
 8005270:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005272:	4b14      	ldr	r3, [pc, #80]	@ (80052c4 <prvHeapInit+0xb4>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2200      	movs	r2, #0
 8005278:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800527a:	4b12      	ldr	r3, [pc, #72]	@ (80052c4 <prvHeapInit+0xb4>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2200      	movs	r2, #0
 8005280:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	1ad2      	subs	r2, r2, r3
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005290:	4b0c      	ldr	r3, [pc, #48]	@ (80052c4 <prvHeapInit+0xb4>)
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	4a0a      	ldr	r2, [pc, #40]	@ (80052c8 <prvHeapInit+0xb8>)
 800529e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	4a09      	ldr	r2, [pc, #36]	@ (80052cc <prvHeapInit+0xbc>)
 80052a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80052a8:	4b09      	ldr	r3, [pc, #36]	@ (80052d0 <prvHeapInit+0xc0>)
 80052aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80052ae:	601a      	str	r2, [r3, #0]
}
 80052b0:	bf00      	nop
 80052b2:	3714      	adds	r7, #20
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr
 80052bc:	20000e9c 	.word	0x20000e9c
 80052c0:	20004a9c 	.word	0x20004a9c
 80052c4:	20004aa4 	.word	0x20004aa4
 80052c8:	20004aac 	.word	0x20004aac
 80052cc:	20004aa8 	.word	0x20004aa8
 80052d0:	20004ab8 	.word	0x20004ab8

080052d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80052dc:	4b28      	ldr	r3, [pc, #160]	@ (8005380 <prvInsertBlockIntoFreeList+0xac>)
 80052de:	60fb      	str	r3, [r7, #12]
 80052e0:	e002      	b.n	80052e8 <prvInsertBlockIntoFreeList+0x14>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	60fb      	str	r3, [r7, #12]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d8f7      	bhi.n	80052e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	68ba      	ldr	r2, [r7, #8]
 80052fc:	4413      	add	r3, r2
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	429a      	cmp	r2, r3
 8005302:	d108      	bne.n	8005316 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	685a      	ldr	r2, [r3, #4]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	441a      	add	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	68ba      	ldr	r2, [r7, #8]
 8005320:	441a      	add	r2, r3
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	429a      	cmp	r2, r3
 8005328:	d118      	bne.n	800535c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	4b15      	ldr	r3, [pc, #84]	@ (8005384 <prvInsertBlockIntoFreeList+0xb0>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	429a      	cmp	r2, r3
 8005334:	d00d      	beq.n	8005352 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685a      	ldr	r2, [r3, #4]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	441a      	add	r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	601a      	str	r2, [r3, #0]
 8005350:	e008      	b.n	8005364 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005352:	4b0c      	ldr	r3, [pc, #48]	@ (8005384 <prvInsertBlockIntoFreeList+0xb0>)
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	601a      	str	r2, [r3, #0]
 800535a:	e003      	b.n	8005364 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	429a      	cmp	r2, r3
 800536a:	d002      	beq.n	8005372 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005372:	bf00      	nop
 8005374:	3714      	adds	r7, #20
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	20004a9c 	.word	0x20004a9c
 8005384:	20004aa4 	.word	0x20004aa4

08005388 <memset>:
 8005388:	4402      	add	r2, r0
 800538a:	4603      	mov	r3, r0
 800538c:	4293      	cmp	r3, r2
 800538e:	d100      	bne.n	8005392 <memset+0xa>
 8005390:	4770      	bx	lr
 8005392:	f803 1b01 	strb.w	r1, [r3], #1
 8005396:	e7f9      	b.n	800538c <memset+0x4>

08005398 <_reclaim_reent>:
 8005398:	4b29      	ldr	r3, [pc, #164]	@ (8005440 <_reclaim_reent+0xa8>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4283      	cmp	r3, r0
 800539e:	b570      	push	{r4, r5, r6, lr}
 80053a0:	4604      	mov	r4, r0
 80053a2:	d04b      	beq.n	800543c <_reclaim_reent+0xa4>
 80053a4:	69c3      	ldr	r3, [r0, #28]
 80053a6:	b1ab      	cbz	r3, 80053d4 <_reclaim_reent+0x3c>
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	b16b      	cbz	r3, 80053c8 <_reclaim_reent+0x30>
 80053ac:	2500      	movs	r5, #0
 80053ae:	69e3      	ldr	r3, [r4, #28]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	5959      	ldr	r1, [r3, r5]
 80053b4:	2900      	cmp	r1, #0
 80053b6:	d13b      	bne.n	8005430 <_reclaim_reent+0x98>
 80053b8:	3504      	adds	r5, #4
 80053ba:	2d80      	cmp	r5, #128	@ 0x80
 80053bc:	d1f7      	bne.n	80053ae <_reclaim_reent+0x16>
 80053be:	69e3      	ldr	r3, [r4, #28]
 80053c0:	4620      	mov	r0, r4
 80053c2:	68d9      	ldr	r1, [r3, #12]
 80053c4:	f000 f872 	bl	80054ac <_free_r>
 80053c8:	69e3      	ldr	r3, [r4, #28]
 80053ca:	6819      	ldr	r1, [r3, #0]
 80053cc:	b111      	cbz	r1, 80053d4 <_reclaim_reent+0x3c>
 80053ce:	4620      	mov	r0, r4
 80053d0:	f000 f86c 	bl	80054ac <_free_r>
 80053d4:	6961      	ldr	r1, [r4, #20]
 80053d6:	b111      	cbz	r1, 80053de <_reclaim_reent+0x46>
 80053d8:	4620      	mov	r0, r4
 80053da:	f000 f867 	bl	80054ac <_free_r>
 80053de:	69e1      	ldr	r1, [r4, #28]
 80053e0:	b111      	cbz	r1, 80053e8 <_reclaim_reent+0x50>
 80053e2:	4620      	mov	r0, r4
 80053e4:	f000 f862 	bl	80054ac <_free_r>
 80053e8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80053ea:	b111      	cbz	r1, 80053f2 <_reclaim_reent+0x5a>
 80053ec:	4620      	mov	r0, r4
 80053ee:	f000 f85d 	bl	80054ac <_free_r>
 80053f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80053f4:	b111      	cbz	r1, 80053fc <_reclaim_reent+0x64>
 80053f6:	4620      	mov	r0, r4
 80053f8:	f000 f858 	bl	80054ac <_free_r>
 80053fc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80053fe:	b111      	cbz	r1, 8005406 <_reclaim_reent+0x6e>
 8005400:	4620      	mov	r0, r4
 8005402:	f000 f853 	bl	80054ac <_free_r>
 8005406:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005408:	b111      	cbz	r1, 8005410 <_reclaim_reent+0x78>
 800540a:	4620      	mov	r0, r4
 800540c:	f000 f84e 	bl	80054ac <_free_r>
 8005410:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005412:	b111      	cbz	r1, 800541a <_reclaim_reent+0x82>
 8005414:	4620      	mov	r0, r4
 8005416:	f000 f849 	bl	80054ac <_free_r>
 800541a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800541c:	b111      	cbz	r1, 8005424 <_reclaim_reent+0x8c>
 800541e:	4620      	mov	r0, r4
 8005420:	f000 f844 	bl	80054ac <_free_r>
 8005424:	6a23      	ldr	r3, [r4, #32]
 8005426:	b14b      	cbz	r3, 800543c <_reclaim_reent+0xa4>
 8005428:	4620      	mov	r0, r4
 800542a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800542e:	4718      	bx	r3
 8005430:	680e      	ldr	r6, [r1, #0]
 8005432:	4620      	mov	r0, r4
 8005434:	f000 f83a 	bl	80054ac <_free_r>
 8005438:	4631      	mov	r1, r6
 800543a:	e7bb      	b.n	80053b4 <_reclaim_reent+0x1c>
 800543c:	bd70      	pop	{r4, r5, r6, pc}
 800543e:	bf00      	nop
 8005440:	20000010 	.word	0x20000010

08005444 <__libc_init_array>:
 8005444:	b570      	push	{r4, r5, r6, lr}
 8005446:	4d0d      	ldr	r5, [pc, #52]	@ (800547c <__libc_init_array+0x38>)
 8005448:	4c0d      	ldr	r4, [pc, #52]	@ (8005480 <__libc_init_array+0x3c>)
 800544a:	1b64      	subs	r4, r4, r5
 800544c:	10a4      	asrs	r4, r4, #2
 800544e:	2600      	movs	r6, #0
 8005450:	42a6      	cmp	r6, r4
 8005452:	d109      	bne.n	8005468 <__libc_init_array+0x24>
 8005454:	4d0b      	ldr	r5, [pc, #44]	@ (8005484 <__libc_init_array+0x40>)
 8005456:	4c0c      	ldr	r4, [pc, #48]	@ (8005488 <__libc_init_array+0x44>)
 8005458:	f000 f87e 	bl	8005558 <_init>
 800545c:	1b64      	subs	r4, r4, r5
 800545e:	10a4      	asrs	r4, r4, #2
 8005460:	2600      	movs	r6, #0
 8005462:	42a6      	cmp	r6, r4
 8005464:	d105      	bne.n	8005472 <__libc_init_array+0x2e>
 8005466:	bd70      	pop	{r4, r5, r6, pc}
 8005468:	f855 3b04 	ldr.w	r3, [r5], #4
 800546c:	4798      	blx	r3
 800546e:	3601      	adds	r6, #1
 8005470:	e7ee      	b.n	8005450 <__libc_init_array+0xc>
 8005472:	f855 3b04 	ldr.w	r3, [r5], #4
 8005476:	4798      	blx	r3
 8005478:	3601      	adds	r6, #1
 800547a:	e7f2      	b.n	8005462 <__libc_init_array+0x1e>
 800547c:	0800562c 	.word	0x0800562c
 8005480:	0800562c 	.word	0x0800562c
 8005484:	0800562c 	.word	0x0800562c
 8005488:	08005630 	.word	0x08005630

0800548c <__retarget_lock_acquire_recursive>:
 800548c:	4770      	bx	lr

0800548e <__retarget_lock_release_recursive>:
 800548e:	4770      	bx	lr

08005490 <memcpy>:
 8005490:	440a      	add	r2, r1
 8005492:	4291      	cmp	r1, r2
 8005494:	f100 33ff 	add.w	r3, r0, #4294967295
 8005498:	d100      	bne.n	800549c <memcpy+0xc>
 800549a:	4770      	bx	lr
 800549c:	b510      	push	{r4, lr}
 800549e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054a6:	4291      	cmp	r1, r2
 80054a8:	d1f9      	bne.n	800549e <memcpy+0xe>
 80054aa:	bd10      	pop	{r4, pc}

080054ac <_free_r>:
 80054ac:	b538      	push	{r3, r4, r5, lr}
 80054ae:	4605      	mov	r5, r0
 80054b0:	2900      	cmp	r1, #0
 80054b2:	d041      	beq.n	8005538 <_free_r+0x8c>
 80054b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054b8:	1f0c      	subs	r4, r1, #4
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	bfb8      	it	lt
 80054be:	18e4      	addlt	r4, r4, r3
 80054c0:	f000 f83e 	bl	8005540 <__malloc_lock>
 80054c4:	4a1d      	ldr	r2, [pc, #116]	@ (800553c <_free_r+0x90>)
 80054c6:	6813      	ldr	r3, [r2, #0]
 80054c8:	b933      	cbnz	r3, 80054d8 <_free_r+0x2c>
 80054ca:	6063      	str	r3, [r4, #4]
 80054cc:	6014      	str	r4, [r2, #0]
 80054ce:	4628      	mov	r0, r5
 80054d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054d4:	f000 b83a 	b.w	800554c <__malloc_unlock>
 80054d8:	42a3      	cmp	r3, r4
 80054da:	d908      	bls.n	80054ee <_free_r+0x42>
 80054dc:	6820      	ldr	r0, [r4, #0]
 80054de:	1821      	adds	r1, r4, r0
 80054e0:	428b      	cmp	r3, r1
 80054e2:	bf01      	itttt	eq
 80054e4:	6819      	ldreq	r1, [r3, #0]
 80054e6:	685b      	ldreq	r3, [r3, #4]
 80054e8:	1809      	addeq	r1, r1, r0
 80054ea:	6021      	streq	r1, [r4, #0]
 80054ec:	e7ed      	b.n	80054ca <_free_r+0x1e>
 80054ee:	461a      	mov	r2, r3
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	b10b      	cbz	r3, 80054f8 <_free_r+0x4c>
 80054f4:	42a3      	cmp	r3, r4
 80054f6:	d9fa      	bls.n	80054ee <_free_r+0x42>
 80054f8:	6811      	ldr	r1, [r2, #0]
 80054fa:	1850      	adds	r0, r2, r1
 80054fc:	42a0      	cmp	r0, r4
 80054fe:	d10b      	bne.n	8005518 <_free_r+0x6c>
 8005500:	6820      	ldr	r0, [r4, #0]
 8005502:	4401      	add	r1, r0
 8005504:	1850      	adds	r0, r2, r1
 8005506:	4283      	cmp	r3, r0
 8005508:	6011      	str	r1, [r2, #0]
 800550a:	d1e0      	bne.n	80054ce <_free_r+0x22>
 800550c:	6818      	ldr	r0, [r3, #0]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	6053      	str	r3, [r2, #4]
 8005512:	4408      	add	r0, r1
 8005514:	6010      	str	r0, [r2, #0]
 8005516:	e7da      	b.n	80054ce <_free_r+0x22>
 8005518:	d902      	bls.n	8005520 <_free_r+0x74>
 800551a:	230c      	movs	r3, #12
 800551c:	602b      	str	r3, [r5, #0]
 800551e:	e7d6      	b.n	80054ce <_free_r+0x22>
 8005520:	6820      	ldr	r0, [r4, #0]
 8005522:	1821      	adds	r1, r4, r0
 8005524:	428b      	cmp	r3, r1
 8005526:	bf04      	itt	eq
 8005528:	6819      	ldreq	r1, [r3, #0]
 800552a:	685b      	ldreq	r3, [r3, #4]
 800552c:	6063      	str	r3, [r4, #4]
 800552e:	bf04      	itt	eq
 8005530:	1809      	addeq	r1, r1, r0
 8005532:	6021      	streq	r1, [r4, #0]
 8005534:	6054      	str	r4, [r2, #4]
 8005536:	e7ca      	b.n	80054ce <_free_r+0x22>
 8005538:	bd38      	pop	{r3, r4, r5, pc}
 800553a:	bf00      	nop
 800553c:	20004bf8 	.word	0x20004bf8

08005540 <__malloc_lock>:
 8005540:	4801      	ldr	r0, [pc, #4]	@ (8005548 <__malloc_lock+0x8>)
 8005542:	f7ff bfa3 	b.w	800548c <__retarget_lock_acquire_recursive>
 8005546:	bf00      	nop
 8005548:	20004bf4 	.word	0x20004bf4

0800554c <__malloc_unlock>:
 800554c:	4801      	ldr	r0, [pc, #4]	@ (8005554 <__malloc_unlock+0x8>)
 800554e:	f7ff bf9e 	b.w	800548e <__retarget_lock_release_recursive>
 8005552:	bf00      	nop
 8005554:	20004bf4 	.word	0x20004bf4

08005558 <_init>:
 8005558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800555a:	bf00      	nop
 800555c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800555e:	bc08      	pop	{r3}
 8005560:	469e      	mov	lr, r3
 8005562:	4770      	bx	lr

08005564 <_fini>:
 8005564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005566:	bf00      	nop
 8005568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800556a:	bc08      	pop	{r3}
 800556c:	469e      	mov	lr, r3
 800556e:	4770      	bx	lr
