
led_blink_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005530  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  080056e0  080056e0  000066e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005814  08005814  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  08005814  08005814  00006814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800581c  0800581c  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800581c  0800581c  0000681c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005820  08005820  00006820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005824  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007060  2**0
                  CONTENTS
 10 .bss          00004bac  20000060  20000060  00007060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004c0c  20004c0c  00007060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014e61  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003034  00000000  00000000  0001bef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001230  00000000  00000000  0001ef28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dfd  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000030d5  00000000  00000000  00020f55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013a0d  00000000  00000000  0002402a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1e8c  00000000  00000000  00037a37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001198c3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f08  00000000  00000000  00119908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  0011e810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080056c8 	.word	0x080056c8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	080056c8 	.word	0x080056c8

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b96a 	b.w	80004dc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	460c      	mov	r4, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14e      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022c:	4694      	mov	ip, r2
 800022e:	458c      	cmp	ip, r1
 8000230:	4686      	mov	lr, r0
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	d962      	bls.n	80002fe <__udivmoddi4+0xde>
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0320 	rsb	r3, r2, #32
 800023e:	4091      	lsls	r1, r2
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	fa0c fc02 	lsl.w	ip, ip, r2
 8000248:	4319      	orrs	r1, r3
 800024a:	fa00 fe02 	lsl.w	lr, r0, r2
 800024e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000252:	fa1f f68c 	uxth.w	r6, ip
 8000256:	fbb1 f4f7 	udiv	r4, r1, r7
 800025a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025e:	fb07 1114 	mls	r1, r7, r4, r1
 8000262:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000266:	fb04 f106 	mul.w	r1, r4, r6
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f104 30ff 	add.w	r0, r4, #4294967295
 8000276:	f080 8112 	bcs.w	800049e <__udivmoddi4+0x27e>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 810f 	bls.w	800049e <__udivmoddi4+0x27e>
 8000280:	3c02      	subs	r4, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a59      	subs	r1, r3, r1
 8000286:	fa1f f38e 	uxth.w	r3, lr
 800028a:	fbb1 f0f7 	udiv	r0, r1, r7
 800028e:	fb07 1110 	mls	r1, r7, r0, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb00 f606 	mul.w	r6, r0, r6
 800029a:	429e      	cmp	r6, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x94>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a6:	f080 80fc 	bcs.w	80004a2 <__udivmoddi4+0x282>
 80002aa:	429e      	cmp	r6, r3
 80002ac:	f240 80f9 	bls.w	80004a2 <__udivmoddi4+0x282>
 80002b0:	4463      	add	r3, ip
 80002b2:	3802      	subs	r0, #2
 80002b4:	1b9b      	subs	r3, r3, r6
 80002b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ba:	2100      	movs	r1, #0
 80002bc:	b11d      	cbz	r5, 80002c6 <__udivmoddi4+0xa6>
 80002be:	40d3      	lsrs	r3, r2
 80002c0:	2200      	movs	r2, #0
 80002c2:	e9c5 3200 	strd	r3, r2, [r5]
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d905      	bls.n	80002da <__udivmoddi4+0xba>
 80002ce:	b10d      	cbz	r5, 80002d4 <__udivmoddi4+0xb4>
 80002d0:	e9c5 0100 	strd	r0, r1, [r5]
 80002d4:	2100      	movs	r1, #0
 80002d6:	4608      	mov	r0, r1
 80002d8:	e7f5      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d146      	bne.n	8000370 <__udivmoddi4+0x150>
 80002e2:	42a3      	cmp	r3, r4
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xcc>
 80002e6:	4290      	cmp	r0, r2
 80002e8:	f0c0 80f0 	bcc.w	80004cc <__udivmoddi4+0x2ac>
 80002ec:	1a86      	subs	r6, r0, r2
 80002ee:	eb64 0303 	sbc.w	r3, r4, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	d0e6      	beq.n	80002c6 <__udivmoddi4+0xa6>
 80002f8:	e9c5 6300 	strd	r6, r3, [r5]
 80002fc:	e7e3      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x204>
 8000304:	eba1 040c 	sub.w	r4, r1, ip
 8000308:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800030c:	fa1f f78c 	uxth.w	r7, ip
 8000310:	2101      	movs	r1, #1
 8000312:	fbb4 f6f8 	udiv	r6, r4, r8
 8000316:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031a:	fb08 4416 	mls	r4, r8, r6, r4
 800031e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000322:	fb07 f006 	mul.w	r0, r7, r6
 8000326:	4298      	cmp	r0, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x11c>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x11a>
 8000334:	4298      	cmp	r0, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 800033a:	4626      	mov	r6, r4
 800033c:	1a1c      	subs	r4, r3, r0
 800033e:	fa1f f38e 	uxth.w	r3, lr
 8000342:	fbb4 f0f8 	udiv	r0, r4, r8
 8000346:	fb08 4410 	mls	r4, r8, r0, r4
 800034a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034e:	fb00 f707 	mul.w	r7, r0, r7
 8000352:	429f      	cmp	r7, r3
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x148>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f100 34ff 	add.w	r4, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x146>
 8000360:	429f      	cmp	r7, r3
 8000362:	f200 80b0 	bhi.w	80004c6 <__udivmoddi4+0x2a6>
 8000366:	4620      	mov	r0, r4
 8000368:	1bdb      	subs	r3, r3, r7
 800036a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0x9c>
 8000370:	f1c1 0620 	rsb	r6, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 f706 	lsr.w	r7, r2, r6
 800037a:	431f      	orrs	r7, r3
 800037c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000380:	fa04 f301 	lsl.w	r3, r4, r1
 8000384:	ea43 030c 	orr.w	r3, r3, ip
 8000388:	40f4      	lsrs	r4, r6
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	0c38      	lsrs	r0, r7, #16
 8000390:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000394:	fbb4 fef0 	udiv	lr, r4, r0
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	fb00 441e 	mls	r4, r0, lr, r4
 80003a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a4:	fb0e f90c 	mul.w	r9, lr, ip
 80003a8:	45a1      	cmp	r9, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90a      	bls.n	80003c6 <__udivmoddi4+0x1a6>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b6:	f080 8084 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80003ba:	45a1      	cmp	r9, r4
 80003bc:	f240 8081 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80003c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	eba4 0409 	sub.w	r4, r4, r9
 80003ca:	fa1f f983 	uxth.w	r9, r3
 80003ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d2:	fb00 4413 	mls	r4, r0, r3, r4
 80003d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003da:	fb03 fc0c 	mul.w	ip, r3, ip
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x1d2>
 80003e2:	193c      	adds	r4, r7, r4
 80003e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e8:	d267      	bcs.n	80004ba <__udivmoddi4+0x29a>
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d965      	bls.n	80004ba <__udivmoddi4+0x29a>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	443c      	add	r4, r7
 80003f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f6:	fba0 9302 	umull	r9, r3, r0, r2
 80003fa:	eba4 040c 	sub.w	r4, r4, ip
 80003fe:	429c      	cmp	r4, r3
 8000400:	46ce      	mov	lr, r9
 8000402:	469c      	mov	ip, r3
 8000404:	d351      	bcc.n	80004aa <__udivmoddi4+0x28a>
 8000406:	d04e      	beq.n	80004a6 <__udivmoddi4+0x286>
 8000408:	b155      	cbz	r5, 8000420 <__udivmoddi4+0x200>
 800040a:	ebb8 030e 	subs.w	r3, r8, lr
 800040e:	eb64 040c 	sbc.w	r4, r4, ip
 8000412:	fa04 f606 	lsl.w	r6, r4, r6
 8000416:	40cb      	lsrs	r3, r1
 8000418:	431e      	orrs	r6, r3
 800041a:	40cc      	lsrs	r4, r1
 800041c:	e9c5 6400 	strd	r6, r4, [r5]
 8000420:	2100      	movs	r1, #0
 8000422:	e750      	b.n	80002c6 <__udivmoddi4+0xa6>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f103 	lsr.w	r1, r0, r3
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	fa24 f303 	lsr.w	r3, r4, r3
 8000434:	4094      	lsls	r4, r2
 8000436:	430c      	orrs	r4, r1
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000440:	fa1f f78c 	uxth.w	r7, ip
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3110 	mls	r1, r8, r0, r3
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000452:	fb00 f107 	mul.w	r1, r0, r7
 8000456:	4299      	cmp	r1, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x24c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000462:	d22c      	bcs.n	80004be <__udivmoddi4+0x29e>
 8000464:	4299      	cmp	r1, r3
 8000466:	d92a      	bls.n	80004be <__udivmoddi4+0x29e>
 8000468:	3802      	subs	r0, #2
 800046a:	4463      	add	r3, ip
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb3 f1f8 	udiv	r1, r3, r8
 8000474:	fb08 3311 	mls	r3, r8, r1, r3
 8000478:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800047c:	fb01 f307 	mul.w	r3, r1, r7
 8000480:	42a3      	cmp	r3, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x276>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f101 36ff 	add.w	r6, r1, #4294967295
 800048c:	d213      	bcs.n	80004b6 <__udivmoddi4+0x296>
 800048e:	42a3      	cmp	r3, r4
 8000490:	d911      	bls.n	80004b6 <__udivmoddi4+0x296>
 8000492:	3902      	subs	r1, #2
 8000494:	4464      	add	r4, ip
 8000496:	1ae4      	subs	r4, r4, r3
 8000498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800049c:	e739      	b.n	8000312 <__udivmoddi4+0xf2>
 800049e:	4604      	mov	r4, r0
 80004a0:	e6f0      	b.n	8000284 <__udivmoddi4+0x64>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e706      	b.n	80002b4 <__udivmoddi4+0x94>
 80004a6:	45c8      	cmp	r8, r9
 80004a8:	d2ae      	bcs.n	8000408 <__udivmoddi4+0x1e8>
 80004aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7a8      	b.n	8000408 <__udivmoddi4+0x1e8>
 80004b6:	4631      	mov	r1, r6
 80004b8:	e7ed      	b.n	8000496 <__udivmoddi4+0x276>
 80004ba:	4603      	mov	r3, r0
 80004bc:	e799      	b.n	80003f2 <__udivmoddi4+0x1d2>
 80004be:	4630      	mov	r0, r6
 80004c0:	e7d4      	b.n	800046c <__udivmoddi4+0x24c>
 80004c2:	46d6      	mov	lr, sl
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1a6>
 80004c6:	4463      	add	r3, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e74d      	b.n	8000368 <__udivmoddi4+0x148>
 80004cc:	4606      	mov	r6, r0
 80004ce:	4623      	mov	r3, r4
 80004d0:	4608      	mov	r0, r1
 80004d2:	e70f      	b.n	80002f4 <__udivmoddi4+0xd4>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	e730      	b.n	800033c <__udivmoddi4+0x11c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e4:	f000 fa68 	bl	80009b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e8:	f000 f85c 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ec:	f000 f8ba 	bl	8000664 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f0:	f001 fca8 	bl	8001e44 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem01 */
  myBinarySem01Handle = osSemaphoreNew(1, 1, &myBinarySem01_attributes);
 80004f4:	4a1b      	ldr	r2, [pc, #108]	@ (8000564 <main+0x84>)
 80004f6:	2101      	movs	r1, #1
 80004f8:	2001      	movs	r0, #1
 80004fa:	f001 fe80 	bl	80021fe <osSemaphoreNew>
 80004fe:	4603      	mov	r3, r0
 8000500:	4a19      	ldr	r2, [pc, #100]	@ (8000568 <main+0x88>)
 8000502:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of led_on */
  led_onHandle = osMessageQueueNew (16, sizeof(uint16_t), &led_on_attributes);
 8000504:	4a19      	ldr	r2, [pc, #100]	@ (800056c <main+0x8c>)
 8000506:	2102      	movs	r1, #2
 8000508:	2010      	movs	r0, #16
 800050a:	f001 ff01 	bl	8002310 <osMessageQueueNew>
 800050e:	4603      	mov	r3, r0
 8000510:	4a17      	ldr	r2, [pc, #92]	@ (8000570 <main+0x90>)
 8000512:	6013      	str	r3, [r2, #0]

  /* creation of led_off */
  led_offHandle = osMessageQueueNew (16, sizeof(uint16_t), &led_off_attributes);
 8000514:	4a17      	ldr	r2, [pc, #92]	@ (8000574 <main+0x94>)
 8000516:	2102      	movs	r1, #2
 8000518:	2010      	movs	r0, #16
 800051a:	f001 fef9 	bl	8002310 <osMessageQueueNew>
 800051e:	4603      	mov	r3, r0
 8000520:	4a15      	ldr	r2, [pc, #84]	@ (8000578 <main+0x98>)
 8000522:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1_LED_on */
  Task1_LED_onHandle = osThreadNew(StartDefaultTask, NULL, &Task1_LED_on_attributes);
 8000524:	4a15      	ldr	r2, [pc, #84]	@ (800057c <main+0x9c>)
 8000526:	2100      	movs	r1, #0
 8000528:	4815      	ldr	r0, [pc, #84]	@ (8000580 <main+0xa0>)
 800052a:	f001 fcd5 	bl	8001ed8 <osThreadNew>
 800052e:	4603      	mov	r3, r0
 8000530:	4a14      	ldr	r2, [pc, #80]	@ (8000584 <main+0xa4>)
 8000532:	6013      	str	r3, [r2, #0]

  /* creation of Task_Led_off */
  Task_Led_offHandle = osThreadNew(StartTask02, NULL, &Task_Led_off_attributes);
 8000534:	4a14      	ldr	r2, [pc, #80]	@ (8000588 <main+0xa8>)
 8000536:	2100      	movs	r1, #0
 8000538:	4814      	ldr	r0, [pc, #80]	@ (800058c <main+0xac>)
 800053a:	f001 fccd 	bl	8001ed8 <osThreadNew>
 800053e:	4603      	mov	r3, r0
 8000540:	4a13      	ldr	r2, [pc, #76]	@ (8000590 <main+0xb0>)
 8000542:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of eventoled_on */
  eventoled_onHandle = osEventFlagsNew(&eventoled_on_attributes);
 8000544:	4813      	ldr	r0, [pc, #76]	@ (8000594 <main+0xb4>)
 8000546:	f001 fd74 	bl	8002032 <osEventFlagsNew>
 800054a:	4603      	mov	r3, r0
 800054c:	4a12      	ldr	r2, [pc, #72]	@ (8000598 <main+0xb8>)
 800054e:	6013      	str	r3, [r2, #0]

  /* creation of start_event */
  start_eventHandle = osEventFlagsNew(&start_event_attributes);
 8000550:	4812      	ldr	r0, [pc, #72]	@ (800059c <main+0xbc>)
 8000552:	f001 fd6e 	bl	8002032 <osEventFlagsNew>
 8000556:	4603      	mov	r3, r0
 8000558:	4a11      	ldr	r2, [pc, #68]	@ (80005a0 <main+0xc0>)
 800055a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800055c:	f001 fc96 	bl	8001e8c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000560:	bf00      	nop
 8000562:	e7fd      	b.n	8000560 <main+0x80>
 8000564:	080057cc 	.word	0x080057cc
 8000568:	2000008c 	.word	0x2000008c
 800056c:	0800579c 	.word	0x0800579c
 8000570:	20000084 	.word	0x20000084
 8000574:	080057b4 	.word	0x080057b4
 8000578:	20000088 	.word	0x20000088
 800057c:	08005754 	.word	0x08005754
 8000580:	08000709 	.word	0x08000709
 8000584:	2000007c 	.word	0x2000007c
 8000588:	08005778 	.word	0x08005778
 800058c:	08000765 	.word	0x08000765
 8000590:	20000080 	.word	0x20000080
 8000594:	080057dc 	.word	0x080057dc
 8000598:	20000090 	.word	0x20000090
 800059c:	080057ec 	.word	0x080057ec
 80005a0:	20000094 	.word	0x20000094

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b094      	sub	sp, #80	@ 0x50
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 0320 	add.w	r3, r7, #32
 80005ae:	2230      	movs	r2, #48	@ 0x30
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f004 ffa0 	bl	80054f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c8:	2300      	movs	r3, #0
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	4b23      	ldr	r3, [pc, #140]	@ (800065c <SystemClock_Config+0xb8>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d0:	4a22      	ldr	r2, [pc, #136]	@ (800065c <SystemClock_Config+0xb8>)
 80005d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005d8:	4b20      	ldr	r3, [pc, #128]	@ (800065c <SystemClock_Config+0xb8>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005e4:	2300      	movs	r3, #0
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000660 <SystemClock_Config+0xbc>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005f0:	4a1b      	ldr	r2, [pc, #108]	@ (8000660 <SystemClock_Config+0xbc>)
 80005f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005f6:	6013      	str	r3, [r2, #0]
 80005f8:	4b19      	ldr	r3, [pc, #100]	@ (8000660 <SystemClock_Config+0xbc>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000604:	2302      	movs	r3, #2
 8000606:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000608:	2301      	movs	r3, #1
 800060a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800060c:	2310      	movs	r3, #16
 800060e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000610:	2300      	movs	r3, #0
 8000612:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000614:	f107 0320 	add.w	r3, r7, #32
 8000618:	4618      	mov	r0, r3
 800061a:	f000 fcb7 	bl	8000f8c <HAL_RCC_OscConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000624:	f000 f8c2 	bl	80007ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000628:	230f      	movs	r3, #15
 800062a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800062c:	2300      	movs	r3, #0
 800062e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f000 ff1a 	bl	800147c <HAL_RCC_ClockConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800064e:	f000 f8ad 	bl	80007ac <Error_Handler>
  }
}
 8000652:	bf00      	nop
 8000654:	3750      	adds	r7, #80	@ 0x50
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40023800 	.word	0x40023800
 8000660:	40007000 	.word	0x40007000

08000664 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b088      	sub	sp, #32
 8000668:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066a:	f107 030c 	add.w	r3, r7, #12
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
 8000678:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	4b20      	ldr	r3, [pc, #128]	@ (8000700 <MX_GPIO_Init+0x9c>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	4a1f      	ldr	r2, [pc, #124]	@ (8000700 <MX_GPIO_Init+0x9c>)
 8000684:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000688:	6313      	str	r3, [r2, #48]	@ 0x30
 800068a:	4b1d      	ldr	r3, [pc, #116]	@ (8000700 <MX_GPIO_Init+0x9c>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	4b19      	ldr	r3, [pc, #100]	@ (8000700 <MX_GPIO_Init+0x9c>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069e:	4a18      	ldr	r2, [pc, #96]	@ (8000700 <MX_GPIO_Init+0x9c>)
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006a6:	4b16      	ldr	r3, [pc, #88]	@ (8000700 <MX_GPIO_Init+0x9c>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	603b      	str	r3, [r7, #0]
 80006b6:	4b12      	ldr	r3, [pc, #72]	@ (8000700 <MX_GPIO_Init+0x9c>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	4a11      	ldr	r2, [pc, #68]	@ (8000700 <MX_GPIO_Init+0x9c>)
 80006bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000700 <MX_GPIO_Init+0x9c>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006ca:	603b      	str	r3, [r7, #0]
 80006cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80006d4:	480b      	ldr	r0, [pc, #44]	@ (8000704 <MX_GPIO_Init+0xa0>)
 80006d6:	f000 fc3f 	bl	8000f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80006da:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80006de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e0:	2301      	movs	r3, #1
 80006e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	4619      	mov	r1, r3
 80006f2:	4804      	ldr	r0, [pc, #16]	@ (8000704 <MX_GPIO_Init+0xa0>)
 80006f4:	f000 fa84 	bl	8000c00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006f8:	bf00      	nop
 80006fa:	3720      	adds	r7, #32
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40023800 	.word	0x40023800
 8000704:	40021800 	.word	0x40021800

08000708 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
    // Wait for the event to turn on the LED
    osEventFlagsWait(eventoled_onHandle, (1U << 0), osFlagsWaitAny, osWaitForever);
 8000710:	4b12      	ldr	r3, [pc, #72]	@ (800075c <StartDefaultTask+0x54>)
 8000712:	6818      	ldr	r0, [r3, #0]
 8000714:	f04f 33ff 	mov.w	r3, #4294967295
 8000718:	2200      	movs	r2, #0
 800071a:	2101      	movs	r1, #1
 800071c:	f001 fd0a 	bl	8002134 <osEventFlagsWait>

    // Turn on the LED (example for PG13)
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);
 8000720:	2201      	movs	r2, #1
 8000722:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000726:	480e      	ldr	r0, [pc, #56]	@ (8000760 <StartDefaultTask+0x58>)
 8000728:	f000 fc16 	bl	8000f58 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
 800072c:	2201      	movs	r2, #1
 800072e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000732:	480b      	ldr	r0, [pc, #44]	@ (8000760 <StartDefaultTask+0x58>)
 8000734:	f000 fc10 	bl	8000f58 <HAL_GPIO_WritePin>
    // Delay for some time (e.g., 1 second)
    osDelay(1000);
 8000738:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800073c:	f001 fc5e 	bl	8001ffc <osDelay>

    // Clear the LED (turn off)
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000746:	4806      	ldr	r0, [pc, #24]	@ (8000760 <StartDefaultTask+0x58>)
 8000748:	f000 fc06 	bl	8000f58 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 800074c:	2200      	movs	r2, #0
 800074e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000752:	4803      	ldr	r0, [pc, #12]	@ (8000760 <StartDefaultTask+0x58>)
 8000754:	f000 fc00 	bl	8000f58 <HAL_GPIO_WritePin>
    osEventFlagsWait(eventoled_onHandle, (1U << 0), osFlagsWaitAny, osWaitForever);
 8000758:	bf00      	nop
 800075a:	e7d9      	b.n	8000710 <StartDefaultTask+0x8>
 800075c:	20000090 	.word	0x20000090
 8000760:	40021800 	.word	0x40021800

08000764 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
    // Wait for some condition or user input
    osDelay(2000);  // Wait for 2 seconds (this is just an example)
 800076c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000770:	f001 fc44 	bl	8001ffc <osDelay>

    // Trigger the event to turn the LED on
    osEventFlagsSet(eventoled_onHandle, (1U << 0));
 8000774:	4b03      	ldr	r3, [pc, #12]	@ (8000784 <StartTask02+0x20>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2101      	movs	r1, #1
 800077a:	4618      	mov	r0, r3
 800077c:	f001 fc98 	bl	80020b0 <osEventFlagsSet>
    osDelay(2000);  // Wait for 2 seconds (this is just an example)
 8000780:	bf00      	nop
 8000782:	e7f3      	b.n	800076c <StartTask02+0x8>
 8000784:	20000090 	.word	0x20000090

08000788 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a04      	ldr	r2, [pc, #16]	@ (80007a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d101      	bne.n	800079e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800079a:	f000 f92f 	bl	80009fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40010000 	.word	0x40010000

080007ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b0:	b672      	cpsid	i
}
 80007b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b4:	bf00      	nop
 80007b6:	e7fd      	b.n	80007b4 <Error_Handler+0x8>

080007b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	4b12      	ldr	r3, [pc, #72]	@ (800080c <HAL_MspInit+0x54>)
 80007c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007c6:	4a11      	ldr	r2, [pc, #68]	@ (800080c <HAL_MspInit+0x54>)
 80007c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80007ce:	4b0f      	ldr	r3, [pc, #60]	@ (800080c <HAL_MspInit+0x54>)
 80007d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	603b      	str	r3, [r7, #0]
 80007de:	4b0b      	ldr	r3, [pc, #44]	@ (800080c <HAL_MspInit+0x54>)
 80007e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e2:	4a0a      	ldr	r2, [pc, #40]	@ (800080c <HAL_MspInit+0x54>)
 80007e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80007ea:	4b08      	ldr	r3, [pc, #32]	@ (800080c <HAL_MspInit+0x54>)
 80007ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	210f      	movs	r1, #15
 80007fa:	f06f 0001 	mvn.w	r0, #1
 80007fe:	f000 f9d5 	bl	8000bac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40023800 	.word	0x40023800

08000810 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08c      	sub	sp, #48	@ 0x30
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000818:	2300      	movs	r3, #0
 800081a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800081c:	2300      	movs	r3, #0
 800081e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000820:	2300      	movs	r3, #0
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	4b2e      	ldr	r3, [pc, #184]	@ (80008e0 <HAL_InitTick+0xd0>)
 8000826:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000828:	4a2d      	ldr	r2, [pc, #180]	@ (80008e0 <HAL_InitTick+0xd0>)
 800082a:	f043 0301 	orr.w	r3, r3, #1
 800082e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000830:	4b2b      	ldr	r3, [pc, #172]	@ (80008e0 <HAL_InitTick+0xd0>)
 8000832:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000834:	f003 0301 	and.w	r3, r3, #1
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800083c:	f107 020c 	add.w	r2, r7, #12
 8000840:	f107 0310 	add.w	r3, r7, #16
 8000844:	4611      	mov	r1, r2
 8000846:	4618      	mov	r0, r3
 8000848:	f000 ffe4 	bl	8001814 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800084c:	f000 ffce 	bl	80017ec <HAL_RCC_GetPCLK2Freq>
 8000850:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000854:	4a23      	ldr	r2, [pc, #140]	@ (80008e4 <HAL_InitTick+0xd4>)
 8000856:	fba2 2303 	umull	r2, r3, r2, r3
 800085a:	0c9b      	lsrs	r3, r3, #18
 800085c:	3b01      	subs	r3, #1
 800085e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000860:	4b21      	ldr	r3, [pc, #132]	@ (80008e8 <HAL_InitTick+0xd8>)
 8000862:	4a22      	ldr	r2, [pc, #136]	@ (80008ec <HAL_InitTick+0xdc>)
 8000864:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000866:	4b20      	ldr	r3, [pc, #128]	@ (80008e8 <HAL_InitTick+0xd8>)
 8000868:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800086c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800086e:	4a1e      	ldr	r2, [pc, #120]	@ (80008e8 <HAL_InitTick+0xd8>)
 8000870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000872:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000874:	4b1c      	ldr	r3, [pc, #112]	@ (80008e8 <HAL_InitTick+0xd8>)
 8000876:	2200      	movs	r2, #0
 8000878:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800087a:	4b1b      	ldr	r3, [pc, #108]	@ (80008e8 <HAL_InitTick+0xd8>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000880:	4b19      	ldr	r3, [pc, #100]	@ (80008e8 <HAL_InitTick+0xd8>)
 8000882:	2200      	movs	r2, #0
 8000884:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000886:	4818      	ldr	r0, [pc, #96]	@ (80008e8 <HAL_InitTick+0xd8>)
 8000888:	f000 fff6 	bl	8001878 <HAL_TIM_Base_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000892:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000896:	2b00      	cmp	r3, #0
 8000898:	d11b      	bne.n	80008d2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800089a:	4813      	ldr	r0, [pc, #76]	@ (80008e8 <HAL_InitTick+0xd8>)
 800089c:	f001 f846 	bl	800192c <HAL_TIM_Base_Start_IT>
 80008a0:	4603      	mov	r3, r0
 80008a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80008a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d111      	bne.n	80008d2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80008ae:	2019      	movs	r0, #25
 80008b0:	f000 f998 	bl	8000be4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2b0f      	cmp	r3, #15
 80008b8:	d808      	bhi.n	80008cc <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80008ba:	2200      	movs	r2, #0
 80008bc:	6879      	ldr	r1, [r7, #4]
 80008be:	2019      	movs	r0, #25
 80008c0:	f000 f974 	bl	8000bac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008c4:	4a0a      	ldr	r2, [pc, #40]	@ (80008f0 <HAL_InitTick+0xe0>)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	6013      	str	r3, [r2, #0]
 80008ca:	e002      	b.n	80008d2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80008cc:	2301      	movs	r3, #1
 80008ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80008d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3730      	adds	r7, #48	@ 0x30
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40023800 	.word	0x40023800
 80008e4:	431bde83 	.word	0x431bde83
 80008e8:	20000098 	.word	0x20000098
 80008ec:	40010000 	.word	0x40010000
 80008f0:	20000004 	.word	0x20000004

080008f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <NMI_Handler+0x4>

080008fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <HardFault_Handler+0x4>

08000904 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <MemManage_Handler+0x4>

0800090c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000910:	bf00      	nop
 8000912:	e7fd      	b.n	8000910 <BusFault_Handler+0x4>

08000914 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000918:	bf00      	nop
 800091a:	e7fd      	b.n	8000918 <UsageFault_Handler+0x4>

0800091c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
	...

0800092c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000930:	4802      	ldr	r0, [pc, #8]	@ (800093c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000932:	f001 f86b 	bl	8001a0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000098 	.word	0x20000098

08000940 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000944:	4b06      	ldr	r3, [pc, #24]	@ (8000960 <SystemInit+0x20>)
 8000946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800094a:	4a05      	ldr	r2, [pc, #20]	@ (8000960 <SystemInit+0x20>)
 800094c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000950:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	e000ed00 	.word	0xe000ed00

08000964 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000964:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800099c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000968:	f7ff ffea 	bl	8000940 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800096c:	480c      	ldr	r0, [pc, #48]	@ (80009a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800096e:	490d      	ldr	r1, [pc, #52]	@ (80009a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000970:	4a0d      	ldr	r2, [pc, #52]	@ (80009a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000972:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000974:	e002      	b.n	800097c <LoopCopyDataInit>

08000976 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000976:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000978:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800097a:	3304      	adds	r3, #4

0800097c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800097c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800097e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000980:	d3f9      	bcc.n	8000976 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000982:	4a0a      	ldr	r2, [pc, #40]	@ (80009ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000984:	4c0a      	ldr	r4, [pc, #40]	@ (80009b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000986:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000988:	e001      	b.n	800098e <LoopFillZerobss>

0800098a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800098a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800098c:	3204      	adds	r2, #4

0800098e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800098e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000990:	d3fb      	bcc.n	800098a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000992:	f004 fe0f 	bl	80055b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000996:	f7ff fda3 	bl	80004e0 <main>
  bx  lr    
 800099a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800099c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80009a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80009a8:	08005824 	.word	0x08005824
  ldr r2, =_sbss
 80009ac:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80009b0:	20004c0c 	.word	0x20004c0c

080009b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009b4:	e7fe      	b.n	80009b4 <ADC_IRQHandler>
	...

080009b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009bc:	4b0e      	ldr	r3, [pc, #56]	@ (80009f8 <HAL_Init+0x40>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a0d      	ldr	r2, [pc, #52]	@ (80009f8 <HAL_Init+0x40>)
 80009c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009c8:	4b0b      	ldr	r3, [pc, #44]	@ (80009f8 <HAL_Init+0x40>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a0a      	ldr	r2, [pc, #40]	@ (80009f8 <HAL_Init+0x40>)
 80009ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d4:	4b08      	ldr	r3, [pc, #32]	@ (80009f8 <HAL_Init+0x40>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a07      	ldr	r2, [pc, #28]	@ (80009f8 <HAL_Init+0x40>)
 80009da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009e0:	2003      	movs	r0, #3
 80009e2:	f000 f8d8 	bl	8000b96 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009e6:	200f      	movs	r0, #15
 80009e8:	f7ff ff12 	bl	8000810 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009ec:	f7ff fee4 	bl	80007b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009f0:	2300      	movs	r3, #0
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40023c00 	.word	0x40023c00

080009fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a00:	4b06      	ldr	r3, [pc, #24]	@ (8000a1c <HAL_IncTick+0x20>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	461a      	mov	r2, r3
 8000a06:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <HAL_IncTick+0x24>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	4a04      	ldr	r2, [pc, #16]	@ (8000a20 <HAL_IncTick+0x24>)
 8000a0e:	6013      	str	r3, [r2, #0]
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	20000008 	.word	0x20000008
 8000a20:	200000e0 	.word	0x200000e0

08000a24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  return uwTick;
 8000a28:	4b03      	ldr	r3, [pc, #12]	@ (8000a38 <HAL_GetTick+0x14>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	200000e0 	.word	0x200000e0

08000a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b085      	sub	sp, #20
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f003 0307 	and.w	r3, r3, #7
 8000a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a80 <__NVIC_SetPriorityGrouping+0x44>)
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a52:	68ba      	ldr	r2, [r7, #8]
 8000a54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a58:	4013      	ands	r3, r2
 8000a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a6e:	4a04      	ldr	r2, [pc, #16]	@ (8000a80 <__NVIC_SetPriorityGrouping+0x44>)
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	60d3      	str	r3, [r2, #12]
}
 8000a74:	bf00      	nop
 8000a76:	3714      	adds	r7, #20
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a88:	4b04      	ldr	r3, [pc, #16]	@ (8000a9c <__NVIC_GetPriorityGrouping+0x18>)
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	0a1b      	lsrs	r3, r3, #8
 8000a8e:	f003 0307 	and.w	r3, r3, #7
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	db0b      	blt.n	8000aca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	f003 021f 	and.w	r2, r3, #31
 8000ab8:	4907      	ldr	r1, [pc, #28]	@ (8000ad8 <__NVIC_EnableIRQ+0x38>)
 8000aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abe:	095b      	lsrs	r3, r3, #5
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000aca:	bf00      	nop
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	e000e100 	.word	0xe000e100

08000adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	6039      	str	r1, [r7, #0]
 8000ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	db0a      	blt.n	8000b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	490c      	ldr	r1, [pc, #48]	@ (8000b28 <__NVIC_SetPriority+0x4c>)
 8000af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afa:	0112      	lsls	r2, r2, #4
 8000afc:	b2d2      	uxtb	r2, r2
 8000afe:	440b      	add	r3, r1
 8000b00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b04:	e00a      	b.n	8000b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	4908      	ldr	r1, [pc, #32]	@ (8000b2c <__NVIC_SetPriority+0x50>)
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	f003 030f 	and.w	r3, r3, #15
 8000b12:	3b04      	subs	r3, #4
 8000b14:	0112      	lsls	r2, r2, #4
 8000b16:	b2d2      	uxtb	r2, r2
 8000b18:	440b      	add	r3, r1
 8000b1a:	761a      	strb	r2, [r3, #24]
}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	e000e100 	.word	0xe000e100
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b089      	sub	sp, #36	@ 0x24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	f003 0307 	and.w	r3, r3, #7
 8000b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b44:	69fb      	ldr	r3, [r7, #28]
 8000b46:	f1c3 0307 	rsb	r3, r3, #7
 8000b4a:	2b04      	cmp	r3, #4
 8000b4c:	bf28      	it	cs
 8000b4e:	2304      	movcs	r3, #4
 8000b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	3304      	adds	r3, #4
 8000b56:	2b06      	cmp	r3, #6
 8000b58:	d902      	bls.n	8000b60 <NVIC_EncodePriority+0x30>
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	3b03      	subs	r3, #3
 8000b5e:	e000      	b.n	8000b62 <NVIC_EncodePriority+0x32>
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b64:	f04f 32ff 	mov.w	r2, #4294967295
 8000b68:	69bb      	ldr	r3, [r7, #24]
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	43da      	mvns	r2, r3
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	401a      	ands	r2, r3
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b78:	f04f 31ff 	mov.w	r1, #4294967295
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b82:	43d9      	mvns	r1, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b88:	4313      	orrs	r3, r2
         );
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3724      	adds	r7, #36	@ 0x24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr

08000b96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b082      	sub	sp, #8
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f7ff ff4c 	bl	8000a3c <__NVIC_SetPriorityGrouping>
}
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]
 8000bb8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bbe:	f7ff ff61 	bl	8000a84 <__NVIC_GetPriorityGrouping>
 8000bc2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	68b9      	ldr	r1, [r7, #8]
 8000bc8:	6978      	ldr	r0, [r7, #20]
 8000bca:	f7ff ffb1 	bl	8000b30 <NVIC_EncodePriority>
 8000bce:	4602      	mov	r2, r0
 8000bd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bd4:	4611      	mov	r1, r2
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff ff80 	bl	8000adc <__NVIC_SetPriority>
}
 8000bdc:	bf00      	nop
 8000bde:	3718      	adds	r7, #24
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff ff54 	bl	8000aa0 <__NVIC_EnableIRQ>
}
 8000bf8:	bf00      	nop
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b089      	sub	sp, #36	@ 0x24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c12:	2300      	movs	r3, #0
 8000c14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
 8000c1a:	e177      	b.n	8000f0c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	fa02 f303 	lsl.w	r3, r2, r3
 8000c24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	697a      	ldr	r2, [r7, #20]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	f040 8166 	bne.w	8000f06 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f003 0303 	and.w	r3, r3, #3
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d005      	beq.n	8000c52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c4e:	2b02      	cmp	r3, #2
 8000c50:	d130      	bne.n	8000cb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	689b      	ldr	r3, [r3, #8]
 8000c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	2203      	movs	r2, #3
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	43db      	mvns	r3, r3
 8000c64:	69ba      	ldr	r2, [r7, #24]
 8000c66:	4013      	ands	r3, r2
 8000c68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	68da      	ldr	r2, [r3, #12]
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	69ba      	ldr	r2, [r7, #24]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	69ba      	ldr	r2, [r7, #24]
 8000c80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c88:	2201      	movs	r2, #1
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	43db      	mvns	r3, r3
 8000c92:	69ba      	ldr	r2, [r7, #24]
 8000c94:	4013      	ands	r3, r2
 8000c96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	091b      	lsrs	r3, r3, #4
 8000c9e:	f003 0201 	and.w	r2, r3, #1
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	69ba      	ldr	r2, [r7, #24]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	69ba      	ldr	r2, [r7, #24]
 8000cb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f003 0303 	and.w	r3, r3, #3
 8000cbc:	2b03      	cmp	r3, #3
 8000cbe:	d017      	beq.n	8000cf0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	2203      	movs	r2, #3
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	69ba      	ldr	r2, [r7, #24]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	689a      	ldr	r2, [r3, #8]
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f003 0303 	and.w	r3, r3, #3
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d123      	bne.n	8000d44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	08da      	lsrs	r2, r3, #3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	3208      	adds	r2, #8
 8000d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	f003 0307 	and.w	r3, r3, #7
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	220f      	movs	r2, #15
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	69ba      	ldr	r2, [r7, #24]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	691a      	ldr	r2, [r3, #16]
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	08da      	lsrs	r2, r3, #3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	3208      	adds	r2, #8
 8000d3e:	69b9      	ldr	r1, [r7, #24]
 8000d40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	2203      	movs	r2, #3
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	43db      	mvns	r3, r3
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f003 0203 	and.w	r2, r3, #3
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	f000 80c0 	beq.w	8000f06 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	4b66      	ldr	r3, [pc, #408]	@ (8000f24 <HAL_GPIO_Init+0x324>)
 8000d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d8e:	4a65      	ldr	r2, [pc, #404]	@ (8000f24 <HAL_GPIO_Init+0x324>)
 8000d90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d94:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d96:	4b63      	ldr	r3, [pc, #396]	@ (8000f24 <HAL_GPIO_Init+0x324>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000da2:	4a61      	ldr	r2, [pc, #388]	@ (8000f28 <HAL_GPIO_Init+0x328>)
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	089b      	lsrs	r3, r3, #2
 8000da8:	3302      	adds	r3, #2
 8000daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	f003 0303 	and.w	r3, r3, #3
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	220f      	movs	r2, #15
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a58      	ldr	r2, [pc, #352]	@ (8000f2c <HAL_GPIO_Init+0x32c>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d037      	beq.n	8000e3e <HAL_GPIO_Init+0x23e>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a57      	ldr	r2, [pc, #348]	@ (8000f30 <HAL_GPIO_Init+0x330>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d031      	beq.n	8000e3a <HAL_GPIO_Init+0x23a>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4a56      	ldr	r2, [pc, #344]	@ (8000f34 <HAL_GPIO_Init+0x334>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d02b      	beq.n	8000e36 <HAL_GPIO_Init+0x236>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a55      	ldr	r2, [pc, #340]	@ (8000f38 <HAL_GPIO_Init+0x338>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d025      	beq.n	8000e32 <HAL_GPIO_Init+0x232>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a54      	ldr	r2, [pc, #336]	@ (8000f3c <HAL_GPIO_Init+0x33c>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d01f      	beq.n	8000e2e <HAL_GPIO_Init+0x22e>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a53      	ldr	r2, [pc, #332]	@ (8000f40 <HAL_GPIO_Init+0x340>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d019      	beq.n	8000e2a <HAL_GPIO_Init+0x22a>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a52      	ldr	r2, [pc, #328]	@ (8000f44 <HAL_GPIO_Init+0x344>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d013      	beq.n	8000e26 <HAL_GPIO_Init+0x226>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a51      	ldr	r2, [pc, #324]	@ (8000f48 <HAL_GPIO_Init+0x348>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d00d      	beq.n	8000e22 <HAL_GPIO_Init+0x222>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a50      	ldr	r2, [pc, #320]	@ (8000f4c <HAL_GPIO_Init+0x34c>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d007      	beq.n	8000e1e <HAL_GPIO_Init+0x21e>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a4f      	ldr	r2, [pc, #316]	@ (8000f50 <HAL_GPIO_Init+0x350>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d101      	bne.n	8000e1a <HAL_GPIO_Init+0x21a>
 8000e16:	2309      	movs	r3, #9
 8000e18:	e012      	b.n	8000e40 <HAL_GPIO_Init+0x240>
 8000e1a:	230a      	movs	r3, #10
 8000e1c:	e010      	b.n	8000e40 <HAL_GPIO_Init+0x240>
 8000e1e:	2308      	movs	r3, #8
 8000e20:	e00e      	b.n	8000e40 <HAL_GPIO_Init+0x240>
 8000e22:	2307      	movs	r3, #7
 8000e24:	e00c      	b.n	8000e40 <HAL_GPIO_Init+0x240>
 8000e26:	2306      	movs	r3, #6
 8000e28:	e00a      	b.n	8000e40 <HAL_GPIO_Init+0x240>
 8000e2a:	2305      	movs	r3, #5
 8000e2c:	e008      	b.n	8000e40 <HAL_GPIO_Init+0x240>
 8000e2e:	2304      	movs	r3, #4
 8000e30:	e006      	b.n	8000e40 <HAL_GPIO_Init+0x240>
 8000e32:	2303      	movs	r3, #3
 8000e34:	e004      	b.n	8000e40 <HAL_GPIO_Init+0x240>
 8000e36:	2302      	movs	r3, #2
 8000e38:	e002      	b.n	8000e40 <HAL_GPIO_Init+0x240>
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e000      	b.n	8000e40 <HAL_GPIO_Init+0x240>
 8000e3e:	2300      	movs	r3, #0
 8000e40:	69fa      	ldr	r2, [r7, #28]
 8000e42:	f002 0203 	and.w	r2, r2, #3
 8000e46:	0092      	lsls	r2, r2, #2
 8000e48:	4093      	lsls	r3, r2
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e50:	4935      	ldr	r1, [pc, #212]	@ (8000f28 <HAL_GPIO_Init+0x328>)
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	089b      	lsrs	r3, r3, #2
 8000e56:	3302      	adds	r3, #2
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e5e:	4b3d      	ldr	r3, [pc, #244]	@ (8000f54 <HAL_GPIO_Init+0x354>)
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	43db      	mvns	r3, r3
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d003      	beq.n	8000e82 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e82:	4a34      	ldr	r2, [pc, #208]	@ (8000f54 <HAL_GPIO_Init+0x354>)
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e88:	4b32      	ldr	r3, [pc, #200]	@ (8000f54 <HAL_GPIO_Init+0x354>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	43db      	mvns	r3, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4013      	ands	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d003      	beq.n	8000eac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000eac:	4a29      	ldr	r2, [pc, #164]	@ (8000f54 <HAL_GPIO_Init+0x354>)
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000eb2:	4b28      	ldr	r3, [pc, #160]	@ (8000f54 <HAL_GPIO_Init+0x354>)
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d003      	beq.n	8000ed6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ed6:	4a1f      	ldr	r2, [pc, #124]	@ (8000f54 <HAL_GPIO_Init+0x354>)
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000edc:	4b1d      	ldr	r3, [pc, #116]	@ (8000f54 <HAL_GPIO_Init+0x354>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d003      	beq.n	8000f00 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f00:	4a14      	ldr	r2, [pc, #80]	@ (8000f54 <HAL_GPIO_Init+0x354>)
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	61fb      	str	r3, [r7, #28]
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	2b0f      	cmp	r3, #15
 8000f10:	f67f ae84 	bls.w	8000c1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f14:	bf00      	nop
 8000f16:	bf00      	nop
 8000f18:	3724      	adds	r7, #36	@ 0x24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	40023800 	.word	0x40023800
 8000f28:	40013800 	.word	0x40013800
 8000f2c:	40020000 	.word	0x40020000
 8000f30:	40020400 	.word	0x40020400
 8000f34:	40020800 	.word	0x40020800
 8000f38:	40020c00 	.word	0x40020c00
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	40021400 	.word	0x40021400
 8000f44:	40021800 	.word	0x40021800
 8000f48:	40021c00 	.word	0x40021c00
 8000f4c:	40022000 	.word	0x40022000
 8000f50:	40022400 	.word	0x40022400
 8000f54:	40013c00 	.word	0x40013c00

08000f58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	460b      	mov	r3, r1
 8000f62:	807b      	strh	r3, [r7, #2]
 8000f64:	4613      	mov	r3, r2
 8000f66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f68:	787b      	ldrb	r3, [r7, #1]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d003      	beq.n	8000f76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f6e:	887a      	ldrh	r2, [r7, #2]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f74:	e003      	b.n	8000f7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f76:	887b      	ldrh	r3, [r7, #2]
 8000f78:	041a      	lsls	r2, r3, #16
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	619a      	str	r2, [r3, #24]
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
	...

08000f8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d101      	bne.n	8000f9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e267      	b.n	800146e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d075      	beq.n	8001096 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000faa:	4b88      	ldr	r3, [pc, #544]	@ (80011cc <HAL_RCC_OscConfig+0x240>)
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	f003 030c 	and.w	r3, r3, #12
 8000fb2:	2b04      	cmp	r3, #4
 8000fb4:	d00c      	beq.n	8000fd0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fb6:	4b85      	ldr	r3, [pc, #532]	@ (80011cc <HAL_RCC_OscConfig+0x240>)
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000fbe:	2b08      	cmp	r3, #8
 8000fc0:	d112      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fc2:	4b82      	ldr	r3, [pc, #520]	@ (80011cc <HAL_RCC_OscConfig+0x240>)
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000fca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000fce:	d10b      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fd0:	4b7e      	ldr	r3, [pc, #504]	@ (80011cc <HAL_RCC_OscConfig+0x240>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d05b      	beq.n	8001094 <HAL_RCC_OscConfig+0x108>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d157      	bne.n	8001094 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e242      	b.n	800146e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ff0:	d106      	bne.n	8001000 <HAL_RCC_OscConfig+0x74>
 8000ff2:	4b76      	ldr	r3, [pc, #472]	@ (80011cc <HAL_RCC_OscConfig+0x240>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a75      	ldr	r2, [pc, #468]	@ (80011cc <HAL_RCC_OscConfig+0x240>)
 8000ff8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ffc:	6013      	str	r3, [r2, #0]
 8000ffe:	e01d      	b.n	800103c <HAL_RCC_OscConfig+0xb0>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001008:	d10c      	bne.n	8001024 <HAL_RCC_OscConfig+0x98>
 800100a:	4b70      	ldr	r3, [pc, #448]	@ (80011cc <HAL_RCC_OscConfig+0x240>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a6f      	ldr	r2, [pc, #444]	@ (80011cc <HAL_RCC_OscConfig+0x240>)
 8001010:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001014:	6013      	str	r3, [r2, #0]
 8001016:	4b6d      	ldr	r3, [pc, #436]	@ (80011cc <HAL_RCC_OscConfig+0x240>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a6c      	ldr	r2, [pc, #432]	@ (80011cc <HAL_RCC_OscConfig+0x240>)
 800101c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001020:	6013      	str	r3, [r2, #0]
 8001022:	e00b      	b.n	800103c <HAL_RCC_OscConfig+0xb0>
 8001024:	4b69      	ldr	r3, [pc, #420]	@ (80011cc <HAL_RCC_OscConfig+0x240>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a68      	ldr	r2, [pc, #416]	@ (80011cc <HAL_RCC_OscConfig+0x240>)
 800102a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800102e:	6013      	str	r3, [r2, #0]
 8001030:	4b66      	ldr	r3, [pc, #408]	@ (80011cc <HAL_RCC_OscConfig+0x240>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a65      	ldr	r2, [pc, #404]	@ (80011cc <HAL_RCC_OscConfig+0x240>)
 8001036:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800103a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d013      	beq.n	800106c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001044:	f7ff fcee 	bl	8000a24 <HAL_GetTick>
 8001048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800104a:	e008      	b.n	800105e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800104c:	f7ff fcea 	bl	8000a24 <HAL_GetTick>
 8001050:	4602      	mov	r2, r0
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	2b64      	cmp	r3, #100	@ 0x64
 8001058:	d901      	bls.n	800105e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800105a:	2303      	movs	r3, #3
 800105c:	e207      	b.n	800146e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800105e:	4b5b      	ldr	r3, [pc, #364]	@ (80011cc <HAL_RCC_OscConfig+0x240>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d0f0      	beq.n	800104c <HAL_RCC_OscConfig+0xc0>
 800106a:	e014      	b.n	8001096 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800106c:	f7ff fcda 	bl	8000a24 <HAL_GetTick>
 8001070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001072:	e008      	b.n	8001086 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001074:	f7ff fcd6 	bl	8000a24 <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	2b64      	cmp	r3, #100	@ 0x64
 8001080:	d901      	bls.n	8001086 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001082:	2303      	movs	r3, #3
 8001084:	e1f3      	b.n	800146e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001086:	4b51      	ldr	r3, [pc, #324]	@ (80011cc <HAL_RCC_OscConfig+0x240>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d1f0      	bne.n	8001074 <HAL_RCC_OscConfig+0xe8>
 8001092:	e000      	b.n	8001096 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d063      	beq.n	800116a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80010a2:	4b4a      	ldr	r3, [pc, #296]	@ (80011cc <HAL_RCC_OscConfig+0x240>)
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	f003 030c 	and.w	r3, r3, #12
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d00b      	beq.n	80010c6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010ae:	4b47      	ldr	r3, [pc, #284]	@ (80011cc <HAL_RCC_OscConfig+0x240>)
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80010b6:	2b08      	cmp	r3, #8
 80010b8:	d11c      	bne.n	80010f4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010ba:	4b44      	ldr	r3, [pc, #272]	@ (80011cc <HAL_RCC_OscConfig+0x240>)
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d116      	bne.n	80010f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010c6:	4b41      	ldr	r3, [pc, #260]	@ (80011cc <HAL_RCC_OscConfig+0x240>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 0302 	and.w	r3, r3, #2
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d005      	beq.n	80010de <HAL_RCC_OscConfig+0x152>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	68db      	ldr	r3, [r3, #12]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d001      	beq.n	80010de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e1c7      	b.n	800146e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010de:	4b3b      	ldr	r3, [pc, #236]	@ (80011cc <HAL_RCC_OscConfig+0x240>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	691b      	ldr	r3, [r3, #16]
 80010ea:	00db      	lsls	r3, r3, #3
 80010ec:	4937      	ldr	r1, [pc, #220]	@ (80011cc <HAL_RCC_OscConfig+0x240>)
 80010ee:	4313      	orrs	r3, r2
 80010f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010f2:	e03a      	b.n	800116a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d020      	beq.n	800113e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010fc:	4b34      	ldr	r3, [pc, #208]	@ (80011d0 <HAL_RCC_OscConfig+0x244>)
 80010fe:	2201      	movs	r2, #1
 8001100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001102:	f7ff fc8f 	bl	8000a24 <HAL_GetTick>
 8001106:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001108:	e008      	b.n	800111c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800110a:	f7ff fc8b 	bl	8000a24 <HAL_GetTick>
 800110e:	4602      	mov	r2, r0
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	2b02      	cmp	r3, #2
 8001116:	d901      	bls.n	800111c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001118:	2303      	movs	r3, #3
 800111a:	e1a8      	b.n	800146e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800111c:	4b2b      	ldr	r3, [pc, #172]	@ (80011cc <HAL_RCC_OscConfig+0x240>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 0302 	and.w	r3, r3, #2
 8001124:	2b00      	cmp	r3, #0
 8001126:	d0f0      	beq.n	800110a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001128:	4b28      	ldr	r3, [pc, #160]	@ (80011cc <HAL_RCC_OscConfig+0x240>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	691b      	ldr	r3, [r3, #16]
 8001134:	00db      	lsls	r3, r3, #3
 8001136:	4925      	ldr	r1, [pc, #148]	@ (80011cc <HAL_RCC_OscConfig+0x240>)
 8001138:	4313      	orrs	r3, r2
 800113a:	600b      	str	r3, [r1, #0]
 800113c:	e015      	b.n	800116a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800113e:	4b24      	ldr	r3, [pc, #144]	@ (80011d0 <HAL_RCC_OscConfig+0x244>)
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001144:	f7ff fc6e 	bl	8000a24 <HAL_GetTick>
 8001148:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800114a:	e008      	b.n	800115e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800114c:	f7ff fc6a 	bl	8000a24 <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	2b02      	cmp	r3, #2
 8001158:	d901      	bls.n	800115e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800115a:	2303      	movs	r3, #3
 800115c:	e187      	b.n	800146e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800115e:	4b1b      	ldr	r3, [pc, #108]	@ (80011cc <HAL_RCC_OscConfig+0x240>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	2b00      	cmp	r3, #0
 8001168:	d1f0      	bne.n	800114c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0308 	and.w	r3, r3, #8
 8001172:	2b00      	cmp	r3, #0
 8001174:	d036      	beq.n	80011e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d016      	beq.n	80011ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800117e:	4b15      	ldr	r3, [pc, #84]	@ (80011d4 <HAL_RCC_OscConfig+0x248>)
 8001180:	2201      	movs	r2, #1
 8001182:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001184:	f7ff fc4e 	bl	8000a24 <HAL_GetTick>
 8001188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800118a:	e008      	b.n	800119e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800118c:	f7ff fc4a 	bl	8000a24 <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b02      	cmp	r3, #2
 8001198:	d901      	bls.n	800119e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e167      	b.n	800146e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800119e:	4b0b      	ldr	r3, [pc, #44]	@ (80011cc <HAL_RCC_OscConfig+0x240>)
 80011a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d0f0      	beq.n	800118c <HAL_RCC_OscConfig+0x200>
 80011aa:	e01b      	b.n	80011e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011ac:	4b09      	ldr	r3, [pc, #36]	@ (80011d4 <HAL_RCC_OscConfig+0x248>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011b2:	f7ff fc37 	bl	8000a24 <HAL_GetTick>
 80011b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011b8:	e00e      	b.n	80011d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011ba:	f7ff fc33 	bl	8000a24 <HAL_GetTick>
 80011be:	4602      	mov	r2, r0
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d907      	bls.n	80011d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80011c8:	2303      	movs	r3, #3
 80011ca:	e150      	b.n	800146e <HAL_RCC_OscConfig+0x4e2>
 80011cc:	40023800 	.word	0x40023800
 80011d0:	42470000 	.word	0x42470000
 80011d4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011d8:	4b88      	ldr	r3, [pc, #544]	@ (80013fc <HAL_RCC_OscConfig+0x470>)
 80011da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80011dc:	f003 0302 	and.w	r3, r3, #2
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d1ea      	bne.n	80011ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 0304 	and.w	r3, r3, #4
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	f000 8097 	beq.w	8001320 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011f2:	2300      	movs	r3, #0
 80011f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011f6:	4b81      	ldr	r3, [pc, #516]	@ (80013fc <HAL_RCC_OscConfig+0x470>)
 80011f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d10f      	bne.n	8001222 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	4b7d      	ldr	r3, [pc, #500]	@ (80013fc <HAL_RCC_OscConfig+0x470>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120a:	4a7c      	ldr	r2, [pc, #496]	@ (80013fc <HAL_RCC_OscConfig+0x470>)
 800120c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001210:	6413      	str	r3, [r2, #64]	@ 0x40
 8001212:	4b7a      	ldr	r3, [pc, #488]	@ (80013fc <HAL_RCC_OscConfig+0x470>)
 8001214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001216:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800121e:	2301      	movs	r3, #1
 8001220:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001222:	4b77      	ldr	r3, [pc, #476]	@ (8001400 <HAL_RCC_OscConfig+0x474>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800122a:	2b00      	cmp	r3, #0
 800122c:	d118      	bne.n	8001260 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800122e:	4b74      	ldr	r3, [pc, #464]	@ (8001400 <HAL_RCC_OscConfig+0x474>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a73      	ldr	r2, [pc, #460]	@ (8001400 <HAL_RCC_OscConfig+0x474>)
 8001234:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001238:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800123a:	f7ff fbf3 	bl	8000a24 <HAL_GetTick>
 800123e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001240:	e008      	b.n	8001254 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001242:	f7ff fbef 	bl	8000a24 <HAL_GetTick>
 8001246:	4602      	mov	r2, r0
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	2b02      	cmp	r3, #2
 800124e:	d901      	bls.n	8001254 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e10c      	b.n	800146e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001254:	4b6a      	ldr	r3, [pc, #424]	@ (8001400 <HAL_RCC_OscConfig+0x474>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800125c:	2b00      	cmp	r3, #0
 800125e:	d0f0      	beq.n	8001242 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d106      	bne.n	8001276 <HAL_RCC_OscConfig+0x2ea>
 8001268:	4b64      	ldr	r3, [pc, #400]	@ (80013fc <HAL_RCC_OscConfig+0x470>)
 800126a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800126c:	4a63      	ldr	r2, [pc, #396]	@ (80013fc <HAL_RCC_OscConfig+0x470>)
 800126e:	f043 0301 	orr.w	r3, r3, #1
 8001272:	6713      	str	r3, [r2, #112]	@ 0x70
 8001274:	e01c      	b.n	80012b0 <HAL_RCC_OscConfig+0x324>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	2b05      	cmp	r3, #5
 800127c:	d10c      	bne.n	8001298 <HAL_RCC_OscConfig+0x30c>
 800127e:	4b5f      	ldr	r3, [pc, #380]	@ (80013fc <HAL_RCC_OscConfig+0x470>)
 8001280:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001282:	4a5e      	ldr	r2, [pc, #376]	@ (80013fc <HAL_RCC_OscConfig+0x470>)
 8001284:	f043 0304 	orr.w	r3, r3, #4
 8001288:	6713      	str	r3, [r2, #112]	@ 0x70
 800128a:	4b5c      	ldr	r3, [pc, #368]	@ (80013fc <HAL_RCC_OscConfig+0x470>)
 800128c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800128e:	4a5b      	ldr	r2, [pc, #364]	@ (80013fc <HAL_RCC_OscConfig+0x470>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	6713      	str	r3, [r2, #112]	@ 0x70
 8001296:	e00b      	b.n	80012b0 <HAL_RCC_OscConfig+0x324>
 8001298:	4b58      	ldr	r3, [pc, #352]	@ (80013fc <HAL_RCC_OscConfig+0x470>)
 800129a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800129c:	4a57      	ldr	r2, [pc, #348]	@ (80013fc <HAL_RCC_OscConfig+0x470>)
 800129e:	f023 0301 	bic.w	r3, r3, #1
 80012a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80012a4:	4b55      	ldr	r3, [pc, #340]	@ (80013fc <HAL_RCC_OscConfig+0x470>)
 80012a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012a8:	4a54      	ldr	r2, [pc, #336]	@ (80013fc <HAL_RCC_OscConfig+0x470>)
 80012aa:	f023 0304 	bic.w	r3, r3, #4
 80012ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d015      	beq.n	80012e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012b8:	f7ff fbb4 	bl	8000a24 <HAL_GetTick>
 80012bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012be:	e00a      	b.n	80012d6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012c0:	f7ff fbb0 	bl	8000a24 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e0cb      	b.n	800146e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012d6:	4b49      	ldr	r3, [pc, #292]	@ (80013fc <HAL_RCC_OscConfig+0x470>)
 80012d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d0ee      	beq.n	80012c0 <HAL_RCC_OscConfig+0x334>
 80012e2:	e014      	b.n	800130e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012e4:	f7ff fb9e 	bl	8000a24 <HAL_GetTick>
 80012e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012ea:	e00a      	b.n	8001302 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ec:	f7ff fb9a 	bl	8000a24 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e0b5      	b.n	800146e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001302:	4b3e      	ldr	r3, [pc, #248]	@ (80013fc <HAL_RCC_OscConfig+0x470>)
 8001304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1ee      	bne.n	80012ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800130e:	7dfb      	ldrb	r3, [r7, #23]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d105      	bne.n	8001320 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001314:	4b39      	ldr	r3, [pc, #228]	@ (80013fc <HAL_RCC_OscConfig+0x470>)
 8001316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001318:	4a38      	ldr	r2, [pc, #224]	@ (80013fc <HAL_RCC_OscConfig+0x470>)
 800131a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800131e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	2b00      	cmp	r3, #0
 8001326:	f000 80a1 	beq.w	800146c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800132a:	4b34      	ldr	r3, [pc, #208]	@ (80013fc <HAL_RCC_OscConfig+0x470>)
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f003 030c 	and.w	r3, r3, #12
 8001332:	2b08      	cmp	r3, #8
 8001334:	d05c      	beq.n	80013f0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	2b02      	cmp	r3, #2
 800133c:	d141      	bne.n	80013c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800133e:	4b31      	ldr	r3, [pc, #196]	@ (8001404 <HAL_RCC_OscConfig+0x478>)
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001344:	f7ff fb6e 	bl	8000a24 <HAL_GetTick>
 8001348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800134a:	e008      	b.n	800135e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800134c:	f7ff fb6a 	bl	8000a24 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b02      	cmp	r3, #2
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e087      	b.n	800146e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800135e:	4b27      	ldr	r3, [pc, #156]	@ (80013fc <HAL_RCC_OscConfig+0x470>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1f0      	bne.n	800134c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	69da      	ldr	r2, [r3, #28]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a1b      	ldr	r3, [r3, #32]
 8001372:	431a      	orrs	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001378:	019b      	lsls	r3, r3, #6
 800137a:	431a      	orrs	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001380:	085b      	lsrs	r3, r3, #1
 8001382:	3b01      	subs	r3, #1
 8001384:	041b      	lsls	r3, r3, #16
 8001386:	431a      	orrs	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800138c:	061b      	lsls	r3, r3, #24
 800138e:	491b      	ldr	r1, [pc, #108]	@ (80013fc <HAL_RCC_OscConfig+0x470>)
 8001390:	4313      	orrs	r3, r2
 8001392:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001394:	4b1b      	ldr	r3, [pc, #108]	@ (8001404 <HAL_RCC_OscConfig+0x478>)
 8001396:	2201      	movs	r2, #1
 8001398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139a:	f7ff fb43 	bl	8000a24 <HAL_GetTick>
 800139e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013a0:	e008      	b.n	80013b4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013a2:	f7ff fb3f 	bl	8000a24 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d901      	bls.n	80013b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e05c      	b.n	800146e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013b4:	4b11      	ldr	r3, [pc, #68]	@ (80013fc <HAL_RCC_OscConfig+0x470>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d0f0      	beq.n	80013a2 <HAL_RCC_OscConfig+0x416>
 80013c0:	e054      	b.n	800146c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013c2:	4b10      	ldr	r3, [pc, #64]	@ (8001404 <HAL_RCC_OscConfig+0x478>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c8:	f7ff fb2c 	bl	8000a24 <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013d0:	f7ff fb28 	bl	8000a24 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e045      	b.n	800146e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013e2:	4b06      	ldr	r3, [pc, #24]	@ (80013fc <HAL_RCC_OscConfig+0x470>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1f0      	bne.n	80013d0 <HAL_RCC_OscConfig+0x444>
 80013ee:	e03d      	b.n	800146c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d107      	bne.n	8001408 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e038      	b.n	800146e <HAL_RCC_OscConfig+0x4e2>
 80013fc:	40023800 	.word	0x40023800
 8001400:	40007000 	.word	0x40007000
 8001404:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001408:	4b1b      	ldr	r3, [pc, #108]	@ (8001478 <HAL_RCC_OscConfig+0x4ec>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d028      	beq.n	8001468 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001420:	429a      	cmp	r2, r3
 8001422:	d121      	bne.n	8001468 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800142e:	429a      	cmp	r2, r3
 8001430:	d11a      	bne.n	8001468 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001438:	4013      	ands	r3, r2
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800143e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001440:	4293      	cmp	r3, r2
 8001442:	d111      	bne.n	8001468 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800144e:	085b      	lsrs	r3, r3, #1
 8001450:	3b01      	subs	r3, #1
 8001452:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001454:	429a      	cmp	r2, r3
 8001456:	d107      	bne.n	8001468 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001462:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001464:	429a      	cmp	r2, r3
 8001466:	d001      	beq.n	800146c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e000      	b.n	800146e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40023800 	.word	0x40023800

0800147c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d101      	bne.n	8001490 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e0cc      	b.n	800162a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001490:	4b68      	ldr	r3, [pc, #416]	@ (8001634 <HAL_RCC_ClockConfig+0x1b8>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 030f 	and.w	r3, r3, #15
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	429a      	cmp	r2, r3
 800149c:	d90c      	bls.n	80014b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800149e:	4b65      	ldr	r3, [pc, #404]	@ (8001634 <HAL_RCC_ClockConfig+0x1b8>)
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	b2d2      	uxtb	r2, r2
 80014a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014a6:	4b63      	ldr	r3, [pc, #396]	@ (8001634 <HAL_RCC_ClockConfig+0x1b8>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 030f 	and.w	r3, r3, #15
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d001      	beq.n	80014b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e0b8      	b.n	800162a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d020      	beq.n	8001506 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0304 	and.w	r3, r3, #4
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d005      	beq.n	80014dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014d0:	4b59      	ldr	r3, [pc, #356]	@ (8001638 <HAL_RCC_ClockConfig+0x1bc>)
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	4a58      	ldr	r2, [pc, #352]	@ (8001638 <HAL_RCC_ClockConfig+0x1bc>)
 80014d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80014da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0308 	and.w	r3, r3, #8
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d005      	beq.n	80014f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014e8:	4b53      	ldr	r3, [pc, #332]	@ (8001638 <HAL_RCC_ClockConfig+0x1bc>)
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	4a52      	ldr	r2, [pc, #328]	@ (8001638 <HAL_RCC_ClockConfig+0x1bc>)
 80014ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80014f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014f4:	4b50      	ldr	r3, [pc, #320]	@ (8001638 <HAL_RCC_ClockConfig+0x1bc>)
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	494d      	ldr	r1, [pc, #308]	@ (8001638 <HAL_RCC_ClockConfig+0x1bc>)
 8001502:	4313      	orrs	r3, r2
 8001504:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	2b00      	cmp	r3, #0
 8001510:	d044      	beq.n	800159c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d107      	bne.n	800152a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151a:	4b47      	ldr	r3, [pc, #284]	@ (8001638 <HAL_RCC_ClockConfig+0x1bc>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d119      	bne.n	800155a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e07f      	b.n	800162a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	2b02      	cmp	r3, #2
 8001530:	d003      	beq.n	800153a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001536:	2b03      	cmp	r3, #3
 8001538:	d107      	bne.n	800154a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800153a:	4b3f      	ldr	r3, [pc, #252]	@ (8001638 <HAL_RCC_ClockConfig+0x1bc>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d109      	bne.n	800155a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e06f      	b.n	800162a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800154a:	4b3b      	ldr	r3, [pc, #236]	@ (8001638 <HAL_RCC_ClockConfig+0x1bc>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d101      	bne.n	800155a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e067      	b.n	800162a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800155a:	4b37      	ldr	r3, [pc, #220]	@ (8001638 <HAL_RCC_ClockConfig+0x1bc>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f023 0203 	bic.w	r2, r3, #3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	4934      	ldr	r1, [pc, #208]	@ (8001638 <HAL_RCC_ClockConfig+0x1bc>)
 8001568:	4313      	orrs	r3, r2
 800156a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800156c:	f7ff fa5a 	bl	8000a24 <HAL_GetTick>
 8001570:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001572:	e00a      	b.n	800158a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001574:	f7ff fa56 	bl	8000a24 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001582:	4293      	cmp	r3, r2
 8001584:	d901      	bls.n	800158a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e04f      	b.n	800162a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800158a:	4b2b      	ldr	r3, [pc, #172]	@ (8001638 <HAL_RCC_ClockConfig+0x1bc>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f003 020c 	and.w	r2, r3, #12
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	429a      	cmp	r2, r3
 800159a:	d1eb      	bne.n	8001574 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800159c:	4b25      	ldr	r3, [pc, #148]	@ (8001634 <HAL_RCC_ClockConfig+0x1b8>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 030f 	and.w	r3, r3, #15
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d20c      	bcs.n	80015c4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015aa:	4b22      	ldr	r3, [pc, #136]	@ (8001634 <HAL_RCC_ClockConfig+0x1b8>)
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	b2d2      	uxtb	r2, r2
 80015b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015b2:	4b20      	ldr	r3, [pc, #128]	@ (8001634 <HAL_RCC_ClockConfig+0x1b8>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 030f 	and.w	r3, r3, #15
 80015ba:	683a      	ldr	r2, [r7, #0]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d001      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e032      	b.n	800162a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0304 	and.w	r3, r3, #4
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d008      	beq.n	80015e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015d0:	4b19      	ldr	r3, [pc, #100]	@ (8001638 <HAL_RCC_ClockConfig+0x1bc>)
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	4916      	ldr	r1, [pc, #88]	@ (8001638 <HAL_RCC_ClockConfig+0x1bc>)
 80015de:	4313      	orrs	r3, r2
 80015e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0308 	and.w	r3, r3, #8
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d009      	beq.n	8001602 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015ee:	4b12      	ldr	r3, [pc, #72]	@ (8001638 <HAL_RCC_ClockConfig+0x1bc>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	691b      	ldr	r3, [r3, #16]
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	490e      	ldr	r1, [pc, #56]	@ (8001638 <HAL_RCC_ClockConfig+0x1bc>)
 80015fe:	4313      	orrs	r3, r2
 8001600:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001602:	f000 f821 	bl	8001648 <HAL_RCC_GetSysClockFreq>
 8001606:	4602      	mov	r2, r0
 8001608:	4b0b      	ldr	r3, [pc, #44]	@ (8001638 <HAL_RCC_ClockConfig+0x1bc>)
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	091b      	lsrs	r3, r3, #4
 800160e:	f003 030f 	and.w	r3, r3, #15
 8001612:	490a      	ldr	r1, [pc, #40]	@ (800163c <HAL_RCC_ClockConfig+0x1c0>)
 8001614:	5ccb      	ldrb	r3, [r1, r3]
 8001616:	fa22 f303 	lsr.w	r3, r2, r3
 800161a:	4a09      	ldr	r2, [pc, #36]	@ (8001640 <HAL_RCC_ClockConfig+0x1c4>)
 800161c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800161e:	4b09      	ldr	r3, [pc, #36]	@ (8001644 <HAL_RCC_ClockConfig+0x1c8>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff f8f4 	bl	8000810 <HAL_InitTick>

  return HAL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40023c00 	.word	0x40023c00
 8001638:	40023800 	.word	0x40023800
 800163c:	080057fc 	.word	0x080057fc
 8001640:	20000000 	.word	0x20000000
 8001644:	20000004 	.word	0x20000004

08001648 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001648:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800164c:	b090      	sub	sp, #64	@ 0x40
 800164e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001650:	2300      	movs	r3, #0
 8001652:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001654:	2300      	movs	r3, #0
 8001656:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001658:	2300      	movs	r3, #0
 800165a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800165c:	2300      	movs	r3, #0
 800165e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001660:	4b59      	ldr	r3, [pc, #356]	@ (80017c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f003 030c 	and.w	r3, r3, #12
 8001668:	2b08      	cmp	r3, #8
 800166a:	d00d      	beq.n	8001688 <HAL_RCC_GetSysClockFreq+0x40>
 800166c:	2b08      	cmp	r3, #8
 800166e:	f200 80a1 	bhi.w	80017b4 <HAL_RCC_GetSysClockFreq+0x16c>
 8001672:	2b00      	cmp	r3, #0
 8001674:	d002      	beq.n	800167c <HAL_RCC_GetSysClockFreq+0x34>
 8001676:	2b04      	cmp	r3, #4
 8001678:	d003      	beq.n	8001682 <HAL_RCC_GetSysClockFreq+0x3a>
 800167a:	e09b      	b.n	80017b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800167c:	4b53      	ldr	r3, [pc, #332]	@ (80017cc <HAL_RCC_GetSysClockFreq+0x184>)
 800167e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001680:	e09b      	b.n	80017ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001682:	4b53      	ldr	r3, [pc, #332]	@ (80017d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001684:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001686:	e098      	b.n	80017ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001688:	4b4f      	ldr	r3, [pc, #316]	@ (80017c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001690:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001692:	4b4d      	ldr	r3, [pc, #308]	@ (80017c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d028      	beq.n	80016f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800169e:	4b4a      	ldr	r3, [pc, #296]	@ (80017c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	099b      	lsrs	r3, r3, #6
 80016a4:	2200      	movs	r2, #0
 80016a6:	623b      	str	r3, [r7, #32]
 80016a8:	627a      	str	r2, [r7, #36]	@ 0x24
 80016aa:	6a3b      	ldr	r3, [r7, #32]
 80016ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80016b0:	2100      	movs	r1, #0
 80016b2:	4b47      	ldr	r3, [pc, #284]	@ (80017d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80016b4:	fb03 f201 	mul.w	r2, r3, r1
 80016b8:	2300      	movs	r3, #0
 80016ba:	fb00 f303 	mul.w	r3, r0, r3
 80016be:	4413      	add	r3, r2
 80016c0:	4a43      	ldr	r2, [pc, #268]	@ (80017d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80016c2:	fba0 1202 	umull	r1, r2, r0, r2
 80016c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80016c8:	460a      	mov	r2, r1
 80016ca:	62ba      	str	r2, [r7, #40]	@ 0x28
 80016cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016ce:	4413      	add	r3, r2
 80016d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016d4:	2200      	movs	r2, #0
 80016d6:	61bb      	str	r3, [r7, #24]
 80016d8:	61fa      	str	r2, [r7, #28]
 80016da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80016e2:	f7fe fd85 	bl	80001f0 <__aeabi_uldivmod>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	4613      	mov	r3, r2
 80016ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80016ee:	e053      	b.n	8001798 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016f0:	4b35      	ldr	r3, [pc, #212]	@ (80017c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	099b      	lsrs	r3, r3, #6
 80016f6:	2200      	movs	r2, #0
 80016f8:	613b      	str	r3, [r7, #16]
 80016fa:	617a      	str	r2, [r7, #20]
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001702:	f04f 0b00 	mov.w	fp, #0
 8001706:	4652      	mov	r2, sl
 8001708:	465b      	mov	r3, fp
 800170a:	f04f 0000 	mov.w	r0, #0
 800170e:	f04f 0100 	mov.w	r1, #0
 8001712:	0159      	lsls	r1, r3, #5
 8001714:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001718:	0150      	lsls	r0, r2, #5
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	ebb2 080a 	subs.w	r8, r2, sl
 8001722:	eb63 090b 	sbc.w	r9, r3, fp
 8001726:	f04f 0200 	mov.w	r2, #0
 800172a:	f04f 0300 	mov.w	r3, #0
 800172e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001732:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001736:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800173a:	ebb2 0408 	subs.w	r4, r2, r8
 800173e:	eb63 0509 	sbc.w	r5, r3, r9
 8001742:	f04f 0200 	mov.w	r2, #0
 8001746:	f04f 0300 	mov.w	r3, #0
 800174a:	00eb      	lsls	r3, r5, #3
 800174c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001750:	00e2      	lsls	r2, r4, #3
 8001752:	4614      	mov	r4, r2
 8001754:	461d      	mov	r5, r3
 8001756:	eb14 030a 	adds.w	r3, r4, sl
 800175a:	603b      	str	r3, [r7, #0]
 800175c:	eb45 030b 	adc.w	r3, r5, fp
 8001760:	607b      	str	r3, [r7, #4]
 8001762:	f04f 0200 	mov.w	r2, #0
 8001766:	f04f 0300 	mov.w	r3, #0
 800176a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800176e:	4629      	mov	r1, r5
 8001770:	028b      	lsls	r3, r1, #10
 8001772:	4621      	mov	r1, r4
 8001774:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001778:	4621      	mov	r1, r4
 800177a:	028a      	lsls	r2, r1, #10
 800177c:	4610      	mov	r0, r2
 800177e:	4619      	mov	r1, r3
 8001780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001782:	2200      	movs	r2, #0
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	60fa      	str	r2, [r7, #12]
 8001788:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800178c:	f7fe fd30 	bl	80001f0 <__aeabi_uldivmod>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4613      	mov	r3, r2
 8001796:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001798:	4b0b      	ldr	r3, [pc, #44]	@ (80017c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	0c1b      	lsrs	r3, r3, #16
 800179e:	f003 0303 	and.w	r3, r3, #3
 80017a2:	3301      	adds	r3, #1
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80017a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80017aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80017b2:	e002      	b.n	80017ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017b4:	4b05      	ldr	r3, [pc, #20]	@ (80017cc <HAL_RCC_GetSysClockFreq+0x184>)
 80017b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80017b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3740      	adds	r7, #64	@ 0x40
 80017c0:	46bd      	mov	sp, r7
 80017c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017c6:	bf00      	nop
 80017c8:	40023800 	.word	0x40023800
 80017cc:	00f42400 	.word	0x00f42400
 80017d0:	017d7840 	.word	0x017d7840

080017d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017d8:	4b03      	ldr	r3, [pc, #12]	@ (80017e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80017da:	681b      	ldr	r3, [r3, #0]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	20000000 	.word	0x20000000

080017ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80017f0:	f7ff fff0 	bl	80017d4 <HAL_RCC_GetHCLKFreq>
 80017f4:	4602      	mov	r2, r0
 80017f6:	4b05      	ldr	r3, [pc, #20]	@ (800180c <HAL_RCC_GetPCLK2Freq+0x20>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	0b5b      	lsrs	r3, r3, #13
 80017fc:	f003 0307 	and.w	r3, r3, #7
 8001800:	4903      	ldr	r1, [pc, #12]	@ (8001810 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001802:	5ccb      	ldrb	r3, [r1, r3]
 8001804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001808:	4618      	mov	r0, r3
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40023800 	.word	0x40023800
 8001810:	0800580c 	.word	0x0800580c

08001814 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	220f      	movs	r2, #15
 8001822:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001824:	4b12      	ldr	r3, [pc, #72]	@ (8001870 <HAL_RCC_GetClockConfig+0x5c>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f003 0203 	and.w	r2, r3, #3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001830:	4b0f      	ldr	r3, [pc, #60]	@ (8001870 <HAL_RCC_GetClockConfig+0x5c>)
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800183c:	4b0c      	ldr	r3, [pc, #48]	@ (8001870 <HAL_RCC_GetClockConfig+0x5c>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001848:	4b09      	ldr	r3, [pc, #36]	@ (8001870 <HAL_RCC_GetClockConfig+0x5c>)
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	08db      	lsrs	r3, r3, #3
 800184e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001856:	4b07      	ldr	r3, [pc, #28]	@ (8001874 <HAL_RCC_GetClockConfig+0x60>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 020f 	and.w	r2, r3, #15
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	601a      	str	r2, [r3, #0]
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	40023800 	.word	0x40023800
 8001874:	40023c00 	.word	0x40023c00

08001878 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e041      	b.n	800190e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b00      	cmp	r3, #0
 8001894:	d106      	bne.n	80018a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f000 f839 	bl	8001916 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2202      	movs	r2, #2
 80018a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3304      	adds	r3, #4
 80018b4:	4619      	mov	r1, r3
 80018b6:	4610      	mov	r0, r2
 80018b8:	f000 f9c0 	bl	8001c3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2201      	movs	r2, #1
 80018c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2201      	movs	r2, #1
 80018c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2201      	movs	r2, #1
 80018d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2201      	movs	r2, #1
 80018d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2201      	movs	r2, #1
 80018e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2201      	movs	r2, #1
 80018e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2201      	movs	r2, #1
 80018f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2201      	movs	r2, #1
 80018f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
	...

0800192c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800193a:	b2db      	uxtb	r3, r3
 800193c:	2b01      	cmp	r3, #1
 800193e:	d001      	beq.n	8001944 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e04e      	b.n	80019e2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2202      	movs	r2, #2
 8001948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	68da      	ldr	r2, [r3, #12]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f042 0201 	orr.w	r2, r2, #1
 800195a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a23      	ldr	r2, [pc, #140]	@ (80019f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d022      	beq.n	80019ac <HAL_TIM_Base_Start_IT+0x80>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800196e:	d01d      	beq.n	80019ac <HAL_TIM_Base_Start_IT+0x80>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a1f      	ldr	r2, [pc, #124]	@ (80019f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d018      	beq.n	80019ac <HAL_TIM_Base_Start_IT+0x80>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a1e      	ldr	r2, [pc, #120]	@ (80019f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d013      	beq.n	80019ac <HAL_TIM_Base_Start_IT+0x80>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a1c      	ldr	r2, [pc, #112]	@ (80019fc <HAL_TIM_Base_Start_IT+0xd0>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d00e      	beq.n	80019ac <HAL_TIM_Base_Start_IT+0x80>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a1b      	ldr	r2, [pc, #108]	@ (8001a00 <HAL_TIM_Base_Start_IT+0xd4>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d009      	beq.n	80019ac <HAL_TIM_Base_Start_IT+0x80>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a19      	ldr	r2, [pc, #100]	@ (8001a04 <HAL_TIM_Base_Start_IT+0xd8>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d004      	beq.n	80019ac <HAL_TIM_Base_Start_IT+0x80>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a18      	ldr	r2, [pc, #96]	@ (8001a08 <HAL_TIM_Base_Start_IT+0xdc>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d111      	bne.n	80019d0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2b06      	cmp	r3, #6
 80019bc:	d010      	beq.n	80019e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f042 0201 	orr.w	r2, r2, #1
 80019cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019ce:	e007      	b.n	80019e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f042 0201 	orr.w	r2, r2, #1
 80019de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3714      	adds	r7, #20
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	40010000 	.word	0x40010000
 80019f4:	40000400 	.word	0x40000400
 80019f8:	40000800 	.word	0x40000800
 80019fc:	40000c00 	.word	0x40000c00
 8001a00:	40010400 	.word	0x40010400
 8001a04:	40014000 	.word	0x40014000
 8001a08:	40001800 	.word	0x40001800

08001a0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d020      	beq.n	8001a70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d01b      	beq.n	8001a70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f06f 0202 	mvn.w	r2, #2
 8001a40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2201      	movs	r2, #1
 8001a46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	f003 0303 	and.w	r3, r3, #3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d003      	beq.n	8001a5e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 f8d2 	bl	8001c00 <HAL_TIM_IC_CaptureCallback>
 8001a5c:	e005      	b.n	8001a6a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f000 f8c4 	bl	8001bec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f000 f8d5 	bl	8001c14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	f003 0304 	and.w	r3, r3, #4
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d020      	beq.n	8001abc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d01b      	beq.n	8001abc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f06f 0204 	mvn.w	r2, #4
 8001a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2202      	movs	r2, #2
 8001a92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 f8ac 	bl	8001c00 <HAL_TIM_IC_CaptureCallback>
 8001aa8:	e005      	b.n	8001ab6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 f89e 	bl	8001bec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 f8af 	bl	8001c14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	f003 0308 	and.w	r3, r3, #8
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d020      	beq.n	8001b08 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f003 0308 	and.w	r3, r3, #8
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d01b      	beq.n	8001b08 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f06f 0208 	mvn.w	r2, #8
 8001ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2204      	movs	r2, #4
 8001ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	f003 0303 	and.w	r3, r3, #3
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 f886 	bl	8001c00 <HAL_TIM_IC_CaptureCallback>
 8001af4:	e005      	b.n	8001b02 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f000 f878 	bl	8001bec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f000 f889 	bl	8001c14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	f003 0310 	and.w	r3, r3, #16
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d020      	beq.n	8001b54 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f003 0310 	and.w	r3, r3, #16
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d01b      	beq.n	8001b54 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f06f 0210 	mvn.w	r2, #16
 8001b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2208      	movs	r2, #8
 8001b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 f860 	bl	8001c00 <HAL_TIM_IC_CaptureCallback>
 8001b40:	e005      	b.n	8001b4e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 f852 	bl	8001bec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 f863 	bl	8001c14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d00c      	beq.n	8001b78 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d007      	beq.n	8001b78 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f06f 0201 	mvn.w	r2, #1
 8001b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7fe fe08 	bl	8000788 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d00c      	beq.n	8001b9c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d007      	beq.n	8001b9c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001b94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f000 f906 	bl	8001da8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d00c      	beq.n	8001bc0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d007      	beq.n	8001bc0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 f834 	bl	8001c28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	f003 0320 	and.w	r3, r3, #32
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d00c      	beq.n	8001be4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f003 0320 	and.w	r3, r3, #32
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d007      	beq.n	8001be4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f06f 0220 	mvn.w	r2, #32
 8001bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 f8d8 	bl	8001d94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001be4:	bf00      	nop
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4a46      	ldr	r2, [pc, #280]	@ (8001d68 <TIM_Base_SetConfig+0x12c>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d013      	beq.n	8001c7c <TIM_Base_SetConfig+0x40>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c5a:	d00f      	beq.n	8001c7c <TIM_Base_SetConfig+0x40>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4a43      	ldr	r2, [pc, #268]	@ (8001d6c <TIM_Base_SetConfig+0x130>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d00b      	beq.n	8001c7c <TIM_Base_SetConfig+0x40>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4a42      	ldr	r2, [pc, #264]	@ (8001d70 <TIM_Base_SetConfig+0x134>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d007      	beq.n	8001c7c <TIM_Base_SetConfig+0x40>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4a41      	ldr	r2, [pc, #260]	@ (8001d74 <TIM_Base_SetConfig+0x138>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d003      	beq.n	8001c7c <TIM_Base_SetConfig+0x40>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4a40      	ldr	r2, [pc, #256]	@ (8001d78 <TIM_Base_SetConfig+0x13c>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d108      	bne.n	8001c8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	68fa      	ldr	r2, [r7, #12]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a35      	ldr	r2, [pc, #212]	@ (8001d68 <TIM_Base_SetConfig+0x12c>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d02b      	beq.n	8001cee <TIM_Base_SetConfig+0xb2>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c9c:	d027      	beq.n	8001cee <TIM_Base_SetConfig+0xb2>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a32      	ldr	r2, [pc, #200]	@ (8001d6c <TIM_Base_SetConfig+0x130>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d023      	beq.n	8001cee <TIM_Base_SetConfig+0xb2>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a31      	ldr	r2, [pc, #196]	@ (8001d70 <TIM_Base_SetConfig+0x134>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d01f      	beq.n	8001cee <TIM_Base_SetConfig+0xb2>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a30      	ldr	r2, [pc, #192]	@ (8001d74 <TIM_Base_SetConfig+0x138>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d01b      	beq.n	8001cee <TIM_Base_SetConfig+0xb2>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a2f      	ldr	r2, [pc, #188]	@ (8001d78 <TIM_Base_SetConfig+0x13c>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d017      	beq.n	8001cee <TIM_Base_SetConfig+0xb2>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a2e      	ldr	r2, [pc, #184]	@ (8001d7c <TIM_Base_SetConfig+0x140>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d013      	beq.n	8001cee <TIM_Base_SetConfig+0xb2>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a2d      	ldr	r2, [pc, #180]	@ (8001d80 <TIM_Base_SetConfig+0x144>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d00f      	beq.n	8001cee <TIM_Base_SetConfig+0xb2>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a2c      	ldr	r2, [pc, #176]	@ (8001d84 <TIM_Base_SetConfig+0x148>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d00b      	beq.n	8001cee <TIM_Base_SetConfig+0xb2>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a2b      	ldr	r2, [pc, #172]	@ (8001d88 <TIM_Base_SetConfig+0x14c>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d007      	beq.n	8001cee <TIM_Base_SetConfig+0xb2>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a2a      	ldr	r2, [pc, #168]	@ (8001d8c <TIM_Base_SetConfig+0x150>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d003      	beq.n	8001cee <TIM_Base_SetConfig+0xb2>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a29      	ldr	r2, [pc, #164]	@ (8001d90 <TIM_Base_SetConfig+0x154>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d108      	bne.n	8001d00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001cf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	695b      	ldr	r3, [r3, #20]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	68fa      	ldr	r2, [r7, #12]
 8001d12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a10      	ldr	r2, [pc, #64]	@ (8001d68 <TIM_Base_SetConfig+0x12c>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d003      	beq.n	8001d34 <TIM_Base_SetConfig+0xf8>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a12      	ldr	r2, [pc, #72]	@ (8001d78 <TIM_Base_SetConfig+0x13c>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d103      	bne.n	8001d3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	691a      	ldr	r2, [r3, #16]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d105      	bne.n	8001d5a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	f023 0201 	bic.w	r2, r3, #1
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	611a      	str	r2, [r3, #16]
  }
}
 8001d5a:	bf00      	nop
 8001d5c:	3714      	adds	r7, #20
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	40010000 	.word	0x40010000
 8001d6c:	40000400 	.word	0x40000400
 8001d70:	40000800 	.word	0x40000800
 8001d74:	40000c00 	.word	0x40000c00
 8001d78:	40010400 	.word	0x40010400
 8001d7c:	40014000 	.word	0x40014000
 8001d80:	40014400 	.word	0x40014400
 8001d84:	40014800 	.word	0x40014800
 8001d88:	40001800 	.word	0x40001800
 8001d8c:	40001c00 	.word	0x40001c00
 8001d90:	40002000 	.word	0x40002000

08001d94 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <__NVIC_SetPriority>:
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	6039      	str	r1, [r7, #0]
 8001dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	db0a      	blt.n	8001de6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	490c      	ldr	r1, [pc, #48]	@ (8001e08 <__NVIC_SetPriority+0x4c>)
 8001dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dda:	0112      	lsls	r2, r2, #4
 8001ddc:	b2d2      	uxtb	r2, r2
 8001dde:	440b      	add	r3, r1
 8001de0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001de4:	e00a      	b.n	8001dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	4908      	ldr	r1, [pc, #32]	@ (8001e0c <__NVIC_SetPriority+0x50>)
 8001dec:	79fb      	ldrb	r3, [r7, #7]
 8001dee:	f003 030f 	and.w	r3, r3, #15
 8001df2:	3b04      	subs	r3, #4
 8001df4:	0112      	lsls	r2, r2, #4
 8001df6:	b2d2      	uxtb	r2, r2
 8001df8:	440b      	add	r3, r1
 8001dfa:	761a      	strb	r2, [r3, #24]
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	e000e100 	.word	0xe000e100
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001e14:	4b05      	ldr	r3, [pc, #20]	@ (8001e2c <SysTick_Handler+0x1c>)
 8001e16:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001e18:	f002 fab8 	bl	800438c <xTaskGetSchedulerState>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d001      	beq.n	8001e26 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001e22:	f003 f8e9 	bl	8004ff8 <xPortSysTickHandler>
  }
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	e000e010 	.word	0xe000e010

08001e30 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001e34:	2100      	movs	r1, #0
 8001e36:	f06f 0004 	mvn.w	r0, #4
 8001e3a:	f7ff ffbf 	bl	8001dbc <__NVIC_SetPriority>
#endif
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
	...

08001e44 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e4a:	f3ef 8305 	mrs	r3, IPSR
 8001e4e:	603b      	str	r3, [r7, #0]
  return(result);
 8001e50:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001e56:	f06f 0305 	mvn.w	r3, #5
 8001e5a:	607b      	str	r3, [r7, #4]
 8001e5c:	e00c      	b.n	8001e78 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e88 <osKernelInitialize+0x44>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d105      	bne.n	8001e72 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001e66:	4b08      	ldr	r3, [pc, #32]	@ (8001e88 <osKernelInitialize+0x44>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	607b      	str	r3, [r7, #4]
 8001e70:	e002      	b.n	8001e78 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001e72:	f04f 33ff 	mov.w	r3, #4294967295
 8001e76:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001e78:	687b      	ldr	r3, [r7, #4]
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	200000e4 	.word	0x200000e4

08001e8c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e92:	f3ef 8305 	mrs	r3, IPSR
 8001e96:	603b      	str	r3, [r7, #0]
  return(result);
 8001e98:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8001e9e:	f06f 0305 	mvn.w	r3, #5
 8001ea2:	607b      	str	r3, [r7, #4]
 8001ea4:	e010      	b.n	8001ec8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed4 <osKernelStart+0x48>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d109      	bne.n	8001ec2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001eae:	f7ff ffbf 	bl	8001e30 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001eb2:	4b08      	ldr	r3, [pc, #32]	@ (8001ed4 <osKernelStart+0x48>)
 8001eb4:	2202      	movs	r2, #2
 8001eb6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001eb8:	f001 fd62 	bl	8003980 <vTaskStartScheduler>
      stat = osOK;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	607b      	str	r3, [r7, #4]
 8001ec0:	e002      	b.n	8001ec8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001ec8:	687b      	ldr	r3, [r7, #4]
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	200000e4 	.word	0x200000e4

08001ed8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08e      	sub	sp, #56	@ 0x38
 8001edc:	af04      	add	r7, sp, #16
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ee8:	f3ef 8305 	mrs	r3, IPSR
 8001eec:	617b      	str	r3, [r7, #20]
  return(result);
 8001eee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d17e      	bne.n	8001ff2 <osThreadNew+0x11a>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d07b      	beq.n	8001ff2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001efa:	2380      	movs	r3, #128	@ 0x80
 8001efc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001efe:	2318      	movs	r3, #24
 8001f00:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8001f06:	f04f 33ff 	mov.w	r3, #4294967295
 8001f0a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d045      	beq.n	8001f9e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d002      	beq.n	8001f20 <osThreadNew+0x48>
        name = attr->name;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d002      	beq.n	8001f2e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d008      	beq.n	8001f46 <osThreadNew+0x6e>
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	2b38      	cmp	r3, #56	@ 0x38
 8001f38:	d805      	bhi.n	8001f46 <osThreadNew+0x6e>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <osThreadNew+0x72>
        return (NULL);
 8001f46:	2300      	movs	r3, #0
 8001f48:	e054      	b.n	8001ff4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d003      	beq.n	8001f5a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	089b      	lsrs	r3, r3, #2
 8001f58:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00e      	beq.n	8001f80 <osThreadNew+0xa8>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	2ba7      	cmp	r3, #167	@ 0xa7
 8001f68:	d90a      	bls.n	8001f80 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d006      	beq.n	8001f80 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d002      	beq.n	8001f80 <osThreadNew+0xa8>
        mem = 1;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	61bb      	str	r3, [r7, #24]
 8001f7e:	e010      	b.n	8001fa2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d10c      	bne.n	8001fa2 <osThreadNew+0xca>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d108      	bne.n	8001fa2 <osThreadNew+0xca>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d104      	bne.n	8001fa2 <osThreadNew+0xca>
          mem = 0;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	61bb      	str	r3, [r7, #24]
 8001f9c:	e001      	b.n	8001fa2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d110      	bne.n	8001fca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001fb0:	9202      	str	r2, [sp, #8]
 8001fb2:	9301      	str	r3, [sp, #4]
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	9300      	str	r3, [sp, #0]
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	6a3a      	ldr	r2, [r7, #32]
 8001fbc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f001 faea 	bl	8003598 <xTaskCreateStatic>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	613b      	str	r3, [r7, #16]
 8001fc8:	e013      	b.n	8001ff2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d110      	bne.n	8001ff2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001fd0:	6a3b      	ldr	r3, [r7, #32]
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	f107 0310 	add.w	r3, r7, #16
 8001fd8:	9301      	str	r3, [sp, #4]
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001fe2:	68f8      	ldr	r0, [r7, #12]
 8001fe4:	f001 fb38 	bl	8003658 <xTaskCreate>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d001      	beq.n	8001ff2 <osThreadNew+0x11a>
            hTask = NULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001ff2:	693b      	ldr	r3, [r7, #16]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3728      	adds	r7, #40	@ 0x28
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002004:	f3ef 8305 	mrs	r3, IPSR
 8002008:	60bb      	str	r3, [r7, #8]
  return(result);
 800200a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <osDelay+0x1c>
    stat = osErrorISR;
 8002010:	f06f 0305 	mvn.w	r3, #5
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	e007      	b.n	8002028 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002018:	2300      	movs	r3, #0
 800201a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d002      	beq.n	8002028 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f001 fc76 	bl	8003914 <vTaskDelay>
    }
  }

  return (stat);
 8002028:	68fb      	ldr	r3, [r7, #12]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8002032:	b580      	push	{r7, lr}
 8002034:	b086      	sub	sp, #24
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800203a:	2300      	movs	r3, #0
 800203c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800203e:	f3ef 8305 	mrs	r3, IPSR
 8002042:	60fb      	str	r3, [r7, #12]
  return(result);
 8002044:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8002046:	2b00      	cmp	r3, #0
 8002048:	d12d      	bne.n	80020a6 <osEventFlagsNew+0x74>
    mem = -1;
 800204a:	f04f 33ff 	mov.w	r3, #4294967295
 800204e:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d015      	beq.n	8002082 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d006      	beq.n	800206c <osEventFlagsNew+0x3a>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	2b1f      	cmp	r3, #31
 8002064:	d902      	bls.n	800206c <osEventFlagsNew+0x3a>
        mem = 1;
 8002066:	2301      	movs	r3, #1
 8002068:	613b      	str	r3, [r7, #16]
 800206a:	e00c      	b.n	8002086 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d108      	bne.n	8002086 <osEventFlagsNew+0x54>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d104      	bne.n	8002086 <osEventFlagsNew+0x54>
          mem = 0;
 800207c:	2300      	movs	r3, #0
 800207e:	613b      	str	r3, [r7, #16]
 8002080:	e001      	b.n	8002086 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8002082:	2300      	movs	r3, #0
 8002084:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d106      	bne.n	800209a <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	4618      	mov	r0, r3
 8002092:	f000 f9e5 	bl	8002460 <xEventGroupCreateStatic>
 8002096:	6178      	str	r0, [r7, #20]
 8002098:	e005      	b.n	80020a6 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d102      	bne.n	80020a6 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 80020a0:	f000 fa17 	bl	80024d2 <xEventGroupCreate>
 80020a4:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80020a6:	697b      	ldr	r3, [r7, #20]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <osEventFlagsSet+0x1c>
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020ca:	d303      	bcc.n	80020d4 <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 80020cc:	f06f 0303 	mvn.w	r3, #3
 80020d0:	617b      	str	r3, [r7, #20]
 80020d2:	e028      	b.n	8002126 <osEventFlagsSet+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80020d4:	f3ef 8305 	mrs	r3, IPSR
 80020d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80020da:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d01d      	beq.n	800211c <osEventFlagsSet+0x6c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 80020e0:	2300      	movs	r3, #0
 80020e2:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80020e4:	f107 0308 	add.w	r3, r7, #8
 80020e8:	461a      	mov	r2, r3
 80020ea:	6839      	ldr	r1, [r7, #0]
 80020ec:	6938      	ldr	r0, [r7, #16]
 80020ee:	f000 fb99 	bl	8002824 <xEventGroupSetBitsFromISR>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d103      	bne.n	8002100 <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
 80020f8:	f06f 0302 	mvn.w	r3, #2
 80020fc:	617b      	str	r3, [r7, #20]
 80020fe:	e012      	b.n	8002126 <osEventFlagsSet+0x76>
    } else {
      rflags = flags;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00d      	beq.n	8002126 <osEventFlagsSet+0x76>
 800210a:	4b09      	ldr	r3, [pc, #36]	@ (8002130 <osEventFlagsSet+0x80>)
 800210c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	f3bf 8f4f 	dsb	sy
 8002116:	f3bf 8f6f 	isb	sy
 800211a:	e004      	b.n	8002126 <osEventFlagsSet+0x76>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800211c:	6839      	ldr	r1, [r7, #0]
 800211e:	6938      	ldr	r0, [r7, #16]
 8002120:	f000 fac4 	bl	80026ac <xEventGroupSetBits>
 8002124:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8002126:	697b      	ldr	r3, [r7, #20]
}
 8002128:	4618      	mov	r0, r3
 800212a:	3718      	adds	r7, #24
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	e000ed04 	.word	0xe000ed04

08002134 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8002134:	b580      	push	{r7, lr}
 8002136:	b08c      	sub	sp, #48	@ 0x30
 8002138:	af02      	add	r7, sp, #8
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
 8002140:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d003      	beq.n	8002154 <osEventFlagsWait+0x20>
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002152:	d303      	bcc.n	800215c <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 8002154:	f06f 0303 	mvn.w	r3, #3
 8002158:	61fb      	str	r3, [r7, #28]
 800215a:	e04b      	b.n	80021f4 <osEventFlagsWait+0xc0>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800215c:	f3ef 8305 	mrs	r3, IPSR
 8002160:	617b      	str	r3, [r7, #20]
  return(result);
 8002162:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <osEventFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
 8002168:	f06f 0305 	mvn.w	r3, #5
 800216c:	61fb      	str	r3, [r7, #28]
 800216e:	e041      	b.n	80021f4 <osEventFlagsWait+0xc0>
  }
  else {
    if (options & osFlagsWaitAll) {
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b00      	cmp	r3, #0
 8002178:	d002      	beq.n	8002180 <osEventFlagsWait+0x4c>
      wait_all = pdTRUE;
 800217a:	2301      	movs	r3, #1
 800217c:	627b      	str	r3, [r7, #36]	@ 0x24
 800217e:	e001      	b.n	8002184 <osEventFlagsWait+0x50>
    } else {
      wait_all = pdFAIL;
 8002180:	2300      	movs	r3, #0
 8002182:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (options & osFlagsNoClear) {
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d002      	beq.n	8002194 <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 800218e:	2300      	movs	r3, #0
 8002190:	623b      	str	r3, [r7, #32]
 8002192:	e001      	b.n	8002198 <osEventFlagsWait+0x64>
    } else {
      exit_clr = pdTRUE;
 8002194:	2301      	movs	r3, #1
 8002196:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219e:	6a3a      	ldr	r2, [r7, #32]
 80021a0:	68b9      	ldr	r1, [r7, #8]
 80021a2:	69b8      	ldr	r0, [r7, #24]
 80021a4:	f000 f9b0 	bl	8002508 <xEventGroupWaitBits>
 80021a8:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d010      	beq.n	80021d6 <osEventFlagsWait+0xa2>
      if ((flags & rflags) != flags) {
 80021b4:	68ba      	ldr	r2, [r7, #8]
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	4013      	ands	r3, r2
 80021ba:	68ba      	ldr	r2, [r7, #8]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d019      	beq.n	80021f4 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <osEventFlagsWait+0x9a>
          rflags = (uint32_t)osErrorTimeout;
 80021c6:	f06f 0301 	mvn.w	r3, #1
 80021ca:	61fb      	str	r3, [r7, #28]
 80021cc:	e012      	b.n	80021f4 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 80021ce:	f06f 0302 	mvn.w	r3, #2
 80021d2:	61fb      	str	r3, [r7, #28]
 80021d4:	e00e      	b.n	80021f4 <osEventFlagsWait+0xc0>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80021d6:	68ba      	ldr	r2, [r7, #8]
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	4013      	ands	r3, r2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d109      	bne.n	80021f4 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <osEventFlagsWait+0xba>
          rflags = (uint32_t)osErrorTimeout;
 80021e6:	f06f 0301 	mvn.w	r3, #1
 80021ea:	61fb      	str	r3, [r7, #28]
 80021ec:	e002      	b.n	80021f4 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 80021ee:	f06f 0302 	mvn.w	r3, #2
 80021f2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 80021f4:	69fb      	ldr	r3, [r7, #28]
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3728      	adds	r7, #40	@ 0x28
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80021fe:	b580      	push	{r7, lr}
 8002200:	b08a      	sub	sp, #40	@ 0x28
 8002202:	af02      	add	r7, sp, #8
 8002204:	60f8      	str	r0, [r7, #12]
 8002206:	60b9      	str	r1, [r7, #8]
 8002208:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800220a:	2300      	movs	r3, #0
 800220c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800220e:	f3ef 8305 	mrs	r3, IPSR
 8002212:	613b      	str	r3, [r7, #16]
  return(result);
 8002214:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8002216:	2b00      	cmp	r3, #0
 8002218:	d175      	bne.n	8002306 <osSemaphoreNew+0x108>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d072      	beq.n	8002306 <osSemaphoreNew+0x108>
 8002220:	68ba      	ldr	r2, [r7, #8]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	429a      	cmp	r2, r3
 8002226:	d86e      	bhi.n	8002306 <osSemaphoreNew+0x108>
    mem = -1;
 8002228:	f04f 33ff 	mov.w	r3, #4294967295
 800222c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d015      	beq.n	8002260 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d006      	beq.n	800224a <osSemaphoreNew+0x4c>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	2b4f      	cmp	r3, #79	@ 0x4f
 8002242:	d902      	bls.n	800224a <osSemaphoreNew+0x4c>
        mem = 1;
 8002244:	2301      	movs	r3, #1
 8002246:	61bb      	str	r3, [r7, #24]
 8002248:	e00c      	b.n	8002264 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d108      	bne.n	8002264 <osSemaphoreNew+0x66>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d104      	bne.n	8002264 <osSemaphoreNew+0x66>
          mem = 0;
 800225a:	2300      	movs	r3, #0
 800225c:	61bb      	str	r3, [r7, #24]
 800225e:	e001      	b.n	8002264 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8002260:	2300      	movs	r3, #0
 8002262:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800226a:	d04c      	beq.n	8002306 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d128      	bne.n	80022c4 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d10a      	bne.n	800228e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	2203      	movs	r2, #3
 800227e:	9200      	str	r2, [sp, #0]
 8002280:	2200      	movs	r2, #0
 8002282:	2100      	movs	r1, #0
 8002284:	2001      	movs	r0, #1
 8002286:	f000 fbff 	bl	8002a88 <xQueueGenericCreateStatic>
 800228a:	61f8      	str	r0, [r7, #28]
 800228c:	e005      	b.n	800229a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800228e:	2203      	movs	r2, #3
 8002290:	2100      	movs	r1, #0
 8002292:	2001      	movs	r0, #1
 8002294:	f000 fc75 	bl	8002b82 <xQueueGenericCreate>
 8002298:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d022      	beq.n	80022e6 <osSemaphoreNew+0xe8>
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d01f      	beq.n	80022e6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80022a6:	2300      	movs	r3, #0
 80022a8:	2200      	movs	r2, #0
 80022aa:	2100      	movs	r1, #0
 80022ac:	69f8      	ldr	r0, [r7, #28]
 80022ae:	f000 fd35 	bl	8002d1c <xQueueGenericSend>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d016      	beq.n	80022e6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80022b8:	69f8      	ldr	r0, [r7, #28]
 80022ba:	f000 ffb1 	bl	8003220 <vQueueDelete>
            hSemaphore = NULL;
 80022be:	2300      	movs	r3, #0
 80022c0:	61fb      	str	r3, [r7, #28]
 80022c2:	e010      	b.n	80022e6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d108      	bne.n	80022dc <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	461a      	mov	r2, r3
 80022d0:	68b9      	ldr	r1, [r7, #8]
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f000 fcb3 	bl	8002c3e <xQueueCreateCountingSemaphoreStatic>
 80022d8:	61f8      	str	r0, [r7, #28]
 80022da:	e004      	b.n	80022e6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80022dc:	68b9      	ldr	r1, [r7, #8]
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f000 fce6 	bl	8002cb0 <xQueueCreateCountingSemaphore>
 80022e4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d00c      	beq.n	8002306 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <osSemaphoreNew+0xfc>
          name = attr->name;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	617b      	str	r3, [r7, #20]
 80022f8:	e001      	b.n	80022fe <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80022fa:	2300      	movs	r3, #0
 80022fc:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80022fe:	6979      	ldr	r1, [r7, #20]
 8002300:	69f8      	ldr	r0, [r7, #28]
 8002302:	f001 f8c1 	bl	8003488 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8002306:	69fb      	ldr	r3, [r7, #28]
}
 8002308:	4618      	mov	r0, r3
 800230a:	3720      	adds	r7, #32
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8002310:	b580      	push	{r7, lr}
 8002312:	b08a      	sub	sp, #40	@ 0x28
 8002314:	af02      	add	r7, sp, #8
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800231c:	2300      	movs	r3, #0
 800231e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002320:	f3ef 8305 	mrs	r3, IPSR
 8002324:	613b      	str	r3, [r7, #16]
  return(result);
 8002326:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8002328:	2b00      	cmp	r3, #0
 800232a:	d15f      	bne.n	80023ec <osMessageQueueNew+0xdc>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d05c      	beq.n	80023ec <osMessageQueueNew+0xdc>
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d059      	beq.n	80023ec <osMessageQueueNew+0xdc>
    mem = -1;
 8002338:	f04f 33ff 	mov.w	r3, #4294967295
 800233c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d029      	beq.n	8002398 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d012      	beq.n	8002372 <osMessageQueueNew+0x62>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	2b4f      	cmp	r3, #79	@ 0x4f
 8002352:	d90e      	bls.n	8002372 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00a      	beq.n	8002372 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	695a      	ldr	r2, [r3, #20]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	68b9      	ldr	r1, [r7, #8]
 8002364:	fb01 f303 	mul.w	r3, r1, r3
 8002368:	429a      	cmp	r2, r3
 800236a:	d302      	bcc.n	8002372 <osMessageQueueNew+0x62>
        mem = 1;
 800236c:	2301      	movs	r3, #1
 800236e:	61bb      	str	r3, [r7, #24]
 8002370:	e014      	b.n	800239c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d110      	bne.n	800239c <osMessageQueueNew+0x8c>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d10c      	bne.n	800239c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002386:	2b00      	cmp	r3, #0
 8002388:	d108      	bne.n	800239c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d104      	bne.n	800239c <osMessageQueueNew+0x8c>
          mem = 0;
 8002392:	2300      	movs	r3, #0
 8002394:	61bb      	str	r3, [r7, #24]
 8002396:	e001      	b.n	800239c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8002398:	2300      	movs	r3, #0
 800239a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d10b      	bne.n	80023ba <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	691a      	ldr	r2, [r3, #16]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	2100      	movs	r1, #0
 80023ac:	9100      	str	r1, [sp, #0]
 80023ae:	68b9      	ldr	r1, [r7, #8]
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	f000 fb69 	bl	8002a88 <xQueueGenericCreateStatic>
 80023b6:	61f8      	str	r0, [r7, #28]
 80023b8:	e008      	b.n	80023cc <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d105      	bne.n	80023cc <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80023c0:	2200      	movs	r2, #0
 80023c2:	68b9      	ldr	r1, [r7, #8]
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f000 fbdc 	bl	8002b82 <xQueueGenericCreate>
 80023ca:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00c      	beq.n	80023ec <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d003      	beq.n	80023e0 <osMessageQueueNew+0xd0>
        name = attr->name;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	617b      	str	r3, [r7, #20]
 80023de:	e001      	b.n	80023e4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80023e4:	6979      	ldr	r1, [r7, #20]
 80023e6:	69f8      	ldr	r0, [r7, #28]
 80023e8:	f001 f84e 	bl	8003488 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80023ec:	69fb      	ldr	r3, [r7, #28]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3720      	adds	r7, #32
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
	...

080023f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	4a07      	ldr	r2, [pc, #28]	@ (8002424 <vApplicationGetIdleTaskMemory+0x2c>)
 8002408:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	4a06      	ldr	r2, [pc, #24]	@ (8002428 <vApplicationGetIdleTaskMemory+0x30>)
 800240e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2280      	movs	r2, #128	@ 0x80
 8002414:	601a      	str	r2, [r3, #0]
}
 8002416:	bf00      	nop
 8002418:	3714      	adds	r7, #20
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	200000e8 	.word	0x200000e8
 8002428:	20000190 	.word	0x20000190

0800242c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	4a07      	ldr	r2, [pc, #28]	@ (8002458 <vApplicationGetTimerTaskMemory+0x2c>)
 800243c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	4a06      	ldr	r2, [pc, #24]	@ (800245c <vApplicationGetTimerTaskMemory+0x30>)
 8002442:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800244a:	601a      	str	r2, [r3, #0]
}
 800244c:	bf00      	nop
 800244e:	3714      	adds	r7, #20
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	20000390 	.word	0x20000390
 800245c:	20000438 	.word	0x20000438

08002460 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d10b      	bne.n	8002486 <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800246e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002472:	f383 8811 	msr	BASEPRI, r3
 8002476:	f3bf 8f6f 	isb	sy
 800247a:	f3bf 8f4f 	dsb	sy
 800247e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002480:	bf00      	nop
 8002482:	bf00      	nop
 8002484:	e7fd      	b.n	8002482 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8002486:	2320      	movs	r3, #32
 8002488:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	2b20      	cmp	r3, #32
 800248e:	d00b      	beq.n	80024a8 <xEventGroupCreateStatic+0x48>
	__asm volatile
 8002490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002494:	f383 8811 	msr	BASEPRI, r3
 8002498:	f3bf 8f6f 	isb	sy
 800249c:	f3bf 8f4f 	dsb	sy
 80024a0:	60fb      	str	r3, [r7, #12]
}
 80024a2:	bf00      	nop
 80024a4:	bf00      	nop
 80024a6:	e7fd      	b.n	80024a4 <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00a      	beq.n	80024c8 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	3304      	adds	r3, #4
 80024bc:	4618      	mov	r0, r3
 80024be:	f000 f9c5 	bl	800284c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	2201      	movs	r2, #1
 80024c6:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80024c8:	697b      	ldr	r3, [r7, #20]
	}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3718      	adds	r7, #24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b082      	sub	sp, #8
 80024d6:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80024d8:	2020      	movs	r0, #32
 80024da:	f002 fe1f 	bl	800511c <pvPortMalloc>
 80024de:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00a      	beq.n	80024fc <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3304      	adds	r3, #4
 80024f0:	4618      	mov	r0, r3
 80024f2:	f000 f9ab 	bl	800284c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80024fc:	687b      	ldr	r3, [r7, #4]
	}
 80024fe:	4618      	mov	r0, r3
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
	...

08002508 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b090      	sub	sp, #64	@ 0x40
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
 8002514:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800251a:	2300      	movs	r3, #0
 800251c:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800251e:	2300      	movs	r3, #0
 8002520:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d10b      	bne.n	8002540 <xEventGroupWaitBits+0x38>
	__asm volatile
 8002528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800252c:	f383 8811 	msr	BASEPRI, r3
 8002530:	f3bf 8f6f 	isb	sy
 8002534:	f3bf 8f4f 	dsb	sy
 8002538:	623b      	str	r3, [r7, #32]
}
 800253a:	bf00      	nop
 800253c:	bf00      	nop
 800253e:	e7fd      	b.n	800253c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002546:	d30b      	bcc.n	8002560 <xEventGroupWaitBits+0x58>
	__asm volatile
 8002548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800254c:	f383 8811 	msr	BASEPRI, r3
 8002550:	f3bf 8f6f 	isb	sy
 8002554:	f3bf 8f4f 	dsb	sy
 8002558:	61fb      	str	r3, [r7, #28]
}
 800255a:	bf00      	nop
 800255c:	bf00      	nop
 800255e:	e7fd      	b.n	800255c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10b      	bne.n	800257e <xEventGroupWaitBits+0x76>
	__asm volatile
 8002566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800256a:	f383 8811 	msr	BASEPRI, r3
 800256e:	f3bf 8f6f 	isb	sy
 8002572:	f3bf 8f4f 	dsb	sy
 8002576:	61bb      	str	r3, [r7, #24]
}
 8002578:	bf00      	nop
 800257a:	bf00      	nop
 800257c:	e7fd      	b.n	800257a <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800257e:	f001 ff05 	bl	800438c <xTaskGetSchedulerState>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d102      	bne.n	800258e <xEventGroupWaitBits+0x86>
 8002588:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <xEventGroupWaitBits+0x8a>
 800258e:	2301      	movs	r3, #1
 8002590:	e000      	b.n	8002594 <xEventGroupWaitBits+0x8c>
 8002592:	2300      	movs	r3, #0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10b      	bne.n	80025b0 <xEventGroupWaitBits+0xa8>
	__asm volatile
 8002598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800259c:	f383 8811 	msr	BASEPRI, r3
 80025a0:	f3bf 8f6f 	isb	sy
 80025a4:	f3bf 8f4f 	dsb	sy
 80025a8:	617b      	str	r3, [r7, #20]
}
 80025aa:	bf00      	nop
 80025ac:	bf00      	nop
 80025ae:	e7fd      	b.n	80025ac <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 80025b0:	f001 fa56 	bl	8003a60 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80025b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	68b9      	ldr	r1, [r7, #8]
 80025be:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80025c0:	f000 f90d 	bl	80027de <prvTestWaitCondition>
 80025c4:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 80025c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00e      	beq.n	80025ea <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80025cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80025d0:	2300      	movs	r3, #0
 80025d2:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d028      	beq.n	800262c <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80025da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	43db      	mvns	r3, r3
 80025e2:	401a      	ands	r2, r3
 80025e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	e020      	b.n	800262c <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80025ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d104      	bne.n	80025fa <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80025f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 80025f4:	2301      	movs	r3, #1
 80025f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80025f8:	e018      	b.n	800262c <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d003      	beq.n	8002608 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8002600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002602:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002606:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800260e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002610:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002614:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8002616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002618:	1d18      	adds	r0, r3, #4
 800261a:	68ba      	ldr	r2, [r7, #8]
 800261c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800261e:	4313      	orrs	r3, r2
 8002620:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002622:	4619      	mov	r1, r3
 8002624:	f001 fc1e 	bl	8003e64 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8002628:	2300      	movs	r3, #0
 800262a:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800262c:	f001 fa26 	bl	8003a7c <xTaskResumeAll>
 8002630:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8002632:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002634:	2b00      	cmp	r3, #0
 8002636:	d031      	beq.n	800269c <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 8002638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263a:	2b00      	cmp	r3, #0
 800263c:	d107      	bne.n	800264e <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 800263e:	4b1a      	ldr	r3, [pc, #104]	@ (80026a8 <xEventGroupWaitBits+0x1a0>)
 8002640:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	f3bf 8f4f 	dsb	sy
 800264a:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800264e:	f001 ff2b 	bl	80044a8 <uxTaskResetEventItemValue>
 8002652:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8002654:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002656:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d11a      	bne.n	8002694 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 800265e:	f002 fc3b 	bl	8004ed8 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8002662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	68b9      	ldr	r1, [r7, #8]
 800266c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800266e:	f000 f8b6 	bl	80027de <prvTestWaitCondition>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d009      	beq.n	800268c <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d006      	beq.n	800268c <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800267e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	43db      	mvns	r3, r3
 8002686:	401a      	ands	r2, r3
 8002688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800268a:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800268c:	2301      	movs	r3, #1
 800268e:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 8002690:	f002 fc54 	bl	8004f3c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8002694:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002696:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800269a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800269c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3740      	adds	r7, #64	@ 0x40
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	e000ed04 	.word	0xe000ed04

080026ac <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b08e      	sub	sp, #56	@ 0x38
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80026b6:	2300      	movs	r3, #0
 80026b8:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 80026be:	2300      	movs	r3, #0
 80026c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d10b      	bne.n	80026e0 <xEventGroupSetBits+0x34>
	__asm volatile
 80026c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026cc:	f383 8811 	msr	BASEPRI, r3
 80026d0:	f3bf 8f6f 	isb	sy
 80026d4:	f3bf 8f4f 	dsb	sy
 80026d8:	613b      	str	r3, [r7, #16]
}
 80026da:	bf00      	nop
 80026dc:	bf00      	nop
 80026de:	e7fd      	b.n	80026dc <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026e6:	d30b      	bcc.n	8002700 <xEventGroupSetBits+0x54>
	__asm volatile
 80026e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026ec:	f383 8811 	msr	BASEPRI, r3
 80026f0:	f3bf 8f6f 	isb	sy
 80026f4:	f3bf 8f4f 	dsb	sy
 80026f8:	60fb      	str	r3, [r7, #12]
}
 80026fa:	bf00      	nop
 80026fc:	bf00      	nop
 80026fe:	e7fd      	b.n	80026fc <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8002700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002702:	3304      	adds	r3, #4
 8002704:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002708:	3308      	adds	r3, #8
 800270a:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800270c:	f001 f9a8 	bl	8003a60 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8002710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8002716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	431a      	orrs	r2, r3
 800271e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002720:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8002722:	e03c      	b.n	800279e <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 8002724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800272a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8002730:	2300      	movs	r3, #0
 8002732:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800273a:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002742:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d108      	bne.n	8002760 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800274e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	4013      	ands	r3, r2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00b      	beq.n	8002772 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 800275a:	2301      	movs	r3, #1
 800275c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800275e:	e008      	b.n	8002772 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8002760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	4013      	ands	r3, r2
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	429a      	cmp	r2, r3
 800276c:	d101      	bne.n	8002772 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800276e:	2301      	movs	r3, #1
 8002770:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8002772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002774:	2b00      	cmp	r3, #0
 8002776:	d010      	beq.n	800279a <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8002782:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	4313      	orrs	r3, r2
 8002788:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800278a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002792:	4619      	mov	r1, r3
 8002794:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002796:	f001 fc33 	bl	8004000 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 800279e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80027a0:	6a3b      	ldr	r3, [r7, #32]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d1be      	bne.n	8002724 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80027a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ac:	43db      	mvns	r3, r3
 80027ae:	401a      	ands	r2, r3
 80027b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027b2:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80027b4:	f001 f962 	bl	8003a7c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80027b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ba:	681b      	ldr	r3, [r3, #0]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3738      	adds	r7, #56	@ 0x38
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80027ce:	6839      	ldr	r1, [r7, #0]
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f7ff ff6b 	bl	80026ac <xEventGroupSetBits>
}
 80027d6:	bf00      	nop
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80027de:	b480      	push	{r7}
 80027e0:	b087      	sub	sp, #28
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	60f8      	str	r0, [r7, #12]
 80027e6:	60b9      	str	r1, [r7, #8]
 80027e8:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80027ea:	2300      	movs	r3, #0
 80027ec:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d107      	bne.n	8002804 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	4013      	ands	r3, r2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00a      	beq.n	8002814 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80027fe:	2301      	movs	r3, #1
 8002800:	617b      	str	r3, [r7, #20]
 8002802:	e007      	b.n	8002814 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	4013      	ands	r3, r2
 800280a:	68ba      	ldr	r2, [r7, #8]
 800280c:	429a      	cmp	r2, r3
 800280e:	d101      	bne.n	8002814 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8002810:	2301      	movs	r3, #1
 8002812:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8002814:	697b      	ldr	r3, [r7, #20]
}
 8002816:	4618      	mov	r0, r3
 8002818:	371c      	adds	r7, #28
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
	...

08002824 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	68f9      	ldr	r1, [r7, #12]
 8002836:	4804      	ldr	r0, [pc, #16]	@ (8002848 <xEventGroupSetBitsFromISR+0x24>)
 8002838:	f002 f9fc 	bl	8004c34 <xTimerPendFunctionCallFromISR>
 800283c:	6178      	str	r0, [r7, #20]

		return xReturn;
 800283e:	697b      	ldr	r3, [r7, #20]
	}
 8002840:	4618      	mov	r0, r3
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	080027c5 	.word	0x080027c5

0800284c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f103 0208 	add.w	r2, r3, #8
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f04f 32ff 	mov.w	r2, #4294967295
 8002864:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f103 0208 	add.w	r2, r3, #8
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f103 0208 	add.w	r2, r3, #8
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028a6:	b480      	push	{r7}
 80028a8:	b085      	sub	sp, #20
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
 80028ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	689a      	ldr	r2, [r3, #8]
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	1c5a      	adds	r2, r3, #1
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	601a      	str	r2, [r3, #0]
}
 80028e2:	bf00      	nop
 80028e4:	3714      	adds	r7, #20
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028ee:	b480      	push	{r7}
 80028f0:	b085      	sub	sp, #20
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
 80028f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002904:	d103      	bne.n	800290e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	e00c      	b.n	8002928 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	3308      	adds	r3, #8
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	e002      	b.n	800291c <vListInsert+0x2e>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	429a      	cmp	r2, r3
 8002926:	d2f6      	bcs.n	8002916 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	1c5a      	adds	r2, r3, #1
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	601a      	str	r2, [r3, #0]
}
 8002954:	bf00      	nop
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6892      	ldr	r2, [r2, #8]
 8002976:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	6852      	ldr	r2, [r2, #4]
 8002980:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	429a      	cmp	r2, r3
 800298a:	d103      	bne.n	8002994 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	1e5a      	subs	r2, r3, #1
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d10b      	bne.n	80029e0 <xQueueGenericReset+0x2c>
	__asm volatile
 80029c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029cc:	f383 8811 	msr	BASEPRI, r3
 80029d0:	f3bf 8f6f 	isb	sy
 80029d4:	f3bf 8f4f 	dsb	sy
 80029d8:	60bb      	str	r3, [r7, #8]
}
 80029da:	bf00      	nop
 80029dc:	bf00      	nop
 80029de:	e7fd      	b.n	80029dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80029e0:	f002 fa7a 	bl	8004ed8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ec:	68f9      	ldr	r1, [r7, #12]
 80029ee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80029f0:	fb01 f303 	mul.w	r3, r1, r3
 80029f4:	441a      	add	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a10:	3b01      	subs	r3, #1
 8002a12:	68f9      	ldr	r1, [r7, #12]
 8002a14:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002a16:	fb01 f303 	mul.w	r3, r1, r3
 8002a1a:	441a      	add	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	22ff      	movs	r2, #255	@ 0xff
 8002a24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	22ff      	movs	r2, #255	@ 0xff
 8002a2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d114      	bne.n	8002a60 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d01a      	beq.n	8002a74 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	3310      	adds	r3, #16
 8002a42:	4618      	mov	r0, r3
 8002a44:	f001 fa78 	bl	8003f38 <xTaskRemoveFromEventList>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d012      	beq.n	8002a74 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8002a84 <xQueueGenericReset+0xd0>)
 8002a50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	f3bf 8f4f 	dsb	sy
 8002a5a:	f3bf 8f6f 	isb	sy
 8002a5e:	e009      	b.n	8002a74 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	3310      	adds	r3, #16
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff fef1 	bl	800284c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	3324      	adds	r3, #36	@ 0x24
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff feec 	bl	800284c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002a74:	f002 fa62 	bl	8004f3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002a78:	2301      	movs	r3, #1
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	e000ed04 	.word	0xe000ed04

08002a88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b08e      	sub	sp, #56	@ 0x38
 8002a8c:	af02      	add	r7, sp, #8
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
 8002a94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d10b      	bne.n	8002ab4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002aa0:	f383 8811 	msr	BASEPRI, r3
 8002aa4:	f3bf 8f6f 	isb	sy
 8002aa8:	f3bf 8f4f 	dsb	sy
 8002aac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002aae:	bf00      	nop
 8002ab0:	bf00      	nop
 8002ab2:	e7fd      	b.n	8002ab0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10b      	bne.n	8002ad2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002abe:	f383 8811 	msr	BASEPRI, r3
 8002ac2:	f3bf 8f6f 	isb	sy
 8002ac6:	f3bf 8f4f 	dsb	sy
 8002aca:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002acc:	bf00      	nop
 8002ace:	bf00      	nop
 8002ad0:	e7fd      	b.n	8002ace <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d002      	beq.n	8002ade <xQueueGenericCreateStatic+0x56>
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <xQueueGenericCreateStatic+0x5a>
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e000      	b.n	8002ae4 <xQueueGenericCreateStatic+0x5c>
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d10b      	bne.n	8002b00 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002aec:	f383 8811 	msr	BASEPRI, r3
 8002af0:	f3bf 8f6f 	isb	sy
 8002af4:	f3bf 8f4f 	dsb	sy
 8002af8:	623b      	str	r3, [r7, #32]
}
 8002afa:	bf00      	nop
 8002afc:	bf00      	nop
 8002afe:	e7fd      	b.n	8002afc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d102      	bne.n	8002b0c <xQueueGenericCreateStatic+0x84>
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <xQueueGenericCreateStatic+0x88>
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e000      	b.n	8002b12 <xQueueGenericCreateStatic+0x8a>
 8002b10:	2300      	movs	r3, #0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d10b      	bne.n	8002b2e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b1a:	f383 8811 	msr	BASEPRI, r3
 8002b1e:	f3bf 8f6f 	isb	sy
 8002b22:	f3bf 8f4f 	dsb	sy
 8002b26:	61fb      	str	r3, [r7, #28]
}
 8002b28:	bf00      	nop
 8002b2a:	bf00      	nop
 8002b2c:	e7fd      	b.n	8002b2a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002b2e:	2350      	movs	r3, #80	@ 0x50
 8002b30:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	2b50      	cmp	r3, #80	@ 0x50
 8002b36:	d00b      	beq.n	8002b50 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b3c:	f383 8811 	msr	BASEPRI, r3
 8002b40:	f3bf 8f6f 	isb	sy
 8002b44:	f3bf 8f4f 	dsb	sy
 8002b48:	61bb      	str	r3, [r7, #24]
}
 8002b4a:	bf00      	nop
 8002b4c:	bf00      	nop
 8002b4e:	e7fd      	b.n	8002b4c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002b50:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00d      	beq.n	8002b78 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b64:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	68b9      	ldr	r1, [r7, #8]
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f000 f840 	bl	8002bf8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3730      	adds	r7, #48	@ 0x30
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b08a      	sub	sp, #40	@ 0x28
 8002b86:	af02      	add	r7, sp, #8
 8002b88:	60f8      	str	r0, [r7, #12]
 8002b8a:	60b9      	str	r1, [r7, #8]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10b      	bne.n	8002bae <xQueueGenericCreate+0x2c>
	__asm volatile
 8002b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b9a:	f383 8811 	msr	BASEPRI, r3
 8002b9e:	f3bf 8f6f 	isb	sy
 8002ba2:	f3bf 8f4f 	dsb	sy
 8002ba6:	613b      	str	r3, [r7, #16]
}
 8002ba8:	bf00      	nop
 8002baa:	bf00      	nop
 8002bac:	e7fd      	b.n	8002baa <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	68ba      	ldr	r2, [r7, #8]
 8002bb2:	fb02 f303 	mul.w	r3, r2, r3
 8002bb6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	3350      	adds	r3, #80	@ 0x50
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f002 faad 	bl	800511c <pvPortMalloc>
 8002bc2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d011      	beq.n	8002bee <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	3350      	adds	r3, #80	@ 0x50
 8002bd2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002bdc:	79fa      	ldrb	r2, [r7, #7]
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	9300      	str	r3, [sp, #0]
 8002be2:	4613      	mov	r3, r2
 8002be4:	697a      	ldr	r2, [r7, #20]
 8002be6:	68b9      	ldr	r1, [r7, #8]
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	f000 f805 	bl	8002bf8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002bee:	69bb      	ldr	r3, [r7, #24]
	}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3720      	adds	r7, #32
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
 8002c04:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d103      	bne.n	8002c14 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	e002      	b.n	8002c1a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	68ba      	ldr	r2, [r7, #8]
 8002c24:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002c26:	2101      	movs	r1, #1
 8002c28:	69b8      	ldr	r0, [r7, #24]
 8002c2a:	f7ff fec3 	bl	80029b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	78fa      	ldrb	r2, [r7, #3]
 8002c32:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002c36:	bf00      	nop
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b08a      	sub	sp, #40	@ 0x28
 8002c42:	af02      	add	r7, sp, #8
 8002c44:	60f8      	str	r0, [r7, #12]
 8002c46:	60b9      	str	r1, [r7, #8]
 8002c48:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10b      	bne.n	8002c68 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8002c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c54:	f383 8811 	msr	BASEPRI, r3
 8002c58:	f3bf 8f6f 	isb	sy
 8002c5c:	f3bf 8f4f 	dsb	sy
 8002c60:	61bb      	str	r3, [r7, #24]
}
 8002c62:	bf00      	nop
 8002c64:	bf00      	nop
 8002c66:	e7fd      	b.n	8002c64 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d90b      	bls.n	8002c88 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8002c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c74:	f383 8811 	msr	BASEPRI, r3
 8002c78:	f3bf 8f6f 	isb	sy
 8002c7c:	f3bf 8f4f 	dsb	sy
 8002c80:	617b      	str	r3, [r7, #20]
}
 8002c82:	bf00      	nop
 8002c84:	bf00      	nop
 8002c86:	e7fd      	b.n	8002c84 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002c88:	2302      	movs	r3, #2
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	2100      	movs	r1, #0
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f7ff fef8 	bl	8002a88 <xQueueGenericCreateStatic>
 8002c98:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d002      	beq.n	8002ca6 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002ca6:	69fb      	ldr	r3, [r7, #28]
	}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3720      	adds	r7, #32
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10b      	bne.n	8002cd8 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8002cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cc4:	f383 8811 	msr	BASEPRI, r3
 8002cc8:	f3bf 8f6f 	isb	sy
 8002ccc:	f3bf 8f4f 	dsb	sy
 8002cd0:	613b      	str	r3, [r7, #16]
}
 8002cd2:	bf00      	nop
 8002cd4:	bf00      	nop
 8002cd6:	e7fd      	b.n	8002cd4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d90b      	bls.n	8002cf8 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8002ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ce4:	f383 8811 	msr	BASEPRI, r3
 8002ce8:	f3bf 8f6f 	isb	sy
 8002cec:	f3bf 8f4f 	dsb	sy
 8002cf0:	60fb      	str	r3, [r7, #12]
}
 8002cf2:	bf00      	nop
 8002cf4:	bf00      	nop
 8002cf6:	e7fd      	b.n	8002cf4 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f7ff ff40 	bl	8002b82 <xQueueGenericCreate>
 8002d02:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d002      	beq.n	8002d10 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002d10:	697b      	ldr	r3, [r7, #20]
	}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3718      	adds	r7, #24
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
	...

08002d1c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b08e      	sub	sp, #56	@ 0x38
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
 8002d28:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d10b      	bne.n	8002d50 <xQueueGenericSend+0x34>
	__asm volatile
 8002d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d3c:	f383 8811 	msr	BASEPRI, r3
 8002d40:	f3bf 8f6f 	isb	sy
 8002d44:	f3bf 8f4f 	dsb	sy
 8002d48:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002d4a:	bf00      	nop
 8002d4c:	bf00      	nop
 8002d4e:	e7fd      	b.n	8002d4c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d103      	bne.n	8002d5e <xQueueGenericSend+0x42>
 8002d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <xQueueGenericSend+0x46>
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e000      	b.n	8002d64 <xQueueGenericSend+0x48>
 8002d62:	2300      	movs	r3, #0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10b      	bne.n	8002d80 <xQueueGenericSend+0x64>
	__asm volatile
 8002d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d6c:	f383 8811 	msr	BASEPRI, r3
 8002d70:	f3bf 8f6f 	isb	sy
 8002d74:	f3bf 8f4f 	dsb	sy
 8002d78:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002d7a:	bf00      	nop
 8002d7c:	bf00      	nop
 8002d7e:	e7fd      	b.n	8002d7c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d103      	bne.n	8002d8e <xQueueGenericSend+0x72>
 8002d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d101      	bne.n	8002d92 <xQueueGenericSend+0x76>
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e000      	b.n	8002d94 <xQueueGenericSend+0x78>
 8002d92:	2300      	movs	r3, #0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10b      	bne.n	8002db0 <xQueueGenericSend+0x94>
	__asm volatile
 8002d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d9c:	f383 8811 	msr	BASEPRI, r3
 8002da0:	f3bf 8f6f 	isb	sy
 8002da4:	f3bf 8f4f 	dsb	sy
 8002da8:	623b      	str	r3, [r7, #32]
}
 8002daa:	bf00      	nop
 8002dac:	bf00      	nop
 8002dae:	e7fd      	b.n	8002dac <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002db0:	f001 faec 	bl	800438c <xTaskGetSchedulerState>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d102      	bne.n	8002dc0 <xQueueGenericSend+0xa4>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <xQueueGenericSend+0xa8>
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e000      	b.n	8002dc6 <xQueueGenericSend+0xaa>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10b      	bne.n	8002de2 <xQueueGenericSend+0xc6>
	__asm volatile
 8002dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dce:	f383 8811 	msr	BASEPRI, r3
 8002dd2:	f3bf 8f6f 	isb	sy
 8002dd6:	f3bf 8f4f 	dsb	sy
 8002dda:	61fb      	str	r3, [r7, #28]
}
 8002ddc:	bf00      	nop
 8002dde:	bf00      	nop
 8002de0:	e7fd      	b.n	8002dde <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002de2:	f002 f879 	bl	8004ed8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d302      	bcc.n	8002df8 <xQueueGenericSend+0xdc>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d129      	bne.n	8002e4c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	68b9      	ldr	r1, [r7, #8]
 8002dfc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002dfe:	f000 fa33 	bl	8003268 <prvCopyDataToQueue>
 8002e02:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d010      	beq.n	8002e2e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e0e:	3324      	adds	r3, #36	@ 0x24
 8002e10:	4618      	mov	r0, r3
 8002e12:	f001 f891 	bl	8003f38 <xTaskRemoveFromEventList>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d013      	beq.n	8002e44 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002e1c:	4b3f      	ldr	r3, [pc, #252]	@ (8002f1c <xQueueGenericSend+0x200>)
 8002e1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	f3bf 8f4f 	dsb	sy
 8002e28:	f3bf 8f6f 	isb	sy
 8002e2c:	e00a      	b.n	8002e44 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d007      	beq.n	8002e44 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002e34:	4b39      	ldr	r3, [pc, #228]	@ (8002f1c <xQueueGenericSend+0x200>)
 8002e36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	f3bf 8f4f 	dsb	sy
 8002e40:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002e44:	f002 f87a 	bl	8004f3c <vPortExitCritical>
				return pdPASS;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e063      	b.n	8002f14 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d103      	bne.n	8002e5a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e52:	f002 f873 	bl	8004f3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002e56:	2300      	movs	r3, #0
 8002e58:	e05c      	b.n	8002f14 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d106      	bne.n	8002e6e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e60:	f107 0314 	add.w	r3, r7, #20
 8002e64:	4618      	mov	r0, r3
 8002e66:	f001 f92f 	bl	80040c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e6e:	f002 f865 	bl	8004f3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e72:	f000 fdf5 	bl	8003a60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e76:	f002 f82f 	bl	8004ed8 <vPortEnterCritical>
 8002e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002e80:	b25b      	sxtb	r3, r3
 8002e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e86:	d103      	bne.n	8002e90 <xQueueGenericSend+0x174>
 8002e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002e96:	b25b      	sxtb	r3, r3
 8002e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e9c:	d103      	bne.n	8002ea6 <xQueueGenericSend+0x18a>
 8002e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ea6:	f002 f849 	bl	8004f3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002eaa:	1d3a      	adds	r2, r7, #4
 8002eac:	f107 0314 	add.w	r3, r7, #20
 8002eb0:	4611      	mov	r1, r2
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f001 f91e 	bl	80040f4 <xTaskCheckForTimeOut>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d124      	bne.n	8002f08 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002ebe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ec0:	f000 faca 	bl	8003458 <prvIsQueueFull>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d018      	beq.n	8002efc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ecc:	3310      	adds	r3, #16
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	4611      	mov	r1, r2
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f000 ffa0 	bl	8003e18 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002ed8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002eda:	f000 fa55 	bl	8003388 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002ede:	f000 fdcd 	bl	8003a7c <xTaskResumeAll>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f47f af7c 	bne.w	8002de2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002eea:	4b0c      	ldr	r3, [pc, #48]	@ (8002f1c <xQueueGenericSend+0x200>)
 8002eec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	f3bf 8f4f 	dsb	sy
 8002ef6:	f3bf 8f6f 	isb	sy
 8002efa:	e772      	b.n	8002de2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002efc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002efe:	f000 fa43 	bl	8003388 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f02:	f000 fdbb 	bl	8003a7c <xTaskResumeAll>
 8002f06:	e76c      	b.n	8002de2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002f08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f0a:	f000 fa3d 	bl	8003388 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f0e:	f000 fdb5 	bl	8003a7c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002f12:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3738      	adds	r7, #56	@ 0x38
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	e000ed04 	.word	0xe000ed04

08002f20 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b090      	sub	sp, #64	@ 0x40
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
 8002f2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d10b      	bne.n	8002f50 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f3c:	f383 8811 	msr	BASEPRI, r3
 8002f40:	f3bf 8f6f 	isb	sy
 8002f44:	f3bf 8f4f 	dsb	sy
 8002f48:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002f4a:	bf00      	nop
 8002f4c:	bf00      	nop
 8002f4e:	e7fd      	b.n	8002f4c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d103      	bne.n	8002f5e <xQueueGenericSendFromISR+0x3e>
 8002f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <xQueueGenericSendFromISR+0x42>
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e000      	b.n	8002f64 <xQueueGenericSendFromISR+0x44>
 8002f62:	2300      	movs	r3, #0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10b      	bne.n	8002f80 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f6c:	f383 8811 	msr	BASEPRI, r3
 8002f70:	f3bf 8f6f 	isb	sy
 8002f74:	f3bf 8f4f 	dsb	sy
 8002f78:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002f7a:	bf00      	nop
 8002f7c:	bf00      	nop
 8002f7e:	e7fd      	b.n	8002f7c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d103      	bne.n	8002f8e <xQueueGenericSendFromISR+0x6e>
 8002f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d101      	bne.n	8002f92 <xQueueGenericSendFromISR+0x72>
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e000      	b.n	8002f94 <xQueueGenericSendFromISR+0x74>
 8002f92:	2300      	movs	r3, #0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d10b      	bne.n	8002fb0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f9c:	f383 8811 	msr	BASEPRI, r3
 8002fa0:	f3bf 8f6f 	isb	sy
 8002fa4:	f3bf 8f4f 	dsb	sy
 8002fa8:	623b      	str	r3, [r7, #32]
}
 8002faa:	bf00      	nop
 8002fac:	bf00      	nop
 8002fae:	e7fd      	b.n	8002fac <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002fb0:	f002 f872 	bl	8005098 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002fb4:	f3ef 8211 	mrs	r2, BASEPRI
 8002fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fbc:	f383 8811 	msr	BASEPRI, r3
 8002fc0:	f3bf 8f6f 	isb	sy
 8002fc4:	f3bf 8f4f 	dsb	sy
 8002fc8:	61fa      	str	r2, [r7, #28]
 8002fca:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002fcc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002fce:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fd2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d302      	bcc.n	8002fe2 <xQueueGenericSendFromISR+0xc2>
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d12f      	bne.n	8003042 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fe4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002fe8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	68b9      	ldr	r1, [r7, #8]
 8002ff6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002ff8:	f000 f936 	bl	8003268 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002ffc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003004:	d112      	bne.n	800302c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300a:	2b00      	cmp	r3, #0
 800300c:	d016      	beq.n	800303c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800300e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003010:	3324      	adds	r3, #36	@ 0x24
 8003012:	4618      	mov	r0, r3
 8003014:	f000 ff90 	bl	8003f38 <xTaskRemoveFromEventList>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00e      	beq.n	800303c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00b      	beq.n	800303c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	601a      	str	r2, [r3, #0]
 800302a:	e007      	b.n	800303c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800302c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003030:	3301      	adds	r3, #1
 8003032:	b2db      	uxtb	r3, r3
 8003034:	b25a      	sxtb	r2, r3
 8003036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003038:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800303c:	2301      	movs	r3, #1
 800303e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003040:	e001      	b.n	8003046 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003042:	2300      	movs	r3, #0
 8003044:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003048:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003050:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003052:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003054:	4618      	mov	r0, r3
 8003056:	3740      	adds	r7, #64	@ 0x40
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b08c      	sub	sp, #48	@ 0x30
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003068:	2300      	movs	r3, #0
 800306a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10b      	bne.n	800308e <xQueueReceive+0x32>
	__asm volatile
 8003076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800307a:	f383 8811 	msr	BASEPRI, r3
 800307e:	f3bf 8f6f 	isb	sy
 8003082:	f3bf 8f4f 	dsb	sy
 8003086:	623b      	str	r3, [r7, #32]
}
 8003088:	bf00      	nop
 800308a:	bf00      	nop
 800308c:	e7fd      	b.n	800308a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d103      	bne.n	800309c <xQueueReceive+0x40>
 8003094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003098:	2b00      	cmp	r3, #0
 800309a:	d101      	bne.n	80030a0 <xQueueReceive+0x44>
 800309c:	2301      	movs	r3, #1
 800309e:	e000      	b.n	80030a2 <xQueueReceive+0x46>
 80030a0:	2300      	movs	r3, #0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10b      	bne.n	80030be <xQueueReceive+0x62>
	__asm volatile
 80030a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030aa:	f383 8811 	msr	BASEPRI, r3
 80030ae:	f3bf 8f6f 	isb	sy
 80030b2:	f3bf 8f4f 	dsb	sy
 80030b6:	61fb      	str	r3, [r7, #28]
}
 80030b8:	bf00      	nop
 80030ba:	bf00      	nop
 80030bc:	e7fd      	b.n	80030ba <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030be:	f001 f965 	bl	800438c <xTaskGetSchedulerState>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d102      	bne.n	80030ce <xQueueReceive+0x72>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <xQueueReceive+0x76>
 80030ce:	2301      	movs	r3, #1
 80030d0:	e000      	b.n	80030d4 <xQueueReceive+0x78>
 80030d2:	2300      	movs	r3, #0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10b      	bne.n	80030f0 <xQueueReceive+0x94>
	__asm volatile
 80030d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030dc:	f383 8811 	msr	BASEPRI, r3
 80030e0:	f3bf 8f6f 	isb	sy
 80030e4:	f3bf 8f4f 	dsb	sy
 80030e8:	61bb      	str	r3, [r7, #24]
}
 80030ea:	bf00      	nop
 80030ec:	bf00      	nop
 80030ee:	e7fd      	b.n	80030ec <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80030f0:	f001 fef2 	bl	8004ed8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030f8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d01f      	beq.n	8003140 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003100:	68b9      	ldr	r1, [r7, #8]
 8003102:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003104:	f000 f91a 	bl	800333c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800310a:	1e5a      	subs	r2, r3, #1
 800310c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800310e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00f      	beq.n	8003138 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800311a:	3310      	adds	r3, #16
 800311c:	4618      	mov	r0, r3
 800311e:	f000 ff0b 	bl	8003f38 <xTaskRemoveFromEventList>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d007      	beq.n	8003138 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003128:	4b3c      	ldr	r3, [pc, #240]	@ (800321c <xQueueReceive+0x1c0>)
 800312a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	f3bf 8f4f 	dsb	sy
 8003134:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003138:	f001 ff00 	bl	8004f3c <vPortExitCritical>
				return pdPASS;
 800313c:	2301      	movs	r3, #1
 800313e:	e069      	b.n	8003214 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d103      	bne.n	800314e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003146:	f001 fef9 	bl	8004f3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800314a:	2300      	movs	r3, #0
 800314c:	e062      	b.n	8003214 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800314e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003150:	2b00      	cmp	r3, #0
 8003152:	d106      	bne.n	8003162 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003154:	f107 0310 	add.w	r3, r7, #16
 8003158:	4618      	mov	r0, r3
 800315a:	f000 ffb5 	bl	80040c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800315e:	2301      	movs	r3, #1
 8003160:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003162:	f001 feeb 	bl	8004f3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003166:	f000 fc7b 	bl	8003a60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800316a:	f001 feb5 	bl	8004ed8 <vPortEnterCritical>
 800316e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003170:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003174:	b25b      	sxtb	r3, r3
 8003176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800317a:	d103      	bne.n	8003184 <xQueueReceive+0x128>
 800317c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800317e:	2200      	movs	r2, #0
 8003180:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003186:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800318a:	b25b      	sxtb	r3, r3
 800318c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003190:	d103      	bne.n	800319a <xQueueReceive+0x13e>
 8003192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800319a:	f001 fecf 	bl	8004f3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800319e:	1d3a      	adds	r2, r7, #4
 80031a0:	f107 0310 	add.w	r3, r7, #16
 80031a4:	4611      	mov	r1, r2
 80031a6:	4618      	mov	r0, r3
 80031a8:	f000 ffa4 	bl	80040f4 <xTaskCheckForTimeOut>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d123      	bne.n	80031fa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031b4:	f000 f93a 	bl	800342c <prvIsQueueEmpty>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d017      	beq.n	80031ee <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80031be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031c0:	3324      	adds	r3, #36	@ 0x24
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	4611      	mov	r1, r2
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 fe26 	bl	8003e18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80031cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031ce:	f000 f8db 	bl	8003388 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80031d2:	f000 fc53 	bl	8003a7c <xTaskResumeAll>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d189      	bne.n	80030f0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80031dc:	4b0f      	ldr	r3, [pc, #60]	@ (800321c <xQueueReceive+0x1c0>)
 80031de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	f3bf 8f4f 	dsb	sy
 80031e8:	f3bf 8f6f 	isb	sy
 80031ec:	e780      	b.n	80030f0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80031ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031f0:	f000 f8ca 	bl	8003388 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031f4:	f000 fc42 	bl	8003a7c <xTaskResumeAll>
 80031f8:	e77a      	b.n	80030f0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80031fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031fc:	f000 f8c4 	bl	8003388 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003200:	f000 fc3c 	bl	8003a7c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003204:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003206:	f000 f911 	bl	800342c <prvIsQueueEmpty>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	f43f af6f 	beq.w	80030f0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003212:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003214:	4618      	mov	r0, r3
 8003216:	3730      	adds	r7, #48	@ 0x30
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	e000ed04 	.word	0xe000ed04

08003220 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10b      	bne.n	800324a <vQueueDelete+0x2a>
	__asm volatile
 8003232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003236:	f383 8811 	msr	BASEPRI, r3
 800323a:	f3bf 8f6f 	isb	sy
 800323e:	f3bf 8f4f 	dsb	sy
 8003242:	60bb      	str	r3, [r7, #8]
}
 8003244:	bf00      	nop
 8003246:	bf00      	nop
 8003248:	e7fd      	b.n	8003246 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f000 f946 	bl	80034dc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8003256:	2b00      	cmp	r3, #0
 8003258:	d102      	bne.n	8003260 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f002 f82c 	bl	80052b8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8003260:	bf00      	nop
 8003262:	3710      	adds	r7, #16
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003274:	2300      	movs	r3, #0
 8003276:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800327c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10d      	bne.n	80032a2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d14d      	bne.n	800332a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	4618      	mov	r0, r3
 8003294:	f001 f898 	bl	80043c8 <xTaskPriorityDisinherit>
 8003298:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2200      	movs	r2, #0
 800329e:	609a      	str	r2, [r3, #8]
 80032a0:	e043      	b.n	800332a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d119      	bne.n	80032dc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6858      	ldr	r0, [r3, #4]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b0:	461a      	mov	r2, r3
 80032b2:	68b9      	ldr	r1, [r7, #8]
 80032b4:	f002 f9a4 	bl	8005600 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	685a      	ldr	r2, [r3, #4]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c0:	441a      	add	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d32b      	bcc.n	800332a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	605a      	str	r2, [r3, #4]
 80032da:	e026      	b.n	800332a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	68d8      	ldr	r0, [r3, #12]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e4:	461a      	mov	r2, r3
 80032e6:	68b9      	ldr	r1, [r7, #8]
 80032e8:	f002 f98a 	bl	8005600 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	68da      	ldr	r2, [r3, #12]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f4:	425b      	negs	r3, r3
 80032f6:	441a      	add	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	68da      	ldr	r2, [r3, #12]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	429a      	cmp	r2, r3
 8003306:	d207      	bcs.n	8003318 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003310:	425b      	negs	r3, r3
 8003312:	441a      	add	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b02      	cmp	r3, #2
 800331c:	d105      	bne.n	800332a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d002      	beq.n	800332a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	3b01      	subs	r3, #1
 8003328:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1c5a      	adds	r2, r3, #1
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003332:	697b      	ldr	r3, [r7, #20]
}
 8003334:	4618      	mov	r0, r3
 8003336:	3718      	adds	r7, #24
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334a:	2b00      	cmp	r3, #0
 800334c:	d018      	beq.n	8003380 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68da      	ldr	r2, [r3, #12]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003356:	441a      	add	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	68da      	ldr	r2, [r3, #12]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	429a      	cmp	r2, r3
 8003366:	d303      	bcc.n	8003370 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68d9      	ldr	r1, [r3, #12]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003378:	461a      	mov	r2, r3
 800337a:	6838      	ldr	r0, [r7, #0]
 800337c:	f002 f940 	bl	8005600 <memcpy>
	}
}
 8003380:	bf00      	nop
 8003382:	3708      	adds	r7, #8
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003390:	f001 fda2 	bl	8004ed8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800339a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800339c:	e011      	b.n	80033c2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d012      	beq.n	80033cc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	3324      	adds	r3, #36	@ 0x24
 80033aa:	4618      	mov	r0, r3
 80033ac:	f000 fdc4 	bl	8003f38 <xTaskRemoveFromEventList>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80033b6:	f000 ff01 	bl	80041bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80033ba:	7bfb      	ldrb	r3, [r7, #15]
 80033bc:	3b01      	subs	r3, #1
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80033c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	dce9      	bgt.n	800339e <prvUnlockQueue+0x16>
 80033ca:	e000      	b.n	80033ce <prvUnlockQueue+0x46>
					break;
 80033cc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	22ff      	movs	r2, #255	@ 0xff
 80033d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80033d6:	f001 fdb1 	bl	8004f3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80033da:	f001 fd7d 	bl	8004ed8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80033e4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033e6:	e011      	b.n	800340c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d012      	beq.n	8003416 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	3310      	adds	r3, #16
 80033f4:	4618      	mov	r0, r3
 80033f6:	f000 fd9f 	bl	8003f38 <xTaskRemoveFromEventList>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003400:	f000 fedc 	bl	80041bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003404:	7bbb      	ldrb	r3, [r7, #14]
 8003406:	3b01      	subs	r3, #1
 8003408:	b2db      	uxtb	r3, r3
 800340a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800340c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003410:	2b00      	cmp	r3, #0
 8003412:	dce9      	bgt.n	80033e8 <prvUnlockQueue+0x60>
 8003414:	e000      	b.n	8003418 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003416:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	22ff      	movs	r2, #255	@ 0xff
 800341c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003420:	f001 fd8c 	bl	8004f3c <vPortExitCritical>
}
 8003424:	bf00      	nop
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003434:	f001 fd50 	bl	8004ed8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800343c:	2b00      	cmp	r3, #0
 800343e:	d102      	bne.n	8003446 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003440:	2301      	movs	r3, #1
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	e001      	b.n	800344a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003446:	2300      	movs	r3, #0
 8003448:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800344a:	f001 fd77 	bl	8004f3c <vPortExitCritical>

	return xReturn;
 800344e:	68fb      	ldr	r3, [r7, #12]
}
 8003450:	4618      	mov	r0, r3
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003460:	f001 fd3a 	bl	8004ed8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800346c:	429a      	cmp	r2, r3
 800346e:	d102      	bne.n	8003476 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003470:	2301      	movs	r3, #1
 8003472:	60fb      	str	r3, [r7, #12]
 8003474:	e001      	b.n	800347a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003476:	2300      	movs	r3, #0
 8003478:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800347a:	f001 fd5f 	bl	8004f3c <vPortExitCritical>

	return xReturn;
 800347e:	68fb      	ldr	r3, [r7, #12]
}
 8003480:	4618      	mov	r0, r3
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003492:	2300      	movs	r3, #0
 8003494:	60fb      	str	r3, [r7, #12]
 8003496:	e014      	b.n	80034c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003498:	4a0f      	ldr	r2, [pc, #60]	@ (80034d8 <vQueueAddToRegistry+0x50>)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10b      	bne.n	80034bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80034a4:	490c      	ldr	r1, [pc, #48]	@ (80034d8 <vQueueAddToRegistry+0x50>)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80034ae:	4a0a      	ldr	r2, [pc, #40]	@ (80034d8 <vQueueAddToRegistry+0x50>)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	4413      	add	r3, r2
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80034ba:	e006      	b.n	80034ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	3301      	adds	r3, #1
 80034c0:	60fb      	str	r3, [r7, #12]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2b07      	cmp	r3, #7
 80034c6:	d9e7      	bls.n	8003498 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80034c8:	bf00      	nop
 80034ca:	bf00      	nop
 80034cc:	3714      	adds	r7, #20
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	20000838 	.word	0x20000838

080034dc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80034e4:	2300      	movs	r3, #0
 80034e6:	60fb      	str	r3, [r7, #12]
 80034e8:	e016      	b.n	8003518 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80034ea:	4a10      	ldr	r2, [pc, #64]	@ (800352c <vQueueUnregisterQueue+0x50>)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	4413      	add	r3, r2
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d10b      	bne.n	8003512 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80034fa:	4a0c      	ldr	r2, [pc, #48]	@ (800352c <vQueueUnregisterQueue+0x50>)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2100      	movs	r1, #0
 8003500:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003504:	4a09      	ldr	r2, [pc, #36]	@ (800352c <vQueueUnregisterQueue+0x50>)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	00db      	lsls	r3, r3, #3
 800350a:	4413      	add	r3, r2
 800350c:	2200      	movs	r2, #0
 800350e:	605a      	str	r2, [r3, #4]
				break;
 8003510:	e006      	b.n	8003520 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	3301      	adds	r3, #1
 8003516:	60fb      	str	r3, [r7, #12]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2b07      	cmp	r3, #7
 800351c:	d9e5      	bls.n	80034ea <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800351e:	bf00      	nop
 8003520:	bf00      	nop
 8003522:	3714      	adds	r7, #20
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr
 800352c:	20000838 	.word	0x20000838

08003530 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003540:	f001 fcca 	bl	8004ed8 <vPortEnterCritical>
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800354a:	b25b      	sxtb	r3, r3
 800354c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003550:	d103      	bne.n	800355a <vQueueWaitForMessageRestricted+0x2a>
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003560:	b25b      	sxtb	r3, r3
 8003562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003566:	d103      	bne.n	8003570 <vQueueWaitForMessageRestricted+0x40>
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003570:	f001 fce4 	bl	8004f3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003578:	2b00      	cmp	r3, #0
 800357a:	d106      	bne.n	800358a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	3324      	adds	r3, #36	@ 0x24
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	68b9      	ldr	r1, [r7, #8]
 8003584:	4618      	mov	r0, r3
 8003586:	f000 fcab 	bl	8003ee0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800358a:	6978      	ldr	r0, [r7, #20]
 800358c:	f7ff fefc 	bl	8003388 <prvUnlockQueue>
	}
 8003590:	bf00      	nop
 8003592:	3718      	adds	r7, #24
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003598:	b580      	push	{r7, lr}
 800359a:	b08e      	sub	sp, #56	@ 0x38
 800359c:	af04      	add	r7, sp, #16
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
 80035a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80035a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d10b      	bne.n	80035c4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80035ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035b0:	f383 8811 	msr	BASEPRI, r3
 80035b4:	f3bf 8f6f 	isb	sy
 80035b8:	f3bf 8f4f 	dsb	sy
 80035bc:	623b      	str	r3, [r7, #32]
}
 80035be:	bf00      	nop
 80035c0:	bf00      	nop
 80035c2:	e7fd      	b.n	80035c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80035c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10b      	bne.n	80035e2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80035ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ce:	f383 8811 	msr	BASEPRI, r3
 80035d2:	f3bf 8f6f 	isb	sy
 80035d6:	f3bf 8f4f 	dsb	sy
 80035da:	61fb      	str	r3, [r7, #28]
}
 80035dc:	bf00      	nop
 80035de:	bf00      	nop
 80035e0:	e7fd      	b.n	80035de <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80035e2:	23a8      	movs	r3, #168	@ 0xa8
 80035e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	2ba8      	cmp	r3, #168	@ 0xa8
 80035ea:	d00b      	beq.n	8003604 <xTaskCreateStatic+0x6c>
	__asm volatile
 80035ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035f0:	f383 8811 	msr	BASEPRI, r3
 80035f4:	f3bf 8f6f 	isb	sy
 80035f8:	f3bf 8f4f 	dsb	sy
 80035fc:	61bb      	str	r3, [r7, #24]
}
 80035fe:	bf00      	nop
 8003600:	bf00      	nop
 8003602:	e7fd      	b.n	8003600 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003604:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003608:	2b00      	cmp	r3, #0
 800360a:	d01e      	beq.n	800364a <xTaskCreateStatic+0xb2>
 800360c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800360e:	2b00      	cmp	r3, #0
 8003610:	d01b      	beq.n	800364a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003614:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003618:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800361a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800361c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361e:	2202      	movs	r2, #2
 8003620:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003624:	2300      	movs	r3, #0
 8003626:	9303      	str	r3, [sp, #12]
 8003628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800362a:	9302      	str	r3, [sp, #8]
 800362c:	f107 0314 	add.w	r3, r7, #20
 8003630:	9301      	str	r3, [sp, #4]
 8003632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	68b9      	ldr	r1, [r7, #8]
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f000 f851 	bl	80036e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003642:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003644:	f000 f8f6 	bl	8003834 <prvAddNewTaskToReadyList>
 8003648:	e001      	b.n	800364e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800364a:	2300      	movs	r3, #0
 800364c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800364e:	697b      	ldr	r3, [r7, #20]
	}
 8003650:	4618      	mov	r0, r3
 8003652:	3728      	adds	r7, #40	@ 0x28
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003658:	b580      	push	{r7, lr}
 800365a:	b08c      	sub	sp, #48	@ 0x30
 800365c:	af04      	add	r7, sp, #16
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	603b      	str	r3, [r7, #0]
 8003664:	4613      	mov	r3, r2
 8003666:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003668:	88fb      	ldrh	r3, [r7, #6]
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4618      	mov	r0, r3
 800366e:	f001 fd55 	bl	800511c <pvPortMalloc>
 8003672:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00e      	beq.n	8003698 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800367a:	20a8      	movs	r0, #168	@ 0xa8
 800367c:	f001 fd4e 	bl	800511c <pvPortMalloc>
 8003680:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d003      	beq.n	8003690 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	631a      	str	r2, [r3, #48]	@ 0x30
 800368e:	e005      	b.n	800369c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003690:	6978      	ldr	r0, [r7, #20]
 8003692:	f001 fe11 	bl	80052b8 <vPortFree>
 8003696:	e001      	b.n	800369c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003698:	2300      	movs	r3, #0
 800369a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d017      	beq.n	80036d2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80036aa:	88fa      	ldrh	r2, [r7, #6]
 80036ac:	2300      	movs	r3, #0
 80036ae:	9303      	str	r3, [sp, #12]
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	9302      	str	r3, [sp, #8]
 80036b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036b6:	9301      	str	r3, [sp, #4]
 80036b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ba:	9300      	str	r3, [sp, #0]
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	68b9      	ldr	r1, [r7, #8]
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f000 f80f 	bl	80036e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036c6:	69f8      	ldr	r0, [r7, #28]
 80036c8:	f000 f8b4 	bl	8003834 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80036cc:	2301      	movs	r3, #1
 80036ce:	61bb      	str	r3, [r7, #24]
 80036d0:	e002      	b.n	80036d8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80036d2:	f04f 33ff 	mov.w	r3, #4294967295
 80036d6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80036d8:	69bb      	ldr	r3, [r7, #24]
	}
 80036da:	4618      	mov	r0, r3
 80036dc:	3720      	adds	r7, #32
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
	...

080036e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b088      	sub	sp, #32
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
 80036f0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80036f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	461a      	mov	r2, r3
 80036fc:	21a5      	movs	r1, #165	@ 0xa5
 80036fe:	f001 fefb 	bl	80054f8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003704:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800370c:	3b01      	subs	r3, #1
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4413      	add	r3, r2
 8003712:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	f023 0307 	bic.w	r3, r3, #7
 800371a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	f003 0307 	and.w	r3, r3, #7
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00b      	beq.n	800373e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800372a:	f383 8811 	msr	BASEPRI, r3
 800372e:	f3bf 8f6f 	isb	sy
 8003732:	f3bf 8f4f 	dsb	sy
 8003736:	617b      	str	r3, [r7, #20]
}
 8003738:	bf00      	nop
 800373a:	bf00      	nop
 800373c:	e7fd      	b.n	800373a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d01f      	beq.n	8003784 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003744:	2300      	movs	r3, #0
 8003746:	61fb      	str	r3, [r7, #28]
 8003748:	e012      	b.n	8003770 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800374a:	68ba      	ldr	r2, [r7, #8]
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	4413      	add	r3, r2
 8003750:	7819      	ldrb	r1, [r3, #0]
 8003752:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	4413      	add	r3, r2
 8003758:	3334      	adds	r3, #52	@ 0x34
 800375a:	460a      	mov	r2, r1
 800375c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800375e:	68ba      	ldr	r2, [r7, #8]
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	4413      	add	r3, r2
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d006      	beq.n	8003778 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	3301      	adds	r3, #1
 800376e:	61fb      	str	r3, [r7, #28]
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	2b0f      	cmp	r3, #15
 8003774:	d9e9      	bls.n	800374a <prvInitialiseNewTask+0x66>
 8003776:	e000      	b.n	800377a <prvInitialiseNewTask+0x96>
			{
				break;
 8003778:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800377a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003782:	e003      	b.n	800378c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003786:	2200      	movs	r2, #0
 8003788:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800378c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800378e:	2b37      	cmp	r3, #55	@ 0x37
 8003790:	d901      	bls.n	8003796 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003792:	2337      	movs	r3, #55	@ 0x37
 8003794:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003798:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800379a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800379c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800379e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80037a0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80037a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a4:	2200      	movs	r2, #0
 80037a6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80037a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037aa:	3304      	adds	r3, #4
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7ff f86d 	bl	800288c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80037b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b4:	3318      	adds	r3, #24
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7ff f868 	bl	800288c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80037bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037c0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037c4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80037c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80037cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037d0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80037d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d4:	2200      	movs	r2, #0
 80037d6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80037da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80037e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e4:	3354      	adds	r3, #84	@ 0x54
 80037e6:	224c      	movs	r2, #76	@ 0x4c
 80037e8:	2100      	movs	r1, #0
 80037ea:	4618      	mov	r0, r3
 80037ec:	f001 fe84 	bl	80054f8 <memset>
 80037f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f2:	4a0d      	ldr	r2, [pc, #52]	@ (8003828 <prvInitialiseNewTask+0x144>)
 80037f4:	659a      	str	r2, [r3, #88]	@ 0x58
 80037f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f8:	4a0c      	ldr	r2, [pc, #48]	@ (800382c <prvInitialiseNewTask+0x148>)
 80037fa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80037fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037fe:	4a0c      	ldr	r2, [pc, #48]	@ (8003830 <prvInitialiseNewTask+0x14c>)
 8003800:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	68f9      	ldr	r1, [r7, #12]
 8003806:	69b8      	ldr	r0, [r7, #24]
 8003808:	f001 fa34 	bl	8004c74 <pxPortInitialiseStack>
 800380c:	4602      	mov	r2, r0
 800380e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003810:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003814:	2b00      	cmp	r3, #0
 8003816:	d002      	beq.n	800381e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800381a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800381c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800381e:	bf00      	nop
 8003820:	3720      	adds	r7, #32
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	20004acc 	.word	0x20004acc
 800382c:	20004b34 	.word	0x20004b34
 8003830:	20004b9c 	.word	0x20004b9c

08003834 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800383c:	f001 fb4c 	bl	8004ed8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003840:	4b2d      	ldr	r3, [pc, #180]	@ (80038f8 <prvAddNewTaskToReadyList+0xc4>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	3301      	adds	r3, #1
 8003846:	4a2c      	ldr	r2, [pc, #176]	@ (80038f8 <prvAddNewTaskToReadyList+0xc4>)
 8003848:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800384a:	4b2c      	ldr	r3, [pc, #176]	@ (80038fc <prvAddNewTaskToReadyList+0xc8>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d109      	bne.n	8003866 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003852:	4a2a      	ldr	r2, [pc, #168]	@ (80038fc <prvAddNewTaskToReadyList+0xc8>)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003858:	4b27      	ldr	r3, [pc, #156]	@ (80038f8 <prvAddNewTaskToReadyList+0xc4>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d110      	bne.n	8003882 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003860:	f000 fcd0 	bl	8004204 <prvInitialiseTaskLists>
 8003864:	e00d      	b.n	8003882 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003866:	4b26      	ldr	r3, [pc, #152]	@ (8003900 <prvAddNewTaskToReadyList+0xcc>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d109      	bne.n	8003882 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800386e:	4b23      	ldr	r3, [pc, #140]	@ (80038fc <prvAddNewTaskToReadyList+0xc8>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003878:	429a      	cmp	r2, r3
 800387a:	d802      	bhi.n	8003882 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800387c:	4a1f      	ldr	r2, [pc, #124]	@ (80038fc <prvAddNewTaskToReadyList+0xc8>)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003882:	4b20      	ldr	r3, [pc, #128]	@ (8003904 <prvAddNewTaskToReadyList+0xd0>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	3301      	adds	r3, #1
 8003888:	4a1e      	ldr	r2, [pc, #120]	@ (8003904 <prvAddNewTaskToReadyList+0xd0>)
 800388a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800388c:	4b1d      	ldr	r3, [pc, #116]	@ (8003904 <prvAddNewTaskToReadyList+0xd0>)
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003898:	4b1b      	ldr	r3, [pc, #108]	@ (8003908 <prvAddNewTaskToReadyList+0xd4>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	429a      	cmp	r2, r3
 800389e:	d903      	bls.n	80038a8 <prvAddNewTaskToReadyList+0x74>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a4:	4a18      	ldr	r2, [pc, #96]	@ (8003908 <prvAddNewTaskToReadyList+0xd4>)
 80038a6:	6013      	str	r3, [r2, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038ac:	4613      	mov	r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	4413      	add	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4a15      	ldr	r2, [pc, #84]	@ (800390c <prvAddNewTaskToReadyList+0xd8>)
 80038b6:	441a      	add	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	3304      	adds	r3, #4
 80038bc:	4619      	mov	r1, r3
 80038be:	4610      	mov	r0, r2
 80038c0:	f7fe fff1 	bl	80028a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80038c4:	f001 fb3a 	bl	8004f3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80038c8:	4b0d      	ldr	r3, [pc, #52]	@ (8003900 <prvAddNewTaskToReadyList+0xcc>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00e      	beq.n	80038ee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80038d0:	4b0a      	ldr	r3, [pc, #40]	@ (80038fc <prvAddNewTaskToReadyList+0xc8>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038da:	429a      	cmp	r2, r3
 80038dc:	d207      	bcs.n	80038ee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80038de:	4b0c      	ldr	r3, [pc, #48]	@ (8003910 <prvAddNewTaskToReadyList+0xdc>)
 80038e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038e4:	601a      	str	r2, [r3, #0]
 80038e6:	f3bf 8f4f 	dsb	sy
 80038ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038ee:	bf00      	nop
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	20000d4c 	.word	0x20000d4c
 80038fc:	20000878 	.word	0x20000878
 8003900:	20000d58 	.word	0x20000d58
 8003904:	20000d68 	.word	0x20000d68
 8003908:	20000d54 	.word	0x20000d54
 800390c:	2000087c 	.word	0x2000087c
 8003910:	e000ed04 	.word	0xe000ed04

08003914 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800391c:	2300      	movs	r3, #0
 800391e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d018      	beq.n	8003958 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003926:	4b14      	ldr	r3, [pc, #80]	@ (8003978 <vTaskDelay+0x64>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00b      	beq.n	8003946 <vTaskDelay+0x32>
	__asm volatile
 800392e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003932:	f383 8811 	msr	BASEPRI, r3
 8003936:	f3bf 8f6f 	isb	sy
 800393a:	f3bf 8f4f 	dsb	sy
 800393e:	60bb      	str	r3, [r7, #8]
}
 8003940:	bf00      	nop
 8003942:	bf00      	nop
 8003944:	e7fd      	b.n	8003942 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003946:	f000 f88b 	bl	8003a60 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800394a:	2100      	movs	r1, #0
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 fdc3 	bl	80044d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003952:	f000 f893 	bl	8003a7c <xTaskResumeAll>
 8003956:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d107      	bne.n	800396e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800395e:	4b07      	ldr	r3, [pc, #28]	@ (800397c <vTaskDelay+0x68>)
 8003960:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	f3bf 8f4f 	dsb	sy
 800396a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800396e:	bf00      	nop
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	20000d74 	.word	0x20000d74
 800397c:	e000ed04 	.word	0xe000ed04

08003980 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b08a      	sub	sp, #40	@ 0x28
 8003984:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003986:	2300      	movs	r3, #0
 8003988:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800398a:	2300      	movs	r3, #0
 800398c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800398e:	463a      	mov	r2, r7
 8003990:	1d39      	adds	r1, r7, #4
 8003992:	f107 0308 	add.w	r3, r7, #8
 8003996:	4618      	mov	r0, r3
 8003998:	f7fe fd2e 	bl	80023f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800399c:	6839      	ldr	r1, [r7, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	68ba      	ldr	r2, [r7, #8]
 80039a2:	9202      	str	r2, [sp, #8]
 80039a4:	9301      	str	r3, [sp, #4]
 80039a6:	2300      	movs	r3, #0
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	2300      	movs	r3, #0
 80039ac:	460a      	mov	r2, r1
 80039ae:	4924      	ldr	r1, [pc, #144]	@ (8003a40 <vTaskStartScheduler+0xc0>)
 80039b0:	4824      	ldr	r0, [pc, #144]	@ (8003a44 <vTaskStartScheduler+0xc4>)
 80039b2:	f7ff fdf1 	bl	8003598 <xTaskCreateStatic>
 80039b6:	4603      	mov	r3, r0
 80039b8:	4a23      	ldr	r2, [pc, #140]	@ (8003a48 <vTaskStartScheduler+0xc8>)
 80039ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80039bc:	4b22      	ldr	r3, [pc, #136]	@ (8003a48 <vTaskStartScheduler+0xc8>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d002      	beq.n	80039ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80039c4:	2301      	movs	r3, #1
 80039c6:	617b      	str	r3, [r7, #20]
 80039c8:	e001      	b.n	80039ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80039ca:	2300      	movs	r3, #0
 80039cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d102      	bne.n	80039da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80039d4:	f000 fdd4 	bl	8004580 <xTimerCreateTimerTask>
 80039d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d11b      	bne.n	8003a18 <vTaskStartScheduler+0x98>
	__asm volatile
 80039e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039e4:	f383 8811 	msr	BASEPRI, r3
 80039e8:	f3bf 8f6f 	isb	sy
 80039ec:	f3bf 8f4f 	dsb	sy
 80039f0:	613b      	str	r3, [r7, #16]
}
 80039f2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80039f4:	4b15      	ldr	r3, [pc, #84]	@ (8003a4c <vTaskStartScheduler+0xcc>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	3354      	adds	r3, #84	@ 0x54
 80039fa:	4a15      	ldr	r2, [pc, #84]	@ (8003a50 <vTaskStartScheduler+0xd0>)
 80039fc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80039fe:	4b15      	ldr	r3, [pc, #84]	@ (8003a54 <vTaskStartScheduler+0xd4>)
 8003a00:	f04f 32ff 	mov.w	r2, #4294967295
 8003a04:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a06:	4b14      	ldr	r3, [pc, #80]	@ (8003a58 <vTaskStartScheduler+0xd8>)
 8003a08:	2201      	movs	r2, #1
 8003a0a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a0c:	4b13      	ldr	r3, [pc, #76]	@ (8003a5c <vTaskStartScheduler+0xdc>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a12:	f001 f9bd 	bl	8004d90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a16:	e00f      	b.n	8003a38 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1e:	d10b      	bne.n	8003a38 <vTaskStartScheduler+0xb8>
	__asm volatile
 8003a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a24:	f383 8811 	msr	BASEPRI, r3
 8003a28:	f3bf 8f6f 	isb	sy
 8003a2c:	f3bf 8f4f 	dsb	sy
 8003a30:	60fb      	str	r3, [r7, #12]
}
 8003a32:	bf00      	nop
 8003a34:	bf00      	nop
 8003a36:	e7fd      	b.n	8003a34 <vTaskStartScheduler+0xb4>
}
 8003a38:	bf00      	nop
 8003a3a:	3718      	adds	r7, #24
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	0800573c 	.word	0x0800573c
 8003a44:	080041d5 	.word	0x080041d5
 8003a48:	20000d70 	.word	0x20000d70
 8003a4c:	20000878 	.word	0x20000878
 8003a50:	20000010 	.word	0x20000010
 8003a54:	20000d6c 	.word	0x20000d6c
 8003a58:	20000d58 	.word	0x20000d58
 8003a5c:	20000d50 	.word	0x20000d50

08003a60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003a64:	4b04      	ldr	r3, [pc, #16]	@ (8003a78 <vTaskSuspendAll+0x18>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	3301      	adds	r3, #1
 8003a6a:	4a03      	ldr	r2, [pc, #12]	@ (8003a78 <vTaskSuspendAll+0x18>)
 8003a6c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003a6e:	bf00      	nop
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr
 8003a78:	20000d74 	.word	0x20000d74

08003a7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003a82:	2300      	movs	r3, #0
 8003a84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003a86:	2300      	movs	r3, #0
 8003a88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003a8a:	4b42      	ldr	r3, [pc, #264]	@ (8003b94 <xTaskResumeAll+0x118>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d10b      	bne.n	8003aaa <xTaskResumeAll+0x2e>
	__asm volatile
 8003a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a96:	f383 8811 	msr	BASEPRI, r3
 8003a9a:	f3bf 8f6f 	isb	sy
 8003a9e:	f3bf 8f4f 	dsb	sy
 8003aa2:	603b      	str	r3, [r7, #0]
}
 8003aa4:	bf00      	nop
 8003aa6:	bf00      	nop
 8003aa8:	e7fd      	b.n	8003aa6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003aaa:	f001 fa15 	bl	8004ed8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003aae:	4b39      	ldr	r3, [pc, #228]	@ (8003b94 <xTaskResumeAll+0x118>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	4a37      	ldr	r2, [pc, #220]	@ (8003b94 <xTaskResumeAll+0x118>)
 8003ab6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ab8:	4b36      	ldr	r3, [pc, #216]	@ (8003b94 <xTaskResumeAll+0x118>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d162      	bne.n	8003b86 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ac0:	4b35      	ldr	r3, [pc, #212]	@ (8003b98 <xTaskResumeAll+0x11c>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d05e      	beq.n	8003b86 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ac8:	e02f      	b.n	8003b2a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003aca:	4b34      	ldr	r3, [pc, #208]	@ (8003b9c <xTaskResumeAll+0x120>)
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	3318      	adds	r3, #24
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fe ff42 	bl	8002960 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	3304      	adds	r3, #4
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7fe ff3d 	bl	8002960 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003aea:	4b2d      	ldr	r3, [pc, #180]	@ (8003ba0 <xTaskResumeAll+0x124>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d903      	bls.n	8003afa <xTaskResumeAll+0x7e>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003af6:	4a2a      	ldr	r2, [pc, #168]	@ (8003ba0 <xTaskResumeAll+0x124>)
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003afe:	4613      	mov	r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	4413      	add	r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	4a27      	ldr	r2, [pc, #156]	@ (8003ba4 <xTaskResumeAll+0x128>)
 8003b08:	441a      	add	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	3304      	adds	r3, #4
 8003b0e:	4619      	mov	r1, r3
 8003b10:	4610      	mov	r0, r2
 8003b12:	f7fe fec8 	bl	80028a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b1a:	4b23      	ldr	r3, [pc, #140]	@ (8003ba8 <xTaskResumeAll+0x12c>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d302      	bcc.n	8003b2a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003b24:	4b21      	ldr	r3, [pc, #132]	@ (8003bac <xTaskResumeAll+0x130>)
 8003b26:	2201      	movs	r2, #1
 8003b28:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b2a:	4b1c      	ldr	r3, [pc, #112]	@ (8003b9c <xTaskResumeAll+0x120>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1cb      	bne.n	8003aca <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003b38:	f000 fc08 	bl	800434c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003b3c:	4b1c      	ldr	r3, [pc, #112]	@ (8003bb0 <xTaskResumeAll+0x134>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d010      	beq.n	8003b6a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003b48:	f000 f846 	bl	8003bd8 <xTaskIncrementTick>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d002      	beq.n	8003b58 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003b52:	4b16      	ldr	r3, [pc, #88]	@ (8003bac <xTaskResumeAll+0x130>)
 8003b54:	2201      	movs	r2, #1
 8003b56:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1f1      	bne.n	8003b48 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003b64:	4b12      	ldr	r3, [pc, #72]	@ (8003bb0 <xTaskResumeAll+0x134>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003b6a:	4b10      	ldr	r3, [pc, #64]	@ (8003bac <xTaskResumeAll+0x130>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d009      	beq.n	8003b86 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003b72:	2301      	movs	r3, #1
 8003b74:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003b76:	4b0f      	ldr	r3, [pc, #60]	@ (8003bb4 <xTaskResumeAll+0x138>)
 8003b78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b7c:	601a      	str	r2, [r3, #0]
 8003b7e:	f3bf 8f4f 	dsb	sy
 8003b82:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b86:	f001 f9d9 	bl	8004f3c <vPortExitCritical>

	return xAlreadyYielded;
 8003b8a:	68bb      	ldr	r3, [r7, #8]
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3710      	adds	r7, #16
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	20000d74 	.word	0x20000d74
 8003b98:	20000d4c 	.word	0x20000d4c
 8003b9c:	20000d0c 	.word	0x20000d0c
 8003ba0:	20000d54 	.word	0x20000d54
 8003ba4:	2000087c 	.word	0x2000087c
 8003ba8:	20000878 	.word	0x20000878
 8003bac:	20000d60 	.word	0x20000d60
 8003bb0:	20000d5c 	.word	0x20000d5c
 8003bb4:	e000ed04 	.word	0xe000ed04

08003bb8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003bbe:	4b05      	ldr	r3, [pc, #20]	@ (8003bd4 <xTaskGetTickCount+0x1c>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003bc4:	687b      	ldr	r3, [r7, #4]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	20000d50 	.word	0x20000d50

08003bd8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003bde:	2300      	movs	r3, #0
 8003be0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003be2:	4b4f      	ldr	r3, [pc, #316]	@ (8003d20 <xTaskIncrementTick+0x148>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f040 8090 	bne.w	8003d0c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003bec:	4b4d      	ldr	r3, [pc, #308]	@ (8003d24 <xTaskIncrementTick+0x14c>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003bf4:	4a4b      	ldr	r2, [pc, #300]	@ (8003d24 <xTaskIncrementTick+0x14c>)
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d121      	bne.n	8003c44 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003c00:	4b49      	ldr	r3, [pc, #292]	@ (8003d28 <xTaskIncrementTick+0x150>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00b      	beq.n	8003c22 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c0e:	f383 8811 	msr	BASEPRI, r3
 8003c12:	f3bf 8f6f 	isb	sy
 8003c16:	f3bf 8f4f 	dsb	sy
 8003c1a:	603b      	str	r3, [r7, #0]
}
 8003c1c:	bf00      	nop
 8003c1e:	bf00      	nop
 8003c20:	e7fd      	b.n	8003c1e <xTaskIncrementTick+0x46>
 8003c22:	4b41      	ldr	r3, [pc, #260]	@ (8003d28 <xTaskIncrementTick+0x150>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	60fb      	str	r3, [r7, #12]
 8003c28:	4b40      	ldr	r3, [pc, #256]	@ (8003d2c <xTaskIncrementTick+0x154>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a3e      	ldr	r2, [pc, #248]	@ (8003d28 <xTaskIncrementTick+0x150>)
 8003c2e:	6013      	str	r3, [r2, #0]
 8003c30:	4a3e      	ldr	r2, [pc, #248]	@ (8003d2c <xTaskIncrementTick+0x154>)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6013      	str	r3, [r2, #0]
 8003c36:	4b3e      	ldr	r3, [pc, #248]	@ (8003d30 <xTaskIncrementTick+0x158>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	4a3c      	ldr	r2, [pc, #240]	@ (8003d30 <xTaskIncrementTick+0x158>)
 8003c3e:	6013      	str	r3, [r2, #0]
 8003c40:	f000 fb84 	bl	800434c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c44:	4b3b      	ldr	r3, [pc, #236]	@ (8003d34 <xTaskIncrementTick+0x15c>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d349      	bcc.n	8003ce2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c4e:	4b36      	ldr	r3, [pc, #216]	@ (8003d28 <xTaskIncrementTick+0x150>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d104      	bne.n	8003c62 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c58:	4b36      	ldr	r3, [pc, #216]	@ (8003d34 <xTaskIncrementTick+0x15c>)
 8003c5a:	f04f 32ff 	mov.w	r2, #4294967295
 8003c5e:	601a      	str	r2, [r3, #0]
					break;
 8003c60:	e03f      	b.n	8003ce2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c62:	4b31      	ldr	r3, [pc, #196]	@ (8003d28 <xTaskIncrementTick+0x150>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d203      	bcs.n	8003c82 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003c7a:	4a2e      	ldr	r2, [pc, #184]	@ (8003d34 <xTaskIncrementTick+0x15c>)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003c80:	e02f      	b.n	8003ce2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	3304      	adds	r3, #4
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fe fe6a 	bl	8002960 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d004      	beq.n	8003c9e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	3318      	adds	r3, #24
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7fe fe61 	bl	8002960 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ca2:	4b25      	ldr	r3, [pc, #148]	@ (8003d38 <xTaskIncrementTick+0x160>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d903      	bls.n	8003cb2 <xTaskIncrementTick+0xda>
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cae:	4a22      	ldr	r2, [pc, #136]	@ (8003d38 <xTaskIncrementTick+0x160>)
 8003cb0:	6013      	str	r3, [r2, #0]
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	4413      	add	r3, r2
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	4a1f      	ldr	r2, [pc, #124]	@ (8003d3c <xTaskIncrementTick+0x164>)
 8003cc0:	441a      	add	r2, r3
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	3304      	adds	r3, #4
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	4610      	mov	r0, r2
 8003cca:	f7fe fdec 	bl	80028a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cd2:	4b1b      	ldr	r3, [pc, #108]	@ (8003d40 <xTaskIncrementTick+0x168>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d3b8      	bcc.n	8003c4e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ce0:	e7b5      	b.n	8003c4e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003ce2:	4b17      	ldr	r3, [pc, #92]	@ (8003d40 <xTaskIncrementTick+0x168>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ce8:	4914      	ldr	r1, [pc, #80]	@ (8003d3c <xTaskIncrementTick+0x164>)
 8003cea:	4613      	mov	r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	4413      	add	r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	440b      	add	r3, r1
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d901      	bls.n	8003cfe <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003cfe:	4b11      	ldr	r3, [pc, #68]	@ (8003d44 <xTaskIncrementTick+0x16c>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d007      	beq.n	8003d16 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003d06:	2301      	movs	r3, #1
 8003d08:	617b      	str	r3, [r7, #20]
 8003d0a:	e004      	b.n	8003d16 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003d0c:	4b0e      	ldr	r3, [pc, #56]	@ (8003d48 <xTaskIncrementTick+0x170>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	3301      	adds	r3, #1
 8003d12:	4a0d      	ldr	r2, [pc, #52]	@ (8003d48 <xTaskIncrementTick+0x170>)
 8003d14:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003d16:	697b      	ldr	r3, [r7, #20]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3718      	adds	r7, #24
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	20000d74 	.word	0x20000d74
 8003d24:	20000d50 	.word	0x20000d50
 8003d28:	20000d04 	.word	0x20000d04
 8003d2c:	20000d08 	.word	0x20000d08
 8003d30:	20000d64 	.word	0x20000d64
 8003d34:	20000d6c 	.word	0x20000d6c
 8003d38:	20000d54 	.word	0x20000d54
 8003d3c:	2000087c 	.word	0x2000087c
 8003d40:	20000878 	.word	0x20000878
 8003d44:	20000d60 	.word	0x20000d60
 8003d48:	20000d5c 	.word	0x20000d5c

08003d4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003d52:	4b2b      	ldr	r3, [pc, #172]	@ (8003e00 <vTaskSwitchContext+0xb4>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d003      	beq.n	8003d62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003d5a:	4b2a      	ldr	r3, [pc, #168]	@ (8003e04 <vTaskSwitchContext+0xb8>)
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003d60:	e047      	b.n	8003df2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8003d62:	4b28      	ldr	r3, [pc, #160]	@ (8003e04 <vTaskSwitchContext+0xb8>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d68:	4b27      	ldr	r3, [pc, #156]	@ (8003e08 <vTaskSwitchContext+0xbc>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	60fb      	str	r3, [r7, #12]
 8003d6e:	e011      	b.n	8003d94 <vTaskSwitchContext+0x48>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10b      	bne.n	8003d8e <vTaskSwitchContext+0x42>
	__asm volatile
 8003d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d7a:	f383 8811 	msr	BASEPRI, r3
 8003d7e:	f3bf 8f6f 	isb	sy
 8003d82:	f3bf 8f4f 	dsb	sy
 8003d86:	607b      	str	r3, [r7, #4]
}
 8003d88:	bf00      	nop
 8003d8a:	bf00      	nop
 8003d8c:	e7fd      	b.n	8003d8a <vTaskSwitchContext+0x3e>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	3b01      	subs	r3, #1
 8003d92:	60fb      	str	r3, [r7, #12]
 8003d94:	491d      	ldr	r1, [pc, #116]	@ (8003e0c <vTaskSwitchContext+0xc0>)
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4413      	add	r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	440b      	add	r3, r1
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d0e3      	beq.n	8003d70 <vTaskSwitchContext+0x24>
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	4613      	mov	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	4413      	add	r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	4a16      	ldr	r2, [pc, #88]	@ (8003e0c <vTaskSwitchContext+0xc0>)
 8003db4:	4413      	add	r3, r2
 8003db6:	60bb      	str	r3, [r7, #8]
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	605a      	str	r2, [r3, #4]
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	685a      	ldr	r2, [r3, #4]
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	3308      	adds	r3, #8
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d104      	bne.n	8003dd8 <vTaskSwitchContext+0x8c>
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	605a      	str	r2, [r3, #4]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	4a0c      	ldr	r2, [pc, #48]	@ (8003e10 <vTaskSwitchContext+0xc4>)
 8003de0:	6013      	str	r3, [r2, #0]
 8003de2:	4a09      	ldr	r2, [pc, #36]	@ (8003e08 <vTaskSwitchContext+0xbc>)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003de8:	4b09      	ldr	r3, [pc, #36]	@ (8003e10 <vTaskSwitchContext+0xc4>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	3354      	adds	r3, #84	@ 0x54
 8003dee:	4a09      	ldr	r2, [pc, #36]	@ (8003e14 <vTaskSwitchContext+0xc8>)
 8003df0:	6013      	str	r3, [r2, #0]
}
 8003df2:	bf00      	nop
 8003df4:	3714      	adds	r7, #20
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	20000d74 	.word	0x20000d74
 8003e04:	20000d60 	.word	0x20000d60
 8003e08:	20000d54 	.word	0x20000d54
 8003e0c:	2000087c 	.word	0x2000087c
 8003e10:	20000878 	.word	0x20000878
 8003e14:	20000010 	.word	0x20000010

08003e18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d10b      	bne.n	8003e40 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e2c:	f383 8811 	msr	BASEPRI, r3
 8003e30:	f3bf 8f6f 	isb	sy
 8003e34:	f3bf 8f4f 	dsb	sy
 8003e38:	60fb      	str	r3, [r7, #12]
}
 8003e3a:	bf00      	nop
 8003e3c:	bf00      	nop
 8003e3e:	e7fd      	b.n	8003e3c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e40:	4b07      	ldr	r3, [pc, #28]	@ (8003e60 <vTaskPlaceOnEventList+0x48>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	3318      	adds	r3, #24
 8003e46:	4619      	mov	r1, r3
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f7fe fd50 	bl	80028ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003e4e:	2101      	movs	r1, #1
 8003e50:	6838      	ldr	r0, [r7, #0]
 8003e52:	f000 fb41 	bl	80044d8 <prvAddCurrentTaskToDelayedList>
}
 8003e56:	bf00      	nop
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	20000878 	.word	0x20000878

08003e64 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10b      	bne.n	8003e8e <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 8003e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e7a:	f383 8811 	msr	BASEPRI, r3
 8003e7e:	f3bf 8f6f 	isb	sy
 8003e82:	f3bf 8f4f 	dsb	sy
 8003e86:	617b      	str	r3, [r7, #20]
}
 8003e88:	bf00      	nop
 8003e8a:	bf00      	nop
 8003e8c:	e7fd      	b.n	8003e8a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8003e8e:	4b12      	ldr	r3, [pc, #72]	@ (8003ed8 <vTaskPlaceOnUnorderedEventList+0x74>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10b      	bne.n	8003eae <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 8003e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e9a:	f383 8811 	msr	BASEPRI, r3
 8003e9e:	f3bf 8f6f 	isb	sy
 8003ea2:	f3bf 8f4f 	dsb	sy
 8003ea6:	613b      	str	r3, [r7, #16]
}
 8003ea8:	bf00      	nop
 8003eaa:	bf00      	nop
 8003eac:	e7fd      	b.n	8003eaa <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8003eae:	4b0b      	ldr	r3, [pc, #44]	@ (8003edc <vTaskPlaceOnUnorderedEventList+0x78>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68ba      	ldr	r2, [r7, #8]
 8003eb4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003eb8:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003eba:	4b08      	ldr	r3, [pc, #32]	@ (8003edc <vTaskPlaceOnUnorderedEventList+0x78>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	3318      	adds	r3, #24
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f7fe fcef 	bl	80028a6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ec8:	2101      	movs	r1, #1
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 fb04 	bl	80044d8 <prvAddCurrentTaskToDelayedList>
}
 8003ed0:	bf00      	nop
 8003ed2:	3718      	adds	r7, #24
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	20000d74 	.word	0x20000d74
 8003edc:	20000878 	.word	0x20000878

08003ee0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10b      	bne.n	8003f0a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ef6:	f383 8811 	msr	BASEPRI, r3
 8003efa:	f3bf 8f6f 	isb	sy
 8003efe:	f3bf 8f4f 	dsb	sy
 8003f02:	617b      	str	r3, [r7, #20]
}
 8003f04:	bf00      	nop
 8003f06:	bf00      	nop
 8003f08:	e7fd      	b.n	8003f06 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8003f34 <vTaskPlaceOnEventListRestricted+0x54>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	3318      	adds	r3, #24
 8003f10:	4619      	mov	r1, r3
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f7fe fcc7 	bl	80028a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d002      	beq.n	8003f24 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f22:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003f24:	6879      	ldr	r1, [r7, #4]
 8003f26:	68b8      	ldr	r0, [r7, #8]
 8003f28:	f000 fad6 	bl	80044d8 <prvAddCurrentTaskToDelayedList>
	}
 8003f2c:	bf00      	nop
 8003f2e:	3718      	adds	r7, #24
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	20000878 	.word	0x20000878

08003f38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b086      	sub	sp, #24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10b      	bne.n	8003f66 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f52:	f383 8811 	msr	BASEPRI, r3
 8003f56:	f3bf 8f6f 	isb	sy
 8003f5a:	f3bf 8f4f 	dsb	sy
 8003f5e:	60fb      	str	r3, [r7, #12]
}
 8003f60:	bf00      	nop
 8003f62:	bf00      	nop
 8003f64:	e7fd      	b.n	8003f62 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	3318      	adds	r3, #24
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7fe fcf8 	bl	8002960 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f70:	4b1d      	ldr	r3, [pc, #116]	@ (8003fe8 <xTaskRemoveFromEventList+0xb0>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d11d      	bne.n	8003fb4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	3304      	adds	r3, #4
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7fe fcef 	bl	8002960 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f86:	4b19      	ldr	r3, [pc, #100]	@ (8003fec <xTaskRemoveFromEventList+0xb4>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d903      	bls.n	8003f96 <xTaskRemoveFromEventList+0x5e>
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f92:	4a16      	ldr	r2, [pc, #88]	@ (8003fec <xTaskRemoveFromEventList+0xb4>)
 8003f94:	6013      	str	r3, [r2, #0]
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	4413      	add	r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4a13      	ldr	r2, [pc, #76]	@ (8003ff0 <xTaskRemoveFromEventList+0xb8>)
 8003fa4:	441a      	add	r2, r3
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	3304      	adds	r3, #4
 8003faa:	4619      	mov	r1, r3
 8003fac:	4610      	mov	r0, r2
 8003fae:	f7fe fc7a 	bl	80028a6 <vListInsertEnd>
 8003fb2:	e005      	b.n	8003fc0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	3318      	adds	r3, #24
 8003fb8:	4619      	mov	r1, r3
 8003fba:	480e      	ldr	r0, [pc, #56]	@ (8003ff4 <xTaskRemoveFromEventList+0xbc>)
 8003fbc:	f7fe fc73 	bl	80028a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8003ff8 <xTaskRemoveFromEventList+0xc0>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d905      	bls.n	8003fda <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8003ffc <xTaskRemoveFromEventList+0xc4>)
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	601a      	str	r2, [r3, #0]
 8003fd8:	e001      	b.n	8003fde <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003fde:	697b      	ldr	r3, [r7, #20]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3718      	adds	r7, #24
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	20000d74 	.word	0x20000d74
 8003fec:	20000d54 	.word	0x20000d54
 8003ff0:	2000087c 	.word	0x2000087c
 8003ff4:	20000d0c 	.word	0x20000d0c
 8003ff8:	20000878 	.word	0x20000878
 8003ffc:	20000d60 	.word	0x20000d60

08004000 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800400a:	4b2a      	ldr	r3, [pc, #168]	@ (80040b4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10b      	bne.n	800402a <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 8004012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004016:	f383 8811 	msr	BASEPRI, r3
 800401a:	f3bf 8f6f 	isb	sy
 800401e:	f3bf 8f4f 	dsb	sy
 8004022:	613b      	str	r3, [r7, #16]
}
 8004024:	bf00      	nop
 8004026:	bf00      	nop
 8004028:	e7fd      	b.n	8004026 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10b      	bne.n	8004058 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 8004040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004044:	f383 8811 	msr	BASEPRI, r3
 8004048:	f3bf 8f6f 	isb	sy
 800404c:	f3bf 8f4f 	dsb	sy
 8004050:	60fb      	str	r3, [r7, #12]
}
 8004052:	bf00      	nop
 8004054:	bf00      	nop
 8004056:	e7fd      	b.n	8004054 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f7fe fc81 	bl	8002960 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	3304      	adds	r3, #4
 8004062:	4618      	mov	r0, r3
 8004064:	f7fe fc7c 	bl	8002960 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800406c:	4b12      	ldr	r3, [pc, #72]	@ (80040b8 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	429a      	cmp	r2, r3
 8004072:	d903      	bls.n	800407c <vTaskRemoveFromUnorderedEventList+0x7c>
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004078:	4a0f      	ldr	r2, [pc, #60]	@ (80040b8 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800407a:	6013      	str	r3, [r2, #0]
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004080:	4613      	mov	r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	4413      	add	r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4a0c      	ldr	r2, [pc, #48]	@ (80040bc <vTaskRemoveFromUnorderedEventList+0xbc>)
 800408a:	441a      	add	r2, r3
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	3304      	adds	r3, #4
 8004090:	4619      	mov	r1, r3
 8004092:	4610      	mov	r0, r2
 8004094:	f7fe fc07 	bl	80028a6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800409c:	4b08      	ldr	r3, [pc, #32]	@ (80040c0 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d902      	bls.n	80040ac <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80040a6:	4b07      	ldr	r3, [pc, #28]	@ (80040c4 <vTaskRemoveFromUnorderedEventList+0xc4>)
 80040a8:	2201      	movs	r2, #1
 80040aa:	601a      	str	r2, [r3, #0]
	}
}
 80040ac:	bf00      	nop
 80040ae:	3718      	adds	r7, #24
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	20000d74 	.word	0x20000d74
 80040b8:	20000d54 	.word	0x20000d54
 80040bc:	2000087c 	.word	0x2000087c
 80040c0:	20000878 	.word	0x20000878
 80040c4:	20000d60 	.word	0x20000d60

080040c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80040d0:	4b06      	ldr	r3, [pc, #24]	@ (80040ec <vTaskInternalSetTimeOutState+0x24>)
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80040d8:	4b05      	ldr	r3, [pc, #20]	@ (80040f0 <vTaskInternalSetTimeOutState+0x28>)
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	605a      	str	r2, [r3, #4]
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr
 80040ec:	20000d64 	.word	0x20000d64
 80040f0:	20000d50 	.word	0x20000d50

080040f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b088      	sub	sp, #32
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d10b      	bne.n	800411c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004108:	f383 8811 	msr	BASEPRI, r3
 800410c:	f3bf 8f6f 	isb	sy
 8004110:	f3bf 8f4f 	dsb	sy
 8004114:	613b      	str	r3, [r7, #16]
}
 8004116:	bf00      	nop
 8004118:	bf00      	nop
 800411a:	e7fd      	b.n	8004118 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10b      	bne.n	800413a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004126:	f383 8811 	msr	BASEPRI, r3
 800412a:	f3bf 8f6f 	isb	sy
 800412e:	f3bf 8f4f 	dsb	sy
 8004132:	60fb      	str	r3, [r7, #12]
}
 8004134:	bf00      	nop
 8004136:	bf00      	nop
 8004138:	e7fd      	b.n	8004136 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800413a:	f000 fecd 	bl	8004ed8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800413e:	4b1d      	ldr	r3, [pc, #116]	@ (80041b4 <xTaskCheckForTimeOut+0xc0>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	69ba      	ldr	r2, [r7, #24]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004156:	d102      	bne.n	800415e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004158:	2300      	movs	r3, #0
 800415a:	61fb      	str	r3, [r7, #28]
 800415c:	e023      	b.n	80041a6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	4b15      	ldr	r3, [pc, #84]	@ (80041b8 <xTaskCheckForTimeOut+0xc4>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	429a      	cmp	r2, r3
 8004168:	d007      	beq.n	800417a <xTaskCheckForTimeOut+0x86>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	69ba      	ldr	r2, [r7, #24]
 8004170:	429a      	cmp	r2, r3
 8004172:	d302      	bcc.n	800417a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004174:	2301      	movs	r3, #1
 8004176:	61fb      	str	r3, [r7, #28]
 8004178:	e015      	b.n	80041a6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	429a      	cmp	r2, r3
 8004182:	d20b      	bcs.n	800419c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	1ad2      	subs	r2, r2, r3
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f7ff ff99 	bl	80040c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004196:	2300      	movs	r3, #0
 8004198:	61fb      	str	r3, [r7, #28]
 800419a:	e004      	b.n	80041a6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	2200      	movs	r2, #0
 80041a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80041a2:	2301      	movs	r3, #1
 80041a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80041a6:	f000 fec9 	bl	8004f3c <vPortExitCritical>

	return xReturn;
 80041aa:	69fb      	ldr	r3, [r7, #28]
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3720      	adds	r7, #32
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	20000d50 	.word	0x20000d50
 80041b8:	20000d64 	.word	0x20000d64

080041bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80041c0:	4b03      	ldr	r3, [pc, #12]	@ (80041d0 <vTaskMissedYield+0x14>)
 80041c2:	2201      	movs	r2, #1
 80041c4:	601a      	str	r2, [r3, #0]
}
 80041c6:	bf00      	nop
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	20000d60 	.word	0x20000d60

080041d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80041dc:	f000 f852 	bl	8004284 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80041e0:	4b06      	ldr	r3, [pc, #24]	@ (80041fc <prvIdleTask+0x28>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d9f9      	bls.n	80041dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80041e8:	4b05      	ldr	r3, [pc, #20]	@ (8004200 <prvIdleTask+0x2c>)
 80041ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041ee:	601a      	str	r2, [r3, #0]
 80041f0:	f3bf 8f4f 	dsb	sy
 80041f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80041f8:	e7f0      	b.n	80041dc <prvIdleTask+0x8>
 80041fa:	bf00      	nop
 80041fc:	2000087c 	.word	0x2000087c
 8004200:	e000ed04 	.word	0xe000ed04

08004204 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800420a:	2300      	movs	r3, #0
 800420c:	607b      	str	r3, [r7, #4]
 800420e:	e00c      	b.n	800422a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	4613      	mov	r3, r2
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	4413      	add	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	4a12      	ldr	r2, [pc, #72]	@ (8004264 <prvInitialiseTaskLists+0x60>)
 800421c:	4413      	add	r3, r2
 800421e:	4618      	mov	r0, r3
 8004220:	f7fe fb14 	bl	800284c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	3301      	adds	r3, #1
 8004228:	607b      	str	r3, [r7, #4]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2b37      	cmp	r3, #55	@ 0x37
 800422e:	d9ef      	bls.n	8004210 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004230:	480d      	ldr	r0, [pc, #52]	@ (8004268 <prvInitialiseTaskLists+0x64>)
 8004232:	f7fe fb0b 	bl	800284c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004236:	480d      	ldr	r0, [pc, #52]	@ (800426c <prvInitialiseTaskLists+0x68>)
 8004238:	f7fe fb08 	bl	800284c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800423c:	480c      	ldr	r0, [pc, #48]	@ (8004270 <prvInitialiseTaskLists+0x6c>)
 800423e:	f7fe fb05 	bl	800284c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004242:	480c      	ldr	r0, [pc, #48]	@ (8004274 <prvInitialiseTaskLists+0x70>)
 8004244:	f7fe fb02 	bl	800284c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004248:	480b      	ldr	r0, [pc, #44]	@ (8004278 <prvInitialiseTaskLists+0x74>)
 800424a:	f7fe faff 	bl	800284c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800424e:	4b0b      	ldr	r3, [pc, #44]	@ (800427c <prvInitialiseTaskLists+0x78>)
 8004250:	4a05      	ldr	r2, [pc, #20]	@ (8004268 <prvInitialiseTaskLists+0x64>)
 8004252:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004254:	4b0a      	ldr	r3, [pc, #40]	@ (8004280 <prvInitialiseTaskLists+0x7c>)
 8004256:	4a05      	ldr	r2, [pc, #20]	@ (800426c <prvInitialiseTaskLists+0x68>)
 8004258:	601a      	str	r2, [r3, #0]
}
 800425a:	bf00      	nop
 800425c:	3708      	adds	r7, #8
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	2000087c 	.word	0x2000087c
 8004268:	20000cdc 	.word	0x20000cdc
 800426c:	20000cf0 	.word	0x20000cf0
 8004270:	20000d0c 	.word	0x20000d0c
 8004274:	20000d20 	.word	0x20000d20
 8004278:	20000d38 	.word	0x20000d38
 800427c:	20000d04 	.word	0x20000d04
 8004280:	20000d08 	.word	0x20000d08

08004284 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800428a:	e019      	b.n	80042c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800428c:	f000 fe24 	bl	8004ed8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004290:	4b10      	ldr	r3, [pc, #64]	@ (80042d4 <prvCheckTasksWaitingTermination+0x50>)
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	3304      	adds	r3, #4
 800429c:	4618      	mov	r0, r3
 800429e:	f7fe fb5f 	bl	8002960 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80042a2:	4b0d      	ldr	r3, [pc, #52]	@ (80042d8 <prvCheckTasksWaitingTermination+0x54>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	3b01      	subs	r3, #1
 80042a8:	4a0b      	ldr	r2, [pc, #44]	@ (80042d8 <prvCheckTasksWaitingTermination+0x54>)
 80042aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80042ac:	4b0b      	ldr	r3, [pc, #44]	@ (80042dc <prvCheckTasksWaitingTermination+0x58>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	3b01      	subs	r3, #1
 80042b2:	4a0a      	ldr	r2, [pc, #40]	@ (80042dc <prvCheckTasksWaitingTermination+0x58>)
 80042b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80042b6:	f000 fe41 	bl	8004f3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 f810 	bl	80042e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042c0:	4b06      	ldr	r3, [pc, #24]	@ (80042dc <prvCheckTasksWaitingTermination+0x58>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1e1      	bne.n	800428c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80042c8:	bf00      	nop
 80042ca:	bf00      	nop
 80042cc:	3708      	adds	r7, #8
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	20000d20 	.word	0x20000d20
 80042d8:	20000d4c 	.word	0x20000d4c
 80042dc:	20000d34 	.word	0x20000d34

080042e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	3354      	adds	r3, #84	@ 0x54
 80042ec:	4618      	mov	r0, r3
 80042ee:	f001 f90b 	bl	8005508 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d108      	bne.n	800430e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004300:	4618      	mov	r0, r3
 8004302:	f000 ffd9 	bl	80052b8 <vPortFree>
				vPortFree( pxTCB );
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 ffd6 	bl	80052b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800430c:	e019      	b.n	8004342 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004314:	2b01      	cmp	r3, #1
 8004316:	d103      	bne.n	8004320 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 ffcd 	bl	80052b8 <vPortFree>
	}
 800431e:	e010      	b.n	8004342 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004326:	2b02      	cmp	r3, #2
 8004328:	d00b      	beq.n	8004342 <prvDeleteTCB+0x62>
	__asm volatile
 800432a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800432e:	f383 8811 	msr	BASEPRI, r3
 8004332:	f3bf 8f6f 	isb	sy
 8004336:	f3bf 8f4f 	dsb	sy
 800433a:	60fb      	str	r3, [r7, #12]
}
 800433c:	bf00      	nop
 800433e:	bf00      	nop
 8004340:	e7fd      	b.n	800433e <prvDeleteTCB+0x5e>
	}
 8004342:	bf00      	nop
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
	...

0800434c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004352:	4b0c      	ldr	r3, [pc, #48]	@ (8004384 <prvResetNextTaskUnblockTime+0x38>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d104      	bne.n	8004366 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800435c:	4b0a      	ldr	r3, [pc, #40]	@ (8004388 <prvResetNextTaskUnblockTime+0x3c>)
 800435e:	f04f 32ff 	mov.w	r2, #4294967295
 8004362:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004364:	e008      	b.n	8004378 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004366:	4b07      	ldr	r3, [pc, #28]	@ (8004384 <prvResetNextTaskUnblockTime+0x38>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	4a04      	ldr	r2, [pc, #16]	@ (8004388 <prvResetNextTaskUnblockTime+0x3c>)
 8004376:	6013      	str	r3, [r2, #0]
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr
 8004384:	20000d04 	.word	0x20000d04
 8004388:	20000d6c 	.word	0x20000d6c

0800438c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004392:	4b0b      	ldr	r3, [pc, #44]	@ (80043c0 <xTaskGetSchedulerState+0x34>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d102      	bne.n	80043a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800439a:	2301      	movs	r3, #1
 800439c:	607b      	str	r3, [r7, #4]
 800439e:	e008      	b.n	80043b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043a0:	4b08      	ldr	r3, [pc, #32]	@ (80043c4 <xTaskGetSchedulerState+0x38>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d102      	bne.n	80043ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80043a8:	2302      	movs	r3, #2
 80043aa:	607b      	str	r3, [r7, #4]
 80043ac:	e001      	b.n	80043b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80043ae:	2300      	movs	r3, #0
 80043b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80043b2:	687b      	ldr	r3, [r7, #4]
	}
 80043b4:	4618      	mov	r0, r3
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr
 80043c0:	20000d58 	.word	0x20000d58
 80043c4:	20000d74 	.word	0x20000d74

080043c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80043d4:	2300      	movs	r3, #0
 80043d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d058      	beq.n	8004490 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80043de:	4b2f      	ldr	r3, [pc, #188]	@ (800449c <xTaskPriorityDisinherit+0xd4>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d00b      	beq.n	8004400 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80043e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043ec:	f383 8811 	msr	BASEPRI, r3
 80043f0:	f3bf 8f6f 	isb	sy
 80043f4:	f3bf 8f4f 	dsb	sy
 80043f8:	60fb      	str	r3, [r7, #12]
}
 80043fa:	bf00      	nop
 80043fc:	bf00      	nop
 80043fe:	e7fd      	b.n	80043fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004404:	2b00      	cmp	r3, #0
 8004406:	d10b      	bne.n	8004420 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800440c:	f383 8811 	msr	BASEPRI, r3
 8004410:	f3bf 8f6f 	isb	sy
 8004414:	f3bf 8f4f 	dsb	sy
 8004418:	60bb      	str	r3, [r7, #8]
}
 800441a:	bf00      	nop
 800441c:	bf00      	nop
 800441e:	e7fd      	b.n	800441c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004424:	1e5a      	subs	r2, r3, #1
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004432:	429a      	cmp	r2, r3
 8004434:	d02c      	beq.n	8004490 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800443a:	2b00      	cmp	r3, #0
 800443c:	d128      	bne.n	8004490 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	3304      	adds	r3, #4
 8004442:	4618      	mov	r0, r3
 8004444:	f7fe fa8c 	bl	8002960 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004454:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004460:	4b0f      	ldr	r3, [pc, #60]	@ (80044a0 <xTaskPriorityDisinherit+0xd8>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	429a      	cmp	r2, r3
 8004466:	d903      	bls.n	8004470 <xTaskPriorityDisinherit+0xa8>
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800446c:	4a0c      	ldr	r2, [pc, #48]	@ (80044a0 <xTaskPriorityDisinherit+0xd8>)
 800446e:	6013      	str	r3, [r2, #0]
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004474:	4613      	mov	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4413      	add	r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	4a09      	ldr	r2, [pc, #36]	@ (80044a4 <xTaskPriorityDisinherit+0xdc>)
 800447e:	441a      	add	r2, r3
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	3304      	adds	r3, #4
 8004484:	4619      	mov	r1, r3
 8004486:	4610      	mov	r0, r2
 8004488:	f7fe fa0d 	bl	80028a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800448c:	2301      	movs	r3, #1
 800448e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004490:	697b      	ldr	r3, [r7, #20]
	}
 8004492:	4618      	mov	r0, r3
 8004494:	3718      	adds	r7, #24
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	20000878 	.word	0x20000878
 80044a0:	20000d54 	.word	0x20000d54
 80044a4:	2000087c 	.word	0x2000087c

080044a8 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80044ae:	4b09      	ldr	r3, [pc, #36]	@ (80044d4 <uxTaskResetEventItemValue+0x2c>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044b6:	4b07      	ldr	r3, [pc, #28]	@ (80044d4 <uxTaskResetEventItemValue+0x2c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044bc:	4b05      	ldr	r3, [pc, #20]	@ (80044d4 <uxTaskResetEventItemValue+0x2c>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 80044c4:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80044c6:	687b      	ldr	r3, [r7, #4]
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr
 80044d4:	20000878 	.word	0x20000878

080044d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80044e2:	4b21      	ldr	r3, [pc, #132]	@ (8004568 <prvAddCurrentTaskToDelayedList+0x90>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044e8:	4b20      	ldr	r3, [pc, #128]	@ (800456c <prvAddCurrentTaskToDelayedList+0x94>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	3304      	adds	r3, #4
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7fe fa36 	bl	8002960 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044fa:	d10a      	bne.n	8004512 <prvAddCurrentTaskToDelayedList+0x3a>
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d007      	beq.n	8004512 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004502:	4b1a      	ldr	r3, [pc, #104]	@ (800456c <prvAddCurrentTaskToDelayedList+0x94>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	3304      	adds	r3, #4
 8004508:	4619      	mov	r1, r3
 800450a:	4819      	ldr	r0, [pc, #100]	@ (8004570 <prvAddCurrentTaskToDelayedList+0x98>)
 800450c:	f7fe f9cb 	bl	80028a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004510:	e026      	b.n	8004560 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4413      	add	r3, r2
 8004518:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800451a:	4b14      	ldr	r3, [pc, #80]	@ (800456c <prvAddCurrentTaskToDelayedList+0x94>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68ba      	ldr	r2, [r7, #8]
 8004520:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	429a      	cmp	r2, r3
 8004528:	d209      	bcs.n	800453e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800452a:	4b12      	ldr	r3, [pc, #72]	@ (8004574 <prvAddCurrentTaskToDelayedList+0x9c>)
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	4b0f      	ldr	r3, [pc, #60]	@ (800456c <prvAddCurrentTaskToDelayedList+0x94>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	3304      	adds	r3, #4
 8004534:	4619      	mov	r1, r3
 8004536:	4610      	mov	r0, r2
 8004538:	f7fe f9d9 	bl	80028ee <vListInsert>
}
 800453c:	e010      	b.n	8004560 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800453e:	4b0e      	ldr	r3, [pc, #56]	@ (8004578 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	4b0a      	ldr	r3, [pc, #40]	@ (800456c <prvAddCurrentTaskToDelayedList+0x94>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	3304      	adds	r3, #4
 8004548:	4619      	mov	r1, r3
 800454a:	4610      	mov	r0, r2
 800454c:	f7fe f9cf 	bl	80028ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004550:	4b0a      	ldr	r3, [pc, #40]	@ (800457c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68ba      	ldr	r2, [r7, #8]
 8004556:	429a      	cmp	r2, r3
 8004558:	d202      	bcs.n	8004560 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800455a:	4a08      	ldr	r2, [pc, #32]	@ (800457c <prvAddCurrentTaskToDelayedList+0xa4>)
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	6013      	str	r3, [r2, #0]
}
 8004560:	bf00      	nop
 8004562:	3710      	adds	r7, #16
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	20000d50 	.word	0x20000d50
 800456c:	20000878 	.word	0x20000878
 8004570:	20000d38 	.word	0x20000d38
 8004574:	20000d08 	.word	0x20000d08
 8004578:	20000d04 	.word	0x20000d04
 800457c:	20000d6c 	.word	0x20000d6c

08004580 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b08a      	sub	sp, #40	@ 0x28
 8004584:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004586:	2300      	movs	r3, #0
 8004588:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800458a:	f000 fb13 	bl	8004bb4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800458e:	4b1d      	ldr	r3, [pc, #116]	@ (8004604 <xTimerCreateTimerTask+0x84>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d021      	beq.n	80045da <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004596:	2300      	movs	r3, #0
 8004598:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800459a:	2300      	movs	r3, #0
 800459c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800459e:	1d3a      	adds	r2, r7, #4
 80045a0:	f107 0108 	add.w	r1, r7, #8
 80045a4:	f107 030c 	add.w	r3, r7, #12
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7fd ff3f 	bl	800242c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80045ae:	6879      	ldr	r1, [r7, #4]
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	9202      	str	r2, [sp, #8]
 80045b6:	9301      	str	r3, [sp, #4]
 80045b8:	2302      	movs	r3, #2
 80045ba:	9300      	str	r3, [sp, #0]
 80045bc:	2300      	movs	r3, #0
 80045be:	460a      	mov	r2, r1
 80045c0:	4911      	ldr	r1, [pc, #68]	@ (8004608 <xTimerCreateTimerTask+0x88>)
 80045c2:	4812      	ldr	r0, [pc, #72]	@ (800460c <xTimerCreateTimerTask+0x8c>)
 80045c4:	f7fe ffe8 	bl	8003598 <xTaskCreateStatic>
 80045c8:	4603      	mov	r3, r0
 80045ca:	4a11      	ldr	r2, [pc, #68]	@ (8004610 <xTimerCreateTimerTask+0x90>)
 80045cc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80045ce:	4b10      	ldr	r3, [pc, #64]	@ (8004610 <xTimerCreateTimerTask+0x90>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80045d6:	2301      	movs	r3, #1
 80045d8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d10b      	bne.n	80045f8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80045e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045e4:	f383 8811 	msr	BASEPRI, r3
 80045e8:	f3bf 8f6f 	isb	sy
 80045ec:	f3bf 8f4f 	dsb	sy
 80045f0:	613b      	str	r3, [r7, #16]
}
 80045f2:	bf00      	nop
 80045f4:	bf00      	nop
 80045f6:	e7fd      	b.n	80045f4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80045f8:	697b      	ldr	r3, [r7, #20]
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3718      	adds	r7, #24
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	20000da8 	.word	0x20000da8
 8004608:	08005744 	.word	0x08005744
 800460c:	0800474d 	.word	0x0800474d
 8004610:	20000dac 	.word	0x20000dac

08004614 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b08a      	sub	sp, #40	@ 0x28
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
 8004620:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004622:	2300      	movs	r3, #0
 8004624:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d10b      	bne.n	8004644 <xTimerGenericCommand+0x30>
	__asm volatile
 800462c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004630:	f383 8811 	msr	BASEPRI, r3
 8004634:	f3bf 8f6f 	isb	sy
 8004638:	f3bf 8f4f 	dsb	sy
 800463c:	623b      	str	r3, [r7, #32]
}
 800463e:	bf00      	nop
 8004640:	bf00      	nop
 8004642:	e7fd      	b.n	8004640 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004644:	4b19      	ldr	r3, [pc, #100]	@ (80046ac <xTimerGenericCommand+0x98>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d02a      	beq.n	80046a2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	2b05      	cmp	r3, #5
 800465c:	dc18      	bgt.n	8004690 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800465e:	f7ff fe95 	bl	800438c <xTaskGetSchedulerState>
 8004662:	4603      	mov	r3, r0
 8004664:	2b02      	cmp	r3, #2
 8004666:	d109      	bne.n	800467c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004668:	4b10      	ldr	r3, [pc, #64]	@ (80046ac <xTimerGenericCommand+0x98>)
 800466a:	6818      	ldr	r0, [r3, #0]
 800466c:	f107 0110 	add.w	r1, r7, #16
 8004670:	2300      	movs	r3, #0
 8004672:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004674:	f7fe fb52 	bl	8002d1c <xQueueGenericSend>
 8004678:	6278      	str	r0, [r7, #36]	@ 0x24
 800467a:	e012      	b.n	80046a2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800467c:	4b0b      	ldr	r3, [pc, #44]	@ (80046ac <xTimerGenericCommand+0x98>)
 800467e:	6818      	ldr	r0, [r3, #0]
 8004680:	f107 0110 	add.w	r1, r7, #16
 8004684:	2300      	movs	r3, #0
 8004686:	2200      	movs	r2, #0
 8004688:	f7fe fb48 	bl	8002d1c <xQueueGenericSend>
 800468c:	6278      	str	r0, [r7, #36]	@ 0x24
 800468e:	e008      	b.n	80046a2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004690:	4b06      	ldr	r3, [pc, #24]	@ (80046ac <xTimerGenericCommand+0x98>)
 8004692:	6818      	ldr	r0, [r3, #0]
 8004694:	f107 0110 	add.w	r1, r7, #16
 8004698:	2300      	movs	r3, #0
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	f7fe fc40 	bl	8002f20 <xQueueGenericSendFromISR>
 80046a0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80046a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3728      	adds	r7, #40	@ 0x28
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	20000da8 	.word	0x20000da8

080046b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b088      	sub	sp, #32
 80046b4:	af02      	add	r7, sp, #8
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046ba:	4b23      	ldr	r3, [pc, #140]	@ (8004748 <prvProcessExpiredTimer+0x98>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	3304      	adds	r3, #4
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7fe f949 	bl	8002960 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80046d4:	f003 0304 	and.w	r3, r3, #4
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d023      	beq.n	8004724 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	699a      	ldr	r2, [r3, #24]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	18d1      	adds	r1, r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	6978      	ldr	r0, [r7, #20]
 80046ea:	f000 f8d5 	bl	8004898 <prvInsertTimerInActiveList>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d020      	beq.n	8004736 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80046f4:	2300      	movs	r3, #0
 80046f6:	9300      	str	r3, [sp, #0]
 80046f8:	2300      	movs	r3, #0
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	2100      	movs	r1, #0
 80046fe:	6978      	ldr	r0, [r7, #20]
 8004700:	f7ff ff88 	bl	8004614 <xTimerGenericCommand>
 8004704:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d114      	bne.n	8004736 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800470c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004710:	f383 8811 	msr	BASEPRI, r3
 8004714:	f3bf 8f6f 	isb	sy
 8004718:	f3bf 8f4f 	dsb	sy
 800471c:	60fb      	str	r3, [r7, #12]
}
 800471e:	bf00      	nop
 8004720:	bf00      	nop
 8004722:	e7fd      	b.n	8004720 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800472a:	f023 0301 	bic.w	r3, r3, #1
 800472e:	b2da      	uxtb	r2, r3
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	6978      	ldr	r0, [r7, #20]
 800473c:	4798      	blx	r3
}
 800473e:	bf00      	nop
 8004740:	3718      	adds	r7, #24
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	20000da0 	.word	0x20000da0

0800474c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004754:	f107 0308 	add.w	r3, r7, #8
 8004758:	4618      	mov	r0, r3
 800475a:	f000 f859 	bl	8004810 <prvGetNextExpireTime>
 800475e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	4619      	mov	r1, r3
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f000 f805 	bl	8004774 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800476a:	f000 f8d7 	bl	800491c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800476e:	bf00      	nop
 8004770:	e7f0      	b.n	8004754 <prvTimerTask+0x8>
	...

08004774 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800477e:	f7ff f96f 	bl	8003a60 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004782:	f107 0308 	add.w	r3, r7, #8
 8004786:	4618      	mov	r0, r3
 8004788:	f000 f866 	bl	8004858 <prvSampleTimeNow>
 800478c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d130      	bne.n	80047f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d10a      	bne.n	80047b0 <prvProcessTimerOrBlockTask+0x3c>
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d806      	bhi.n	80047b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80047a2:	f7ff f96b 	bl	8003a7c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80047a6:	68f9      	ldr	r1, [r7, #12]
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f7ff ff81 	bl	80046b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80047ae:	e024      	b.n	80047fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d008      	beq.n	80047c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80047b6:	4b13      	ldr	r3, [pc, #76]	@ (8004804 <prvProcessTimerOrBlockTask+0x90>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d101      	bne.n	80047c4 <prvProcessTimerOrBlockTask+0x50>
 80047c0:	2301      	movs	r3, #1
 80047c2:	e000      	b.n	80047c6 <prvProcessTimerOrBlockTask+0x52>
 80047c4:	2300      	movs	r3, #0
 80047c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80047c8:	4b0f      	ldr	r3, [pc, #60]	@ (8004808 <prvProcessTimerOrBlockTask+0x94>)
 80047ca:	6818      	ldr	r0, [r3, #0]
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	683a      	ldr	r2, [r7, #0]
 80047d4:	4619      	mov	r1, r3
 80047d6:	f7fe feab 	bl	8003530 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80047da:	f7ff f94f 	bl	8003a7c <xTaskResumeAll>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d10a      	bne.n	80047fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80047e4:	4b09      	ldr	r3, [pc, #36]	@ (800480c <prvProcessTimerOrBlockTask+0x98>)
 80047e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	f3bf 8f4f 	dsb	sy
 80047f0:	f3bf 8f6f 	isb	sy
}
 80047f4:	e001      	b.n	80047fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80047f6:	f7ff f941 	bl	8003a7c <xTaskResumeAll>
}
 80047fa:	bf00      	nop
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	20000da4 	.word	0x20000da4
 8004808:	20000da8 	.word	0x20000da8
 800480c:	e000ed04 	.word	0xe000ed04

08004810 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004818:	4b0e      	ldr	r3, [pc, #56]	@ (8004854 <prvGetNextExpireTime+0x44>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d101      	bne.n	8004826 <prvGetNextExpireTime+0x16>
 8004822:	2201      	movs	r2, #1
 8004824:	e000      	b.n	8004828 <prvGetNextExpireTime+0x18>
 8004826:	2200      	movs	r2, #0
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d105      	bne.n	8004840 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004834:	4b07      	ldr	r3, [pc, #28]	@ (8004854 <prvGetNextExpireTime+0x44>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	60fb      	str	r3, [r7, #12]
 800483e:	e001      	b.n	8004844 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004840:	2300      	movs	r3, #0
 8004842:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004844:	68fb      	ldr	r3, [r7, #12]
}
 8004846:	4618      	mov	r0, r3
 8004848:	3714      	adds	r7, #20
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	20000da0 	.word	0x20000da0

08004858 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004860:	f7ff f9aa 	bl	8003bb8 <xTaskGetTickCount>
 8004864:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004866:	4b0b      	ldr	r3, [pc, #44]	@ (8004894 <prvSampleTimeNow+0x3c>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	429a      	cmp	r2, r3
 800486e:	d205      	bcs.n	800487c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004870:	f000 f93a 	bl	8004ae8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	601a      	str	r2, [r3, #0]
 800487a:	e002      	b.n	8004882 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004882:	4a04      	ldr	r2, [pc, #16]	@ (8004894 <prvSampleTimeNow+0x3c>)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004888:	68fb      	ldr	r3, [r7, #12]
}
 800488a:	4618      	mov	r0, r3
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	20000db0 	.word	0x20000db0

08004898 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
 80048a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80048a6:	2300      	movs	r3, #0
 80048a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	68ba      	ldr	r2, [r7, #8]
 80048ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80048b6:	68ba      	ldr	r2, [r7, #8]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d812      	bhi.n	80048e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	1ad2      	subs	r2, r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d302      	bcc.n	80048d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80048cc:	2301      	movs	r3, #1
 80048ce:	617b      	str	r3, [r7, #20]
 80048d0:	e01b      	b.n	800490a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80048d2:	4b10      	ldr	r3, [pc, #64]	@ (8004914 <prvInsertTimerInActiveList+0x7c>)
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	3304      	adds	r3, #4
 80048da:	4619      	mov	r1, r3
 80048dc:	4610      	mov	r0, r2
 80048de:	f7fe f806 	bl	80028ee <vListInsert>
 80048e2:	e012      	b.n	800490a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d206      	bcs.n	80048fa <prvInsertTimerInActiveList+0x62>
 80048ec:	68ba      	ldr	r2, [r7, #8]
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d302      	bcc.n	80048fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80048f4:	2301      	movs	r3, #1
 80048f6:	617b      	str	r3, [r7, #20]
 80048f8:	e007      	b.n	800490a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80048fa:	4b07      	ldr	r3, [pc, #28]	@ (8004918 <prvInsertTimerInActiveList+0x80>)
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	3304      	adds	r3, #4
 8004902:	4619      	mov	r1, r3
 8004904:	4610      	mov	r0, r2
 8004906:	f7fd fff2 	bl	80028ee <vListInsert>
		}
	}

	return xProcessTimerNow;
 800490a:	697b      	ldr	r3, [r7, #20]
}
 800490c:	4618      	mov	r0, r3
 800490e:	3718      	adds	r7, #24
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	20000da4 	.word	0x20000da4
 8004918:	20000da0 	.word	0x20000da0

0800491c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b08e      	sub	sp, #56	@ 0x38
 8004920:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004922:	e0ce      	b.n	8004ac2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	da19      	bge.n	800495e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800492a:	1d3b      	adds	r3, r7, #4
 800492c:	3304      	adds	r3, #4
 800492e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10b      	bne.n	800494e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800493a:	f383 8811 	msr	BASEPRI, r3
 800493e:	f3bf 8f6f 	isb	sy
 8004942:	f3bf 8f4f 	dsb	sy
 8004946:	61fb      	str	r3, [r7, #28]
}
 8004948:	bf00      	nop
 800494a:	bf00      	nop
 800494c:	e7fd      	b.n	800494a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800494e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004954:	6850      	ldr	r0, [r2, #4]
 8004956:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004958:	6892      	ldr	r2, [r2, #8]
 800495a:	4611      	mov	r1, r2
 800495c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	f2c0 80ae 	blt.w	8004ac2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800496a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d004      	beq.n	800497c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004974:	3304      	adds	r3, #4
 8004976:	4618      	mov	r0, r3
 8004978:	f7fd fff2 	bl	8002960 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800497c:	463b      	mov	r3, r7
 800497e:	4618      	mov	r0, r3
 8004980:	f7ff ff6a 	bl	8004858 <prvSampleTimeNow>
 8004984:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2b09      	cmp	r3, #9
 800498a:	f200 8097 	bhi.w	8004abc <prvProcessReceivedCommands+0x1a0>
 800498e:	a201      	add	r2, pc, #4	@ (adr r2, 8004994 <prvProcessReceivedCommands+0x78>)
 8004990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004994:	080049bd 	.word	0x080049bd
 8004998:	080049bd 	.word	0x080049bd
 800499c:	080049bd 	.word	0x080049bd
 80049a0:	08004a33 	.word	0x08004a33
 80049a4:	08004a47 	.word	0x08004a47
 80049a8:	08004a93 	.word	0x08004a93
 80049ac:	080049bd 	.word	0x080049bd
 80049b0:	080049bd 	.word	0x080049bd
 80049b4:	08004a33 	.word	0x08004a33
 80049b8:	08004a47 	.word	0x08004a47
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80049bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80049c2:	f043 0301 	orr.w	r3, r3, #1
 80049c6:	b2da      	uxtb	r2, r3
 80049c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80049ce:	68ba      	ldr	r2, [r7, #8]
 80049d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	18d1      	adds	r1, r2, r3
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049dc:	f7ff ff5c 	bl	8004898 <prvInsertTimerInActiveList>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d06c      	beq.n	8004ac0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80049ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80049f4:	f003 0304 	and.w	r3, r3, #4
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d061      	beq.n	8004ac0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80049fc:	68ba      	ldr	r2, [r7, #8]
 80049fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	441a      	add	r2, r3
 8004a04:	2300      	movs	r3, #0
 8004a06:	9300      	str	r3, [sp, #0]
 8004a08:	2300      	movs	r3, #0
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a0e:	f7ff fe01 	bl	8004614 <xTimerGenericCommand>
 8004a12:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004a14:	6a3b      	ldr	r3, [r7, #32]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d152      	bne.n	8004ac0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004a1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a1e:	f383 8811 	msr	BASEPRI, r3
 8004a22:	f3bf 8f6f 	isb	sy
 8004a26:	f3bf 8f4f 	dsb	sy
 8004a2a:	61bb      	str	r3, [r7, #24]
}
 8004a2c:	bf00      	nop
 8004a2e:	bf00      	nop
 8004a30:	e7fd      	b.n	8004a2e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a38:	f023 0301 	bic.w	r3, r3, #1
 8004a3c:	b2da      	uxtb	r2, r3
 8004a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a40:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004a44:	e03d      	b.n	8004ac2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a4c:	f043 0301 	orr.w	r3, r3, #1
 8004a50:	b2da      	uxtb	r2, r3
 8004a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a54:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004a58:	68ba      	ldr	r2, [r7, #8]
 8004a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a5c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10b      	bne.n	8004a7e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a6a:	f383 8811 	msr	BASEPRI, r3
 8004a6e:	f3bf 8f6f 	isb	sy
 8004a72:	f3bf 8f4f 	dsb	sy
 8004a76:	617b      	str	r3, [r7, #20]
}
 8004a78:	bf00      	nop
 8004a7a:	bf00      	nop
 8004a7c:	e7fd      	b.n	8004a7a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a80:	699a      	ldr	r2, [r3, #24]
 8004a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a84:	18d1      	adds	r1, r2, r3
 8004a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a8c:	f7ff ff04 	bl	8004898 <prvInsertTimerInActiveList>
					break;
 8004a90:	e017      	b.n	8004ac2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a98:	f003 0302 	and.w	r3, r3, #2
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d103      	bne.n	8004aa8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004aa0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004aa2:	f000 fc09 	bl	80052b8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004aa6:	e00c      	b.n	8004ac2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aaa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004aae:	f023 0301 	bic.w	r3, r3, #1
 8004ab2:	b2da      	uxtb	r2, r3
 8004ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ab6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004aba:	e002      	b.n	8004ac2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004abc:	bf00      	nop
 8004abe:	e000      	b.n	8004ac2 <prvProcessReceivedCommands+0x1a6>
					break;
 8004ac0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ac2:	4b08      	ldr	r3, [pc, #32]	@ (8004ae4 <prvProcessReceivedCommands+0x1c8>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	1d39      	adds	r1, r7, #4
 8004ac8:	2200      	movs	r2, #0
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7fe fac6 	bl	800305c <xQueueReceive>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f47f af26 	bne.w	8004924 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004ad8:	bf00      	nop
 8004ada:	bf00      	nop
 8004adc:	3730      	adds	r7, #48	@ 0x30
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	20000da8 	.word	0x20000da8

08004ae8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b088      	sub	sp, #32
 8004aec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004aee:	e049      	b.n	8004b84 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004af0:	4b2e      	ldr	r3, [pc, #184]	@ (8004bac <prvSwitchTimerLists+0xc4>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004afa:	4b2c      	ldr	r3, [pc, #176]	@ (8004bac <prvSwitchTimerLists+0xc4>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	3304      	adds	r3, #4
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7fd ff29 	bl	8002960 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	68f8      	ldr	r0, [r7, #12]
 8004b14:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b1c:	f003 0304 	and.w	r3, r3, #4
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d02f      	beq.n	8004b84 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	693a      	ldr	r2, [r7, #16]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d90e      	bls.n	8004b54 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	68ba      	ldr	r2, [r7, #8]
 8004b3a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b42:	4b1a      	ldr	r3, [pc, #104]	@ (8004bac <prvSwitchTimerLists+0xc4>)
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	3304      	adds	r3, #4
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	4610      	mov	r0, r2
 8004b4e:	f7fd fece 	bl	80028ee <vListInsert>
 8004b52:	e017      	b.n	8004b84 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b54:	2300      	movs	r3, #0
 8004b56:	9300      	str	r3, [sp, #0]
 8004b58:	2300      	movs	r3, #0
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	2100      	movs	r1, #0
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f7ff fd58 	bl	8004614 <xTimerGenericCommand>
 8004b64:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d10b      	bne.n	8004b84 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b70:	f383 8811 	msr	BASEPRI, r3
 8004b74:	f3bf 8f6f 	isb	sy
 8004b78:	f3bf 8f4f 	dsb	sy
 8004b7c:	603b      	str	r3, [r7, #0]
}
 8004b7e:	bf00      	nop
 8004b80:	bf00      	nop
 8004b82:	e7fd      	b.n	8004b80 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b84:	4b09      	ldr	r3, [pc, #36]	@ (8004bac <prvSwitchTimerLists+0xc4>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1b0      	bne.n	8004af0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004b8e:	4b07      	ldr	r3, [pc, #28]	@ (8004bac <prvSwitchTimerLists+0xc4>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004b94:	4b06      	ldr	r3, [pc, #24]	@ (8004bb0 <prvSwitchTimerLists+0xc8>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a04      	ldr	r2, [pc, #16]	@ (8004bac <prvSwitchTimerLists+0xc4>)
 8004b9a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004b9c:	4a04      	ldr	r2, [pc, #16]	@ (8004bb0 <prvSwitchTimerLists+0xc8>)
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	6013      	str	r3, [r2, #0]
}
 8004ba2:	bf00      	nop
 8004ba4:	3718      	adds	r7, #24
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	20000da0 	.word	0x20000da0
 8004bb0:	20000da4 	.word	0x20000da4

08004bb4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004bba:	f000 f98d 	bl	8004ed8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004bbe:	4b15      	ldr	r3, [pc, #84]	@ (8004c14 <prvCheckForValidListAndQueue+0x60>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d120      	bne.n	8004c08 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004bc6:	4814      	ldr	r0, [pc, #80]	@ (8004c18 <prvCheckForValidListAndQueue+0x64>)
 8004bc8:	f7fd fe40 	bl	800284c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004bcc:	4813      	ldr	r0, [pc, #76]	@ (8004c1c <prvCheckForValidListAndQueue+0x68>)
 8004bce:	f7fd fe3d 	bl	800284c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004bd2:	4b13      	ldr	r3, [pc, #76]	@ (8004c20 <prvCheckForValidListAndQueue+0x6c>)
 8004bd4:	4a10      	ldr	r2, [pc, #64]	@ (8004c18 <prvCheckForValidListAndQueue+0x64>)
 8004bd6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004bd8:	4b12      	ldr	r3, [pc, #72]	@ (8004c24 <prvCheckForValidListAndQueue+0x70>)
 8004bda:	4a10      	ldr	r2, [pc, #64]	@ (8004c1c <prvCheckForValidListAndQueue+0x68>)
 8004bdc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004bde:	2300      	movs	r3, #0
 8004be0:	9300      	str	r3, [sp, #0]
 8004be2:	4b11      	ldr	r3, [pc, #68]	@ (8004c28 <prvCheckForValidListAndQueue+0x74>)
 8004be4:	4a11      	ldr	r2, [pc, #68]	@ (8004c2c <prvCheckForValidListAndQueue+0x78>)
 8004be6:	2110      	movs	r1, #16
 8004be8:	200a      	movs	r0, #10
 8004bea:	f7fd ff4d 	bl	8002a88 <xQueueGenericCreateStatic>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	4a08      	ldr	r2, [pc, #32]	@ (8004c14 <prvCheckForValidListAndQueue+0x60>)
 8004bf2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004bf4:	4b07      	ldr	r3, [pc, #28]	@ (8004c14 <prvCheckForValidListAndQueue+0x60>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d005      	beq.n	8004c08 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004bfc:	4b05      	ldr	r3, [pc, #20]	@ (8004c14 <prvCheckForValidListAndQueue+0x60>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	490b      	ldr	r1, [pc, #44]	@ (8004c30 <prvCheckForValidListAndQueue+0x7c>)
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7fe fc40 	bl	8003488 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c08:	f000 f998 	bl	8004f3c <vPortExitCritical>
}
 8004c0c:	bf00      	nop
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	20000da8 	.word	0x20000da8
 8004c18:	20000d78 	.word	0x20000d78
 8004c1c:	20000d8c 	.word	0x20000d8c
 8004c20:	20000da0 	.word	0x20000da0
 8004c24:	20000da4 	.word	0x20000da4
 8004c28:	20000e54 	.word	0x20000e54
 8004c2c:	20000db4 	.word	0x20000db4
 8004c30:	0800574c 	.word	0x0800574c

08004c34 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b08a      	sub	sp, #40	@ 0x28
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
 8004c40:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8004c42:	f06f 0301 	mvn.w	r3, #1
 8004c46:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004c54:	4b06      	ldr	r3, [pc, #24]	@ (8004c70 <xTimerPendFunctionCallFromISR+0x3c>)
 8004c56:	6818      	ldr	r0, [r3, #0]
 8004c58:	f107 0114 	add.w	r1, r7, #20
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	683a      	ldr	r2, [r7, #0]
 8004c60:	f7fe f95e 	bl	8002f20 <xQueueGenericSendFromISR>
 8004c64:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8004c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3728      	adds	r7, #40	@ 0x28
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	20000da8 	.word	0x20000da8

08004c74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	3b04      	subs	r3, #4
 8004c84:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004c8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	3b04      	subs	r3, #4
 8004c92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	f023 0201 	bic.w	r2, r3, #1
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	3b04      	subs	r3, #4
 8004ca2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004ca4:	4a0c      	ldr	r2, [pc, #48]	@ (8004cd8 <pxPortInitialiseStack+0x64>)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	3b14      	subs	r3, #20
 8004cae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	3b04      	subs	r3, #4
 8004cba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f06f 0202 	mvn.w	r2, #2
 8004cc2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	3b20      	subs	r3, #32
 8004cc8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004cca:	68fb      	ldr	r3, [r7, #12]
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3714      	adds	r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr
 8004cd8:	08004cdd 	.word	0x08004cdd

08004cdc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004ce6:	4b13      	ldr	r3, [pc, #76]	@ (8004d34 <prvTaskExitError+0x58>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cee:	d00b      	beq.n	8004d08 <prvTaskExitError+0x2c>
	__asm volatile
 8004cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cf4:	f383 8811 	msr	BASEPRI, r3
 8004cf8:	f3bf 8f6f 	isb	sy
 8004cfc:	f3bf 8f4f 	dsb	sy
 8004d00:	60fb      	str	r3, [r7, #12]
}
 8004d02:	bf00      	nop
 8004d04:	bf00      	nop
 8004d06:	e7fd      	b.n	8004d04 <prvTaskExitError+0x28>
	__asm volatile
 8004d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d0c:	f383 8811 	msr	BASEPRI, r3
 8004d10:	f3bf 8f6f 	isb	sy
 8004d14:	f3bf 8f4f 	dsb	sy
 8004d18:	60bb      	str	r3, [r7, #8]
}
 8004d1a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004d1c:	bf00      	nop
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d0fc      	beq.n	8004d1e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d24:	bf00      	nop
 8004d26:	bf00      	nop
 8004d28:	3714      	adds	r7, #20
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	2000000c 	.word	0x2000000c
	...

08004d40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004d40:	4b07      	ldr	r3, [pc, #28]	@ (8004d60 <pxCurrentTCBConst2>)
 8004d42:	6819      	ldr	r1, [r3, #0]
 8004d44:	6808      	ldr	r0, [r1, #0]
 8004d46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d4a:	f380 8809 	msr	PSP, r0
 8004d4e:	f3bf 8f6f 	isb	sy
 8004d52:	f04f 0000 	mov.w	r0, #0
 8004d56:	f380 8811 	msr	BASEPRI, r0
 8004d5a:	4770      	bx	lr
 8004d5c:	f3af 8000 	nop.w

08004d60 <pxCurrentTCBConst2>:
 8004d60:	20000878 	.word	0x20000878
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004d64:	bf00      	nop
 8004d66:	bf00      	nop

08004d68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004d68:	4808      	ldr	r0, [pc, #32]	@ (8004d8c <prvPortStartFirstTask+0x24>)
 8004d6a:	6800      	ldr	r0, [r0, #0]
 8004d6c:	6800      	ldr	r0, [r0, #0]
 8004d6e:	f380 8808 	msr	MSP, r0
 8004d72:	f04f 0000 	mov.w	r0, #0
 8004d76:	f380 8814 	msr	CONTROL, r0
 8004d7a:	b662      	cpsie	i
 8004d7c:	b661      	cpsie	f
 8004d7e:	f3bf 8f4f 	dsb	sy
 8004d82:	f3bf 8f6f 	isb	sy
 8004d86:	df00      	svc	0
 8004d88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004d8a:	bf00      	nop
 8004d8c:	e000ed08 	.word	0xe000ed08

08004d90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b086      	sub	sp, #24
 8004d94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004d96:	4b47      	ldr	r3, [pc, #284]	@ (8004eb4 <xPortStartScheduler+0x124>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a47      	ldr	r2, [pc, #284]	@ (8004eb8 <xPortStartScheduler+0x128>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d10b      	bne.n	8004db8 <xPortStartScheduler+0x28>
	__asm volatile
 8004da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004da4:	f383 8811 	msr	BASEPRI, r3
 8004da8:	f3bf 8f6f 	isb	sy
 8004dac:	f3bf 8f4f 	dsb	sy
 8004db0:	613b      	str	r3, [r7, #16]
}
 8004db2:	bf00      	nop
 8004db4:	bf00      	nop
 8004db6:	e7fd      	b.n	8004db4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004db8:	4b3e      	ldr	r3, [pc, #248]	@ (8004eb4 <xPortStartScheduler+0x124>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a3f      	ldr	r2, [pc, #252]	@ (8004ebc <xPortStartScheduler+0x12c>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d10b      	bne.n	8004dda <xPortStartScheduler+0x4a>
	__asm volatile
 8004dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dc6:	f383 8811 	msr	BASEPRI, r3
 8004dca:	f3bf 8f6f 	isb	sy
 8004dce:	f3bf 8f4f 	dsb	sy
 8004dd2:	60fb      	str	r3, [r7, #12]
}
 8004dd4:	bf00      	nop
 8004dd6:	bf00      	nop
 8004dd8:	e7fd      	b.n	8004dd6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004dda:	4b39      	ldr	r3, [pc, #228]	@ (8004ec0 <xPortStartScheduler+0x130>)
 8004ddc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	22ff      	movs	r2, #255	@ 0xff
 8004dea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004df4:	78fb      	ldrb	r3, [r7, #3]
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004dfc:	b2da      	uxtb	r2, r3
 8004dfe:	4b31      	ldr	r3, [pc, #196]	@ (8004ec4 <xPortStartScheduler+0x134>)
 8004e00:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004e02:	4b31      	ldr	r3, [pc, #196]	@ (8004ec8 <xPortStartScheduler+0x138>)
 8004e04:	2207      	movs	r2, #7
 8004e06:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e08:	e009      	b.n	8004e1e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004e0a:	4b2f      	ldr	r3, [pc, #188]	@ (8004ec8 <xPortStartScheduler+0x138>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	4a2d      	ldr	r2, [pc, #180]	@ (8004ec8 <xPortStartScheduler+0x138>)
 8004e12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004e14:	78fb      	ldrb	r3, [r7, #3]
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	005b      	lsls	r3, r3, #1
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e1e:	78fb      	ldrb	r3, [r7, #3]
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e26:	2b80      	cmp	r3, #128	@ 0x80
 8004e28:	d0ef      	beq.n	8004e0a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e2a:	4b27      	ldr	r3, [pc, #156]	@ (8004ec8 <xPortStartScheduler+0x138>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f1c3 0307 	rsb	r3, r3, #7
 8004e32:	2b04      	cmp	r3, #4
 8004e34:	d00b      	beq.n	8004e4e <xPortStartScheduler+0xbe>
	__asm volatile
 8004e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e3a:	f383 8811 	msr	BASEPRI, r3
 8004e3e:	f3bf 8f6f 	isb	sy
 8004e42:	f3bf 8f4f 	dsb	sy
 8004e46:	60bb      	str	r3, [r7, #8]
}
 8004e48:	bf00      	nop
 8004e4a:	bf00      	nop
 8004e4c:	e7fd      	b.n	8004e4a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e4e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ec8 <xPortStartScheduler+0x138>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	021b      	lsls	r3, r3, #8
 8004e54:	4a1c      	ldr	r2, [pc, #112]	@ (8004ec8 <xPortStartScheduler+0x138>)
 8004e56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e58:	4b1b      	ldr	r3, [pc, #108]	@ (8004ec8 <xPortStartScheduler+0x138>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004e60:	4a19      	ldr	r2, [pc, #100]	@ (8004ec8 <xPortStartScheduler+0x138>)
 8004e62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	b2da      	uxtb	r2, r3
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004e6c:	4b17      	ldr	r3, [pc, #92]	@ (8004ecc <xPortStartScheduler+0x13c>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a16      	ldr	r2, [pc, #88]	@ (8004ecc <xPortStartScheduler+0x13c>)
 8004e72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004e76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004e78:	4b14      	ldr	r3, [pc, #80]	@ (8004ecc <xPortStartScheduler+0x13c>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a13      	ldr	r2, [pc, #76]	@ (8004ecc <xPortStartScheduler+0x13c>)
 8004e7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004e82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004e84:	f000 f8da 	bl	800503c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004e88:	4b11      	ldr	r3, [pc, #68]	@ (8004ed0 <xPortStartScheduler+0x140>)
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004e8e:	f000 f8f9 	bl	8005084 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004e92:	4b10      	ldr	r3, [pc, #64]	@ (8004ed4 <xPortStartScheduler+0x144>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a0f      	ldr	r2, [pc, #60]	@ (8004ed4 <xPortStartScheduler+0x144>)
 8004e98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004e9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004e9e:	f7ff ff63 	bl	8004d68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004ea2:	f7fe ff53 	bl	8003d4c <vTaskSwitchContext>
	prvTaskExitError();
 8004ea6:	f7ff ff19 	bl	8004cdc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004eaa:	2300      	movs	r3, #0
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3718      	adds	r7, #24
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	e000ed00 	.word	0xe000ed00
 8004eb8:	410fc271 	.word	0x410fc271
 8004ebc:	410fc270 	.word	0x410fc270
 8004ec0:	e000e400 	.word	0xe000e400
 8004ec4:	20000ea4 	.word	0x20000ea4
 8004ec8:	20000ea8 	.word	0x20000ea8
 8004ecc:	e000ed20 	.word	0xe000ed20
 8004ed0:	2000000c 	.word	0x2000000c
 8004ed4:	e000ef34 	.word	0xe000ef34

08004ed8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
	__asm volatile
 8004ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ee2:	f383 8811 	msr	BASEPRI, r3
 8004ee6:	f3bf 8f6f 	isb	sy
 8004eea:	f3bf 8f4f 	dsb	sy
 8004eee:	607b      	str	r3, [r7, #4]
}
 8004ef0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004ef2:	4b10      	ldr	r3, [pc, #64]	@ (8004f34 <vPortEnterCritical+0x5c>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	4a0e      	ldr	r2, [pc, #56]	@ (8004f34 <vPortEnterCritical+0x5c>)
 8004efa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004efc:	4b0d      	ldr	r3, [pc, #52]	@ (8004f34 <vPortEnterCritical+0x5c>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d110      	bne.n	8004f26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004f04:	4b0c      	ldr	r3, [pc, #48]	@ (8004f38 <vPortEnterCritical+0x60>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00b      	beq.n	8004f26 <vPortEnterCritical+0x4e>
	__asm volatile
 8004f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f12:	f383 8811 	msr	BASEPRI, r3
 8004f16:	f3bf 8f6f 	isb	sy
 8004f1a:	f3bf 8f4f 	dsb	sy
 8004f1e:	603b      	str	r3, [r7, #0]
}
 8004f20:	bf00      	nop
 8004f22:	bf00      	nop
 8004f24:	e7fd      	b.n	8004f22 <vPortEnterCritical+0x4a>
	}
}
 8004f26:	bf00      	nop
 8004f28:	370c      	adds	r7, #12
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	2000000c 	.word	0x2000000c
 8004f38:	e000ed04 	.word	0xe000ed04

08004f3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004f42:	4b12      	ldr	r3, [pc, #72]	@ (8004f8c <vPortExitCritical+0x50>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10b      	bne.n	8004f62 <vPortExitCritical+0x26>
	__asm volatile
 8004f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f4e:	f383 8811 	msr	BASEPRI, r3
 8004f52:	f3bf 8f6f 	isb	sy
 8004f56:	f3bf 8f4f 	dsb	sy
 8004f5a:	607b      	str	r3, [r7, #4]
}
 8004f5c:	bf00      	nop
 8004f5e:	bf00      	nop
 8004f60:	e7fd      	b.n	8004f5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004f62:	4b0a      	ldr	r3, [pc, #40]	@ (8004f8c <vPortExitCritical+0x50>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	3b01      	subs	r3, #1
 8004f68:	4a08      	ldr	r2, [pc, #32]	@ (8004f8c <vPortExitCritical+0x50>)
 8004f6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004f6c:	4b07      	ldr	r3, [pc, #28]	@ (8004f8c <vPortExitCritical+0x50>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d105      	bne.n	8004f80 <vPortExitCritical+0x44>
 8004f74:	2300      	movs	r3, #0
 8004f76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	f383 8811 	msr	BASEPRI, r3
}
 8004f7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr
 8004f8c:	2000000c 	.word	0x2000000c

08004f90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004f90:	f3ef 8009 	mrs	r0, PSP
 8004f94:	f3bf 8f6f 	isb	sy
 8004f98:	4b15      	ldr	r3, [pc, #84]	@ (8004ff0 <pxCurrentTCBConst>)
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	f01e 0f10 	tst.w	lr, #16
 8004fa0:	bf08      	it	eq
 8004fa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004fa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004faa:	6010      	str	r0, [r2, #0]
 8004fac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004fb0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004fb4:	f380 8811 	msr	BASEPRI, r0
 8004fb8:	f3bf 8f4f 	dsb	sy
 8004fbc:	f3bf 8f6f 	isb	sy
 8004fc0:	f7fe fec4 	bl	8003d4c <vTaskSwitchContext>
 8004fc4:	f04f 0000 	mov.w	r0, #0
 8004fc8:	f380 8811 	msr	BASEPRI, r0
 8004fcc:	bc09      	pop	{r0, r3}
 8004fce:	6819      	ldr	r1, [r3, #0]
 8004fd0:	6808      	ldr	r0, [r1, #0]
 8004fd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fd6:	f01e 0f10 	tst.w	lr, #16
 8004fda:	bf08      	it	eq
 8004fdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004fe0:	f380 8809 	msr	PSP, r0
 8004fe4:	f3bf 8f6f 	isb	sy
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	f3af 8000 	nop.w

08004ff0 <pxCurrentTCBConst>:
 8004ff0:	20000878 	.word	0x20000878
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ff4:	bf00      	nop
 8004ff6:	bf00      	nop

08004ff8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
	__asm volatile
 8004ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005002:	f383 8811 	msr	BASEPRI, r3
 8005006:	f3bf 8f6f 	isb	sy
 800500a:	f3bf 8f4f 	dsb	sy
 800500e:	607b      	str	r3, [r7, #4]
}
 8005010:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005012:	f7fe fde1 	bl	8003bd8 <xTaskIncrementTick>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d003      	beq.n	8005024 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800501c:	4b06      	ldr	r3, [pc, #24]	@ (8005038 <xPortSysTickHandler+0x40>)
 800501e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005022:	601a      	str	r2, [r3, #0]
 8005024:	2300      	movs	r3, #0
 8005026:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	f383 8811 	msr	BASEPRI, r3
}
 800502e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005030:	bf00      	nop
 8005032:	3708      	adds	r7, #8
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	e000ed04 	.word	0xe000ed04

0800503c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800503c:	b480      	push	{r7}
 800503e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005040:	4b0b      	ldr	r3, [pc, #44]	@ (8005070 <vPortSetupTimerInterrupt+0x34>)
 8005042:	2200      	movs	r2, #0
 8005044:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005046:	4b0b      	ldr	r3, [pc, #44]	@ (8005074 <vPortSetupTimerInterrupt+0x38>)
 8005048:	2200      	movs	r2, #0
 800504a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800504c:	4b0a      	ldr	r3, [pc, #40]	@ (8005078 <vPortSetupTimerInterrupt+0x3c>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a0a      	ldr	r2, [pc, #40]	@ (800507c <vPortSetupTimerInterrupt+0x40>)
 8005052:	fba2 2303 	umull	r2, r3, r2, r3
 8005056:	099b      	lsrs	r3, r3, #6
 8005058:	4a09      	ldr	r2, [pc, #36]	@ (8005080 <vPortSetupTimerInterrupt+0x44>)
 800505a:	3b01      	subs	r3, #1
 800505c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800505e:	4b04      	ldr	r3, [pc, #16]	@ (8005070 <vPortSetupTimerInterrupt+0x34>)
 8005060:	2207      	movs	r2, #7
 8005062:	601a      	str	r2, [r3, #0]
}
 8005064:	bf00      	nop
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	e000e010 	.word	0xe000e010
 8005074:	e000e018 	.word	0xe000e018
 8005078:	20000000 	.word	0x20000000
 800507c:	10624dd3 	.word	0x10624dd3
 8005080:	e000e014 	.word	0xe000e014

08005084 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005084:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005094 <vPortEnableVFP+0x10>
 8005088:	6801      	ldr	r1, [r0, #0]
 800508a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800508e:	6001      	str	r1, [r0, #0]
 8005090:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005092:	bf00      	nop
 8005094:	e000ed88 	.word	0xe000ed88

08005098 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800509e:	f3ef 8305 	mrs	r3, IPSR
 80050a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2b0f      	cmp	r3, #15
 80050a8:	d915      	bls.n	80050d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80050aa:	4a18      	ldr	r2, [pc, #96]	@ (800510c <vPortValidateInterruptPriority+0x74>)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	4413      	add	r3, r2
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80050b4:	4b16      	ldr	r3, [pc, #88]	@ (8005110 <vPortValidateInterruptPriority+0x78>)
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	7afa      	ldrb	r2, [r7, #11]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d20b      	bcs.n	80050d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80050be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c2:	f383 8811 	msr	BASEPRI, r3
 80050c6:	f3bf 8f6f 	isb	sy
 80050ca:	f3bf 8f4f 	dsb	sy
 80050ce:	607b      	str	r3, [r7, #4]
}
 80050d0:	bf00      	nop
 80050d2:	bf00      	nop
 80050d4:	e7fd      	b.n	80050d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80050d6:	4b0f      	ldr	r3, [pc, #60]	@ (8005114 <vPortValidateInterruptPriority+0x7c>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80050de:	4b0e      	ldr	r3, [pc, #56]	@ (8005118 <vPortValidateInterruptPriority+0x80>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d90b      	bls.n	80050fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80050e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ea:	f383 8811 	msr	BASEPRI, r3
 80050ee:	f3bf 8f6f 	isb	sy
 80050f2:	f3bf 8f4f 	dsb	sy
 80050f6:	603b      	str	r3, [r7, #0]
}
 80050f8:	bf00      	nop
 80050fa:	bf00      	nop
 80050fc:	e7fd      	b.n	80050fa <vPortValidateInterruptPriority+0x62>
	}
 80050fe:	bf00      	nop
 8005100:	3714      	adds	r7, #20
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	e000e3f0 	.word	0xe000e3f0
 8005110:	20000ea4 	.word	0x20000ea4
 8005114:	e000ed0c 	.word	0xe000ed0c
 8005118:	20000ea8 	.word	0x20000ea8

0800511c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b08a      	sub	sp, #40	@ 0x28
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005124:	2300      	movs	r3, #0
 8005126:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005128:	f7fe fc9a 	bl	8003a60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800512c:	4b5c      	ldr	r3, [pc, #368]	@ (80052a0 <pvPortMalloc+0x184>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d101      	bne.n	8005138 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005134:	f000 f924 	bl	8005380 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005138:	4b5a      	ldr	r3, [pc, #360]	@ (80052a4 <pvPortMalloc+0x188>)
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4013      	ands	r3, r2
 8005140:	2b00      	cmp	r3, #0
 8005142:	f040 8095 	bne.w	8005270 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d01e      	beq.n	800518a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800514c:	2208      	movs	r2, #8
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4413      	add	r3, r2
 8005152:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f003 0307 	and.w	r3, r3, #7
 800515a:	2b00      	cmp	r3, #0
 800515c:	d015      	beq.n	800518a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f023 0307 	bic.w	r3, r3, #7
 8005164:	3308      	adds	r3, #8
 8005166:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f003 0307 	and.w	r3, r3, #7
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00b      	beq.n	800518a <pvPortMalloc+0x6e>
	__asm volatile
 8005172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005176:	f383 8811 	msr	BASEPRI, r3
 800517a:	f3bf 8f6f 	isb	sy
 800517e:	f3bf 8f4f 	dsb	sy
 8005182:	617b      	str	r3, [r7, #20]
}
 8005184:	bf00      	nop
 8005186:	bf00      	nop
 8005188:	e7fd      	b.n	8005186 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d06f      	beq.n	8005270 <pvPortMalloc+0x154>
 8005190:	4b45      	ldr	r3, [pc, #276]	@ (80052a8 <pvPortMalloc+0x18c>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	429a      	cmp	r2, r3
 8005198:	d86a      	bhi.n	8005270 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800519a:	4b44      	ldr	r3, [pc, #272]	@ (80052ac <pvPortMalloc+0x190>)
 800519c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800519e:	4b43      	ldr	r3, [pc, #268]	@ (80052ac <pvPortMalloc+0x190>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051a4:	e004      	b.n	80051b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80051a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80051aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d903      	bls.n	80051c2 <pvPortMalloc+0xa6>
 80051ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1f1      	bne.n	80051a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80051c2:	4b37      	ldr	r3, [pc, #220]	@ (80052a0 <pvPortMalloc+0x184>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d051      	beq.n	8005270 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80051cc:	6a3b      	ldr	r3, [r7, #32]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2208      	movs	r2, #8
 80051d2:	4413      	add	r3, r2
 80051d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80051d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	6a3b      	ldr	r3, [r7, #32]
 80051dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80051de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e0:	685a      	ldr	r2, [r3, #4]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	1ad2      	subs	r2, r2, r3
 80051e6:	2308      	movs	r3, #8
 80051e8:	005b      	lsls	r3, r3, #1
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d920      	bls.n	8005230 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80051ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4413      	add	r3, r2
 80051f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	f003 0307 	and.w	r3, r3, #7
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d00b      	beq.n	8005218 <pvPortMalloc+0xfc>
	__asm volatile
 8005200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005204:	f383 8811 	msr	BASEPRI, r3
 8005208:	f3bf 8f6f 	isb	sy
 800520c:	f3bf 8f4f 	dsb	sy
 8005210:	613b      	str	r3, [r7, #16]
}
 8005212:	bf00      	nop
 8005214:	bf00      	nop
 8005216:	e7fd      	b.n	8005214 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800521a:	685a      	ldr	r2, [r3, #4]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	1ad2      	subs	r2, r2, r3
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800522a:	69b8      	ldr	r0, [r7, #24]
 800522c:	f000 f90a 	bl	8005444 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005230:	4b1d      	ldr	r3, [pc, #116]	@ (80052a8 <pvPortMalloc+0x18c>)
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	4a1b      	ldr	r2, [pc, #108]	@ (80052a8 <pvPortMalloc+0x18c>)
 800523c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800523e:	4b1a      	ldr	r3, [pc, #104]	@ (80052a8 <pvPortMalloc+0x18c>)
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	4b1b      	ldr	r3, [pc, #108]	@ (80052b0 <pvPortMalloc+0x194>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	429a      	cmp	r2, r3
 8005248:	d203      	bcs.n	8005252 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800524a:	4b17      	ldr	r3, [pc, #92]	@ (80052a8 <pvPortMalloc+0x18c>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a18      	ldr	r2, [pc, #96]	@ (80052b0 <pvPortMalloc+0x194>)
 8005250:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005254:	685a      	ldr	r2, [r3, #4]
 8005256:	4b13      	ldr	r3, [pc, #76]	@ (80052a4 <pvPortMalloc+0x188>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	431a      	orrs	r2, r3
 800525c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800525e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005262:	2200      	movs	r2, #0
 8005264:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005266:	4b13      	ldr	r3, [pc, #76]	@ (80052b4 <pvPortMalloc+0x198>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	3301      	adds	r3, #1
 800526c:	4a11      	ldr	r2, [pc, #68]	@ (80052b4 <pvPortMalloc+0x198>)
 800526e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005270:	f7fe fc04 	bl	8003a7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	f003 0307 	and.w	r3, r3, #7
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00b      	beq.n	8005296 <pvPortMalloc+0x17a>
	__asm volatile
 800527e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005282:	f383 8811 	msr	BASEPRI, r3
 8005286:	f3bf 8f6f 	isb	sy
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	60fb      	str	r3, [r7, #12]
}
 8005290:	bf00      	nop
 8005292:	bf00      	nop
 8005294:	e7fd      	b.n	8005292 <pvPortMalloc+0x176>
	return pvReturn;
 8005296:	69fb      	ldr	r3, [r7, #28]
}
 8005298:	4618      	mov	r0, r3
 800529a:	3728      	adds	r7, #40	@ 0x28
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	20004ab4 	.word	0x20004ab4
 80052a4:	20004ac8 	.word	0x20004ac8
 80052a8:	20004ab8 	.word	0x20004ab8
 80052ac:	20004aac 	.word	0x20004aac
 80052b0:	20004abc 	.word	0x20004abc
 80052b4:	20004ac0 	.word	0x20004ac0

080052b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b086      	sub	sp, #24
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d04f      	beq.n	800536a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80052ca:	2308      	movs	r3, #8
 80052cc:	425b      	negs	r3, r3
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	4413      	add	r3, r2
 80052d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	685a      	ldr	r2, [r3, #4]
 80052dc:	4b25      	ldr	r3, [pc, #148]	@ (8005374 <vPortFree+0xbc>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4013      	ands	r3, r2
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d10b      	bne.n	80052fe <vPortFree+0x46>
	__asm volatile
 80052e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ea:	f383 8811 	msr	BASEPRI, r3
 80052ee:	f3bf 8f6f 	isb	sy
 80052f2:	f3bf 8f4f 	dsb	sy
 80052f6:	60fb      	str	r3, [r7, #12]
}
 80052f8:	bf00      	nop
 80052fa:	bf00      	nop
 80052fc:	e7fd      	b.n	80052fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00b      	beq.n	800531e <vPortFree+0x66>
	__asm volatile
 8005306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800530a:	f383 8811 	msr	BASEPRI, r3
 800530e:	f3bf 8f6f 	isb	sy
 8005312:	f3bf 8f4f 	dsb	sy
 8005316:	60bb      	str	r3, [r7, #8]
}
 8005318:	bf00      	nop
 800531a:	bf00      	nop
 800531c:	e7fd      	b.n	800531a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	685a      	ldr	r2, [r3, #4]
 8005322:	4b14      	ldr	r3, [pc, #80]	@ (8005374 <vPortFree+0xbc>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4013      	ands	r3, r2
 8005328:	2b00      	cmp	r3, #0
 800532a:	d01e      	beq.n	800536a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d11a      	bne.n	800536a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	685a      	ldr	r2, [r3, #4]
 8005338:	4b0e      	ldr	r3, [pc, #56]	@ (8005374 <vPortFree+0xbc>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	43db      	mvns	r3, r3
 800533e:	401a      	ands	r2, r3
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005344:	f7fe fb8c 	bl	8003a60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	4b0a      	ldr	r3, [pc, #40]	@ (8005378 <vPortFree+0xc0>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4413      	add	r3, r2
 8005352:	4a09      	ldr	r2, [pc, #36]	@ (8005378 <vPortFree+0xc0>)
 8005354:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005356:	6938      	ldr	r0, [r7, #16]
 8005358:	f000 f874 	bl	8005444 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800535c:	4b07      	ldr	r3, [pc, #28]	@ (800537c <vPortFree+0xc4>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	3301      	adds	r3, #1
 8005362:	4a06      	ldr	r2, [pc, #24]	@ (800537c <vPortFree+0xc4>)
 8005364:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005366:	f7fe fb89 	bl	8003a7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800536a:	bf00      	nop
 800536c:	3718      	adds	r7, #24
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	20004ac8 	.word	0x20004ac8
 8005378:	20004ab8 	.word	0x20004ab8
 800537c:	20004ac4 	.word	0x20004ac4

08005380 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005380:	b480      	push	{r7}
 8005382:	b085      	sub	sp, #20
 8005384:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005386:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800538a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800538c:	4b27      	ldr	r3, [pc, #156]	@ (800542c <prvHeapInit+0xac>)
 800538e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f003 0307 	and.w	r3, r3, #7
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00c      	beq.n	80053b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	3307      	adds	r3, #7
 800539e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f023 0307 	bic.w	r3, r3, #7
 80053a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80053a8:	68ba      	ldr	r2, [r7, #8]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	4a1f      	ldr	r2, [pc, #124]	@ (800542c <prvHeapInit+0xac>)
 80053b0:	4413      	add	r3, r2
 80053b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80053b8:	4a1d      	ldr	r2, [pc, #116]	@ (8005430 <prvHeapInit+0xb0>)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80053be:	4b1c      	ldr	r3, [pc, #112]	@ (8005430 <prvHeapInit+0xb0>)
 80053c0:	2200      	movs	r2, #0
 80053c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	68ba      	ldr	r2, [r7, #8]
 80053c8:	4413      	add	r3, r2
 80053ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80053cc:	2208      	movs	r2, #8
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	1a9b      	subs	r3, r3, r2
 80053d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f023 0307 	bic.w	r3, r3, #7
 80053da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	4a15      	ldr	r2, [pc, #84]	@ (8005434 <prvHeapInit+0xb4>)
 80053e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80053e2:	4b14      	ldr	r3, [pc, #80]	@ (8005434 <prvHeapInit+0xb4>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2200      	movs	r2, #0
 80053e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80053ea:	4b12      	ldr	r3, [pc, #72]	@ (8005434 <prvHeapInit+0xb4>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2200      	movs	r2, #0
 80053f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	1ad2      	subs	r2, r2, r3
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005400:	4b0c      	ldr	r3, [pc, #48]	@ (8005434 <prvHeapInit+0xb4>)
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	4a0a      	ldr	r2, [pc, #40]	@ (8005438 <prvHeapInit+0xb8>)
 800540e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	4a09      	ldr	r2, [pc, #36]	@ (800543c <prvHeapInit+0xbc>)
 8005416:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005418:	4b09      	ldr	r3, [pc, #36]	@ (8005440 <prvHeapInit+0xc0>)
 800541a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800541e:	601a      	str	r2, [r3, #0]
}
 8005420:	bf00      	nop
 8005422:	3714      	adds	r7, #20
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr
 800542c:	20000eac 	.word	0x20000eac
 8005430:	20004aac 	.word	0x20004aac
 8005434:	20004ab4 	.word	0x20004ab4
 8005438:	20004abc 	.word	0x20004abc
 800543c:	20004ab8 	.word	0x20004ab8
 8005440:	20004ac8 	.word	0x20004ac8

08005444 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800544c:	4b28      	ldr	r3, [pc, #160]	@ (80054f0 <prvInsertBlockIntoFreeList+0xac>)
 800544e:	60fb      	str	r3, [r7, #12]
 8005450:	e002      	b.n	8005458 <prvInsertBlockIntoFreeList+0x14>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	60fb      	str	r3, [r7, #12]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	429a      	cmp	r2, r3
 8005460:	d8f7      	bhi.n	8005452 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	4413      	add	r3, r2
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	429a      	cmp	r2, r3
 8005472:	d108      	bne.n	8005486 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	685a      	ldr	r2, [r3, #4]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	441a      	add	r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	68ba      	ldr	r2, [r7, #8]
 8005490:	441a      	add	r2, r3
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	429a      	cmp	r2, r3
 8005498:	d118      	bne.n	80054cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	4b15      	ldr	r3, [pc, #84]	@ (80054f4 <prvInsertBlockIntoFreeList+0xb0>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d00d      	beq.n	80054c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685a      	ldr	r2, [r3, #4]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	441a      	add	r2, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	601a      	str	r2, [r3, #0]
 80054c0:	e008      	b.n	80054d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80054c2:	4b0c      	ldr	r3, [pc, #48]	@ (80054f4 <prvInsertBlockIntoFreeList+0xb0>)
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	601a      	str	r2, [r3, #0]
 80054ca:	e003      	b.n	80054d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d002      	beq.n	80054e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054e2:	bf00      	nop
 80054e4:	3714      	adds	r7, #20
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	20004aac 	.word	0x20004aac
 80054f4:	20004ab4 	.word	0x20004ab4

080054f8 <memset>:
 80054f8:	4402      	add	r2, r0
 80054fa:	4603      	mov	r3, r0
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d100      	bne.n	8005502 <memset+0xa>
 8005500:	4770      	bx	lr
 8005502:	f803 1b01 	strb.w	r1, [r3], #1
 8005506:	e7f9      	b.n	80054fc <memset+0x4>

08005508 <_reclaim_reent>:
 8005508:	4b29      	ldr	r3, [pc, #164]	@ (80055b0 <_reclaim_reent+0xa8>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4283      	cmp	r3, r0
 800550e:	b570      	push	{r4, r5, r6, lr}
 8005510:	4604      	mov	r4, r0
 8005512:	d04b      	beq.n	80055ac <_reclaim_reent+0xa4>
 8005514:	69c3      	ldr	r3, [r0, #28]
 8005516:	b1ab      	cbz	r3, 8005544 <_reclaim_reent+0x3c>
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	b16b      	cbz	r3, 8005538 <_reclaim_reent+0x30>
 800551c:	2500      	movs	r5, #0
 800551e:	69e3      	ldr	r3, [r4, #28]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	5959      	ldr	r1, [r3, r5]
 8005524:	2900      	cmp	r1, #0
 8005526:	d13b      	bne.n	80055a0 <_reclaim_reent+0x98>
 8005528:	3504      	adds	r5, #4
 800552a:	2d80      	cmp	r5, #128	@ 0x80
 800552c:	d1f7      	bne.n	800551e <_reclaim_reent+0x16>
 800552e:	69e3      	ldr	r3, [r4, #28]
 8005530:	4620      	mov	r0, r4
 8005532:	68d9      	ldr	r1, [r3, #12]
 8005534:	f000 f872 	bl	800561c <_free_r>
 8005538:	69e3      	ldr	r3, [r4, #28]
 800553a:	6819      	ldr	r1, [r3, #0]
 800553c:	b111      	cbz	r1, 8005544 <_reclaim_reent+0x3c>
 800553e:	4620      	mov	r0, r4
 8005540:	f000 f86c 	bl	800561c <_free_r>
 8005544:	6961      	ldr	r1, [r4, #20]
 8005546:	b111      	cbz	r1, 800554e <_reclaim_reent+0x46>
 8005548:	4620      	mov	r0, r4
 800554a:	f000 f867 	bl	800561c <_free_r>
 800554e:	69e1      	ldr	r1, [r4, #28]
 8005550:	b111      	cbz	r1, 8005558 <_reclaim_reent+0x50>
 8005552:	4620      	mov	r0, r4
 8005554:	f000 f862 	bl	800561c <_free_r>
 8005558:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800555a:	b111      	cbz	r1, 8005562 <_reclaim_reent+0x5a>
 800555c:	4620      	mov	r0, r4
 800555e:	f000 f85d 	bl	800561c <_free_r>
 8005562:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005564:	b111      	cbz	r1, 800556c <_reclaim_reent+0x64>
 8005566:	4620      	mov	r0, r4
 8005568:	f000 f858 	bl	800561c <_free_r>
 800556c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800556e:	b111      	cbz	r1, 8005576 <_reclaim_reent+0x6e>
 8005570:	4620      	mov	r0, r4
 8005572:	f000 f853 	bl	800561c <_free_r>
 8005576:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005578:	b111      	cbz	r1, 8005580 <_reclaim_reent+0x78>
 800557a:	4620      	mov	r0, r4
 800557c:	f000 f84e 	bl	800561c <_free_r>
 8005580:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005582:	b111      	cbz	r1, 800558a <_reclaim_reent+0x82>
 8005584:	4620      	mov	r0, r4
 8005586:	f000 f849 	bl	800561c <_free_r>
 800558a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800558c:	b111      	cbz	r1, 8005594 <_reclaim_reent+0x8c>
 800558e:	4620      	mov	r0, r4
 8005590:	f000 f844 	bl	800561c <_free_r>
 8005594:	6a23      	ldr	r3, [r4, #32]
 8005596:	b14b      	cbz	r3, 80055ac <_reclaim_reent+0xa4>
 8005598:	4620      	mov	r0, r4
 800559a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800559e:	4718      	bx	r3
 80055a0:	680e      	ldr	r6, [r1, #0]
 80055a2:	4620      	mov	r0, r4
 80055a4:	f000 f83a 	bl	800561c <_free_r>
 80055a8:	4631      	mov	r1, r6
 80055aa:	e7bb      	b.n	8005524 <_reclaim_reent+0x1c>
 80055ac:	bd70      	pop	{r4, r5, r6, pc}
 80055ae:	bf00      	nop
 80055b0:	20000010 	.word	0x20000010

080055b4 <__libc_init_array>:
 80055b4:	b570      	push	{r4, r5, r6, lr}
 80055b6:	4d0d      	ldr	r5, [pc, #52]	@ (80055ec <__libc_init_array+0x38>)
 80055b8:	4c0d      	ldr	r4, [pc, #52]	@ (80055f0 <__libc_init_array+0x3c>)
 80055ba:	1b64      	subs	r4, r4, r5
 80055bc:	10a4      	asrs	r4, r4, #2
 80055be:	2600      	movs	r6, #0
 80055c0:	42a6      	cmp	r6, r4
 80055c2:	d109      	bne.n	80055d8 <__libc_init_array+0x24>
 80055c4:	4d0b      	ldr	r5, [pc, #44]	@ (80055f4 <__libc_init_array+0x40>)
 80055c6:	4c0c      	ldr	r4, [pc, #48]	@ (80055f8 <__libc_init_array+0x44>)
 80055c8:	f000 f87e 	bl	80056c8 <_init>
 80055cc:	1b64      	subs	r4, r4, r5
 80055ce:	10a4      	asrs	r4, r4, #2
 80055d0:	2600      	movs	r6, #0
 80055d2:	42a6      	cmp	r6, r4
 80055d4:	d105      	bne.n	80055e2 <__libc_init_array+0x2e>
 80055d6:	bd70      	pop	{r4, r5, r6, pc}
 80055d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80055dc:	4798      	blx	r3
 80055de:	3601      	adds	r6, #1
 80055e0:	e7ee      	b.n	80055c0 <__libc_init_array+0xc>
 80055e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80055e6:	4798      	blx	r3
 80055e8:	3601      	adds	r6, #1
 80055ea:	e7f2      	b.n	80055d2 <__libc_init_array+0x1e>
 80055ec:	0800581c 	.word	0x0800581c
 80055f0:	0800581c 	.word	0x0800581c
 80055f4:	0800581c 	.word	0x0800581c
 80055f8:	08005820 	.word	0x08005820

080055fc <__retarget_lock_acquire_recursive>:
 80055fc:	4770      	bx	lr

080055fe <__retarget_lock_release_recursive>:
 80055fe:	4770      	bx	lr

08005600 <memcpy>:
 8005600:	440a      	add	r2, r1
 8005602:	4291      	cmp	r1, r2
 8005604:	f100 33ff 	add.w	r3, r0, #4294967295
 8005608:	d100      	bne.n	800560c <memcpy+0xc>
 800560a:	4770      	bx	lr
 800560c:	b510      	push	{r4, lr}
 800560e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005612:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005616:	4291      	cmp	r1, r2
 8005618:	d1f9      	bne.n	800560e <memcpy+0xe>
 800561a:	bd10      	pop	{r4, pc}

0800561c <_free_r>:
 800561c:	b538      	push	{r3, r4, r5, lr}
 800561e:	4605      	mov	r5, r0
 8005620:	2900      	cmp	r1, #0
 8005622:	d041      	beq.n	80056a8 <_free_r+0x8c>
 8005624:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005628:	1f0c      	subs	r4, r1, #4
 800562a:	2b00      	cmp	r3, #0
 800562c:	bfb8      	it	lt
 800562e:	18e4      	addlt	r4, r4, r3
 8005630:	f000 f83e 	bl	80056b0 <__malloc_lock>
 8005634:	4a1d      	ldr	r2, [pc, #116]	@ (80056ac <_free_r+0x90>)
 8005636:	6813      	ldr	r3, [r2, #0]
 8005638:	b933      	cbnz	r3, 8005648 <_free_r+0x2c>
 800563a:	6063      	str	r3, [r4, #4]
 800563c:	6014      	str	r4, [r2, #0]
 800563e:	4628      	mov	r0, r5
 8005640:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005644:	f000 b83a 	b.w	80056bc <__malloc_unlock>
 8005648:	42a3      	cmp	r3, r4
 800564a:	d908      	bls.n	800565e <_free_r+0x42>
 800564c:	6820      	ldr	r0, [r4, #0]
 800564e:	1821      	adds	r1, r4, r0
 8005650:	428b      	cmp	r3, r1
 8005652:	bf01      	itttt	eq
 8005654:	6819      	ldreq	r1, [r3, #0]
 8005656:	685b      	ldreq	r3, [r3, #4]
 8005658:	1809      	addeq	r1, r1, r0
 800565a:	6021      	streq	r1, [r4, #0]
 800565c:	e7ed      	b.n	800563a <_free_r+0x1e>
 800565e:	461a      	mov	r2, r3
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	b10b      	cbz	r3, 8005668 <_free_r+0x4c>
 8005664:	42a3      	cmp	r3, r4
 8005666:	d9fa      	bls.n	800565e <_free_r+0x42>
 8005668:	6811      	ldr	r1, [r2, #0]
 800566a:	1850      	adds	r0, r2, r1
 800566c:	42a0      	cmp	r0, r4
 800566e:	d10b      	bne.n	8005688 <_free_r+0x6c>
 8005670:	6820      	ldr	r0, [r4, #0]
 8005672:	4401      	add	r1, r0
 8005674:	1850      	adds	r0, r2, r1
 8005676:	4283      	cmp	r3, r0
 8005678:	6011      	str	r1, [r2, #0]
 800567a:	d1e0      	bne.n	800563e <_free_r+0x22>
 800567c:	6818      	ldr	r0, [r3, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	6053      	str	r3, [r2, #4]
 8005682:	4408      	add	r0, r1
 8005684:	6010      	str	r0, [r2, #0]
 8005686:	e7da      	b.n	800563e <_free_r+0x22>
 8005688:	d902      	bls.n	8005690 <_free_r+0x74>
 800568a:	230c      	movs	r3, #12
 800568c:	602b      	str	r3, [r5, #0]
 800568e:	e7d6      	b.n	800563e <_free_r+0x22>
 8005690:	6820      	ldr	r0, [r4, #0]
 8005692:	1821      	adds	r1, r4, r0
 8005694:	428b      	cmp	r3, r1
 8005696:	bf04      	itt	eq
 8005698:	6819      	ldreq	r1, [r3, #0]
 800569a:	685b      	ldreq	r3, [r3, #4]
 800569c:	6063      	str	r3, [r4, #4]
 800569e:	bf04      	itt	eq
 80056a0:	1809      	addeq	r1, r1, r0
 80056a2:	6021      	streq	r1, [r4, #0]
 80056a4:	6054      	str	r4, [r2, #4]
 80056a6:	e7ca      	b.n	800563e <_free_r+0x22>
 80056a8:	bd38      	pop	{r3, r4, r5, pc}
 80056aa:	bf00      	nop
 80056ac:	20004c08 	.word	0x20004c08

080056b0 <__malloc_lock>:
 80056b0:	4801      	ldr	r0, [pc, #4]	@ (80056b8 <__malloc_lock+0x8>)
 80056b2:	f7ff bfa3 	b.w	80055fc <__retarget_lock_acquire_recursive>
 80056b6:	bf00      	nop
 80056b8:	20004c04 	.word	0x20004c04

080056bc <__malloc_unlock>:
 80056bc:	4801      	ldr	r0, [pc, #4]	@ (80056c4 <__malloc_unlock+0x8>)
 80056be:	f7ff bf9e 	b.w	80055fe <__retarget_lock_release_recursive>
 80056c2:	bf00      	nop
 80056c4:	20004c04 	.word	0x20004c04

080056c8 <_init>:
 80056c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ca:	bf00      	nop
 80056cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ce:	bc08      	pop	{r3}
 80056d0:	469e      	mov	lr, r3
 80056d2:	4770      	bx	lr

080056d4 <_fini>:
 80056d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056d6:	bf00      	nop
 80056d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056da:	bc08      	pop	{r3}
 80056dc:	469e      	mov	lr, r3
 80056de:	4770      	bx	lr
